<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
      <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">
        
        <!-- Useful for describing APIs -->
        <!ENTITY COPY   '<command>COPY</command>'>
        <!ENTITY DELETE '<command>DELETE</command>'>
        <!ENTITY GET    '<command>GET</command>'>
        <!ENTITY HEAD   '<command>HEAD</command>'>
        <!ENTITY PUT    '<command>PUT</command>'>
        <!ENTITY POST   '<command>POST</command>'> 
        
          <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">     
        
]>
  <book xmlns="http://docbook.org/ns/docbook"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:svg="http://www.w3.org/2000/svg"
        xmlns:m="http://www.w3.org/the key 1998/Math/MathML"
        xmlns:html="http://www.w3.org/1999/xhtml"
	xml:id="cf-devguide"
        version="5.0">
    <?rax pdf.url="../../../cf-devguide-latest.pdf"?>
  <title>Cloud Files™ Developer Guide</title>
  <info>
    <author>
      <personname>
        <firstname/>
        <surname/>
      </personname>
      <affiliation>
        <orgname>Rackspace Cloud</orgname>
      </affiliation>
    </author>
    <copyright>
      <year>2009</year>
      <year>2010</year>
      <year>2011</year>
      <year>2012</year>
      <year>2013</year>
      <holder>Rackspace US, Inc.</holder>
    </copyright>
    <releaseinfo>API v1</releaseinfo>
    <productname>Cloud Files™</productname>
    <pubdate>2013-11-26</pubdate>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the template.</remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para> This document is intended for software developers
        interested in developing applications using the Rackspace
        Cloud Files™ Application Programming Interface
          (<abbrev>API</abbrev>).  </para>
    </abstract>
    <revhistory>
      <revision>
        <date>2013-11-26</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref linkend="Create-Large-Objects-d10e"/>
                with more information about Dynamic Large Objects and
                Static Large Objects.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Extract_Archive-d1e2338"/>
                to include a note about using a blank
                  <code>Content-Type</code> to have Cloud Files
                determine the file type for the archive.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-22</date>
        <revdescription>
          <para>
            <itemizedlist>
              <listitem>
                <para>Added service catalog information for
                    <code>cloudfilesCDN</code> endpoints (<xref
                    linkend="cloudfileCDN-service-catalog-de100"
                  />).</para>
              </listitem>
              <listitem>
                <para>Made miscellaneous updates throughout this book
                  to improve wording and consistency.</para>
              </listitem>
            </itemizedlist>
          </para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-11-01</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Replaced references to <code>X-Storage-Url</code>
                and <code>X-Cdn-Management–Url</code> throughout this
                document with references to the
                  <code>cloudFiles</code> and
                  <code>cloudFilesCDN</code> endpoints in the service
                catalog based on use of Identity v2.0 rather than
                Identity v1.0.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Authentication-d1e433"/> to
                include new references to additional information about
                the service access endpoints and the service catalog.
              </para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Authentication-d1e2929"/>
                to show a cURL example for Identity v2.0 only.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-10-25</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref
                  linkend="Service-Access-Endpoints-d1e003"/>, which
                includes all endpoints for Cloud Files including the
                newest one in Hong Kong.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Multi_region-dl2200"/> to
                include additional endpoints from the service
                catalog.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Authentication-d1e639"/> to
                show information for Rackspace Identity v2.0.</para>
            </listitem>
            <listitem>
              <para>Updated <xref linkend="Create_the_Form-d1a777"/>
                to indicate that the value of <code>redirect</code>
                (see Example 7.9) can be empty to indicate that no
                redirect is included on the form. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-09-26</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added <xref linkend="RBAC"/>.</para>
            </listitem>
            <listitem>
              <para>Updated <xref
                  linkend="CORS_Container_Header-d1e1300"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-09-19</date>
        <revdescription>
          <itemizedlist> 
            <listitem>
              <para>Updated responses to show
                  <code>application/json</code> in <xref
                  linkend="Bulk_Delete-d1e2338"/>.</para>
            </listitem>
            <listitem>
              <para>Added <code>X-Container-Meta-Web-Listings</code>,
                  <code>X-Container-Meta-Web-Listings-Css</code>, and
                  <code>X-Container-Meta-Web-Directory-Type</code> to
                  <xref linkend="Create_Static_Website-dle4000"
                />.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-07-18</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para linkend="Create_the_Form-d1a777">Clarified
                information about <code>redirect</code> and
                  <code>expires</code> in <xref
                  linkend="Create_the_Form-d1a777"/>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-07-02</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Corrected Example 7.1 (back to using Identity
                v1.0) in <xref linkend="Authentication-d1e2929"/> and
                added an example for Identity v2.0.  </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-06-27</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>In <xref linkend="Authentication-d1e639"/>,
                changed references for authentication to point to
                v2.0.</para>
            </listitem>
            <listitem>
              <para>In <xref linkend="Authentication-d1e2929"/>,
                updated the example to show v2.0 for
                authentication.</para>
            </listitem>
            <listitem>
              <para>In <xref
                  linkend="Purge_CDN-Enabled_Objects-d1e3858"/> and
                  <xref
                  linkend="Purge_CDN-Enabled_Containers_or_Objects-d1e2747"
                />, added a note about removing a CDN-enabled
                container by setting <code>X-Cdn-Enabled</code> to
                  <code>False</code> in
                <command>HEAD</command>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-06-14 </date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added information about authentication, v1 and v2,
                in <xref linkend="Authentication-d1e639"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-05-20</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added a link in <xref linkend="Overview-d1e70"/>
                to the Knowledge Center article, "Best Practices for
                Using Cloud Files,"  at  <link
                  xlink:href="http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files"
                  >http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files</link>.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Container_Quotas-d1e2222"
                /></para>
            </listitem>
            <listitem>
              <para>Created a new section <xref
                  linkend="Storage_Objects-d1e4300"/>. This section
                includes new and previously existing information
                specifically related to storage objects.</para>
            </listitem>
            <listitem>
              <para linkend="Container_Quotas-d1e1444">Added <xref
                  linkend="Static_Large_Object-d1e2226"/>.</para>
            </listitem>
            <listitem>
              <para>Added <xref linkend="Bulk_Operations-d1e2338"
                />.</para>
            </listitem>
            <listitem>
              <para linkend="Container_Quotas-d1e1444">Added <xref
                  linkend="TempURL_File_Name_Overrides-d1e213"
                />.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-02-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Changed location of SDKs. Added note on object metadata behavior.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-12-05</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added iOS Streaming.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-11-30</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Fixed internal linking.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-11-16</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added end_marker list parameter and CORS container
                headers. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-31</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Updated language binding language and
                links.</para>
            </listitem>
            <listitem>
              <para>Updated view CDN-enabled header. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added Access Log Delivery. Updated auth point.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>  
      <revision>
        <date>2012-09-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added multi-region, legal, and CDN charge note.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-08-13</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Changed TTL limits and CDN URLs.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-07-23</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added CDN object purge limits.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-06-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added Bulk Import information.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-06-01</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added Object Versioning and Static Web information.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-04-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
           <listitem>
              <para>Added TempURL and FormPost.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-03-19</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Fixed doc tickets. 
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-02-06</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revisions to clarify issues brought up in doc tickets.
              Formatted HEAD like other commands. Standardized on URL. 
              Added Expiring Objects and ServiceNet information.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-01-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revisions for the addition of expiring object
                functionality plus doc bug fixes including adding more
                cross-references for finding language bindings.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    <revision>
        <date>2011-11-15</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Revised information about how to perform a CDN
                purge, indicating you must contact support to request
                a container purge operation.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-10-21</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added more detail about reasons to perform a CDN
                purge, clarifying that it is not required for deleting
                objects.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-09-13</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about streaming containers to support this new streaming
                feature, including changing examples to match the streaming headers and URLs
                returned.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-06-29</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>In the 6.1.1 Authorization example, changed
                  <code>X-Auth-Token</code> to
                <code>X-Auth-Key</code>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-06-15</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added best practices for authentication tokens.</para>
            </listitem>
            
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-05-24</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about new headers including CORS headers.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-04-20</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>HEAD returns 200 instead of 204 on an object metadata request.</para>
            </listitem>
            <listitem>
              <para>TTL maximum value is now 50 years instead of 3 days, the minimum TTL is now 15 minutes (900 seconds), and the default is now 72 hours instead of 24 hours.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about large object support.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-17</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about container metadata.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-03-10</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added a section about retrieving an SSL URL for CDN-enabled containers that
                are using https protocol.</para>
            </listitem>
            <listitem>
              <para>Updated examples to contain SSL as appropriate.</para>
            </listitem>   
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-02-25</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added information about the edge purge capability for CDN-enabled containers
                and objects.</para>
            </listitem>
            
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-02-18</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Fixed error in the header range example that stated first instead of last
                when fetching a portion of the data. </para>
            </listitem>
            <listitem>
              <para>Updated CDN URLs to match new format.</para>
            </listitem>
            <listitem>
              <para>Fixed error referring to <code>X-Auth-User</code>
                instead of <code>X-Auth-Key</code>. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-01-12</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para> 
                Removed references to ACL (Access Control List).
              </para>
            </listitem>
            <listitem>
              <para> Fixed error in examples referring to
                  <code>X-Auth-Key</code> where it should be
                  <code>X-Auth-Token</code>. </para>
            </listitem>
            <listitem>
              <para>
                Added section numbers.
              </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2011-01-04</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para> 
                Expanded authentication information for UK release.
              </para>
            </listitem>
            <listitem>
              <para> Added <parameter>delimiter</parameter> as a Query
                Parameter and server-side object copy example. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2008-05-05</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Initial release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
    <raxm:metadata
	xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>API Developer Guide</raxm:displayname>
      <raxm:product version="v1">files</raxm:product>
      <raxm:priority>20</raxm:priority>
    </raxm:metadata>
  </info>
  <chapter xml:id="Overview-d1e70">
    <title>Overview</title>
    <info>
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
          <raxm:type>concept</raxm:type>
          <raxm:product version="v1">files</raxm:product>
          <raxm:priority>1</raxm:priority>   
      </raxm:metadata> 
    </info>
    <para>Rackspace Cloud Files™ is an affordable, redundant,
      scalable, and dynamic storage service offering. The core storage
      system is designed to provide a secure, network-accessible way
      to store an unlimited number of files. Each file can be as large
      as 5 gigabytes. You can store as much as you want and pay only
      for storage space that you actually use.</para>
    <para>Additionally, Cloud Files provides a simple yet powerful way
      to publish and distribute content behind a Content Distribution
      Network. As a Cloud Files user, you get access to this network
      automatically without having to worry about contracts,
      additional costs, or technical hurdles.</para>
    <para>Cloud Files allows you to store and retrieve files and
      CDN-enabled content through a simple Web Services interface
      (REST: Representational State Transfer). There are also
      language-specific APIs that utilize the RESTful API but make it
      much easier for developers to integrate into their
      applications.</para>
    <para>For more details on the Cloud Files service, please refer to
        <link
        xlink:href="http://www.rackspace.com/cloud/files/"
        >http://www.rackspace.com/cloud/files/</link> and to the
      Knowledge Center article <link
        xlink:href="http://www.rackspace.com/knowledge_center/article/best-practices-for-using-cloud-files"
        >Best Practices for Using Cloud
        Files</link>. </para>
    <para>Rackspace welcomes feedback, comments, and bug reports at
        <link xlink:href="mailto:support@rackspacecloud.com"
        >support@rackspacecloud.com</link>. </para>
    <section xml:id="Intended_Audience-d1e97">
      <title>Intended Audience</title>
      <para>This guide is intended to assist software developers who
        want to develop applications using the Rackspace Cloud Files
        API. It fully documents the REST application programming
        interface (API) that allows developers to interact with the
        storage and CDN components of the Cloud Files system. To use
        the information provided here, you should first have a general
        understanding of the Rackspace Cloud Files service and have
        access to an active Rackspace Cloud Files account. You should
        also be familiar with: </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>RESTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1</para>
        </listitem>
      </itemizedlist>
      <para>System administrators and others interested in the storage
        and CDN benefits of Cloud Files should consider using the File
        Manager interface within the Rackspace Cloud Control Panel,
          <link xlink:href="http://www.jungledisk.com/">Jungle
          Disk</link>, or third party tools such as <link
          xlink:href="http://www.fireuploader.com/"
          >Fileuploader</link> or <link
          xlink:href="http://www.cyberduck.ch/">Cyberduck</link>. The
        Rackspace Cloud Control Panel provides an easy to use
        web-based interface for uploading and downloading content to
        and from Cloud Files.</para>
      <para>Rackspace also provides language-specific APIs in several
        popular programming languages. For customers who are
        interested in accessing Cloud Files using one of the
        language-specific API, refer to <link
          xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
            ><citetitle>Rackspace Cloud SDKs Software Development Kit
            Guide</citetitle></link>. For information in this book
        about language-specific APIs, refer to <link
          linkend="Language-Specific_API_Bindings-d1e574"
          >Language-Specific API Bindings</link>.</para>
    </section>
    <?hard-pagebreak?>
    <section xml:id="Document_Change_History-d1e141">
      <title>Document Change History</title>
      <para>This version of the Developer Guide replaces and obsoletes
        all earlier versions. The most recent changes are described in
        the table below:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e388">
      <title>Additional Resources</title>
      <para>You can download the most current version of this document from the Rackspace Cloud
        website at <link
          xlink:href="http://docs.rackspacecloud.com/files/api/cf-devguide-latest.pdf">
          docs.rackspacecloud.com/files/api/cf-devguide-latest.pdf</link>. </para>
      <para>For more details about the Cloud Files service, please
        refer to <link
          xlink:href="http://http://www.rackspace.com/cloud/files/"
          >http://www.rackspace.com/cloud/files/</link>. Related
        documents are available at the same site, as are links to
        official Rackspace support channels, including Knowledge
        Center articles, forums, phone, chat, and email.</para>
      <para>For information about the Rackspace language-specific APIs
        that you can use for Cloud Files, refer to <link
          xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
            ><citetitle>Rackspace Cloud SDKs Software Development Kit
            Guide</citetitle></link>. Each language-specific API
        includes its own documentation (either HTML, PDF, or CHM)
        including code snippets and examples to help you get started.
        For information in this book about the language-specific APIs,
        refer to <link linkend="Language-Specific_API_Bindings-d1e574"
          >Language-Specific API Bindings</link>.</para>
    </section>
    
    <section xml:id="Pricing_Service-d1e1402"><title>Pricing and
        Service Level</title><para>Cloud Files is part of the
        Rackspace Cloud and your use through the API will be billed
        according to the pricing schedule at <link
          xlink:href="http://www.rackspace.com/cloud/public/files/pricing/"
          > www.rackspace.com/cloud/public/files/pricing</link>.
        </para><para>The Service Level Agreement (SLA) for Cloud Files
        is available at <link
          xlink:href="http://www.rackspace.com/information/legal/cloud/sla?page=files"
          >
          http://www.rackspace.com/information/legal/cloud/sla#files</link>.
      </para></section>
    
  </chapter>
  <chapter xml:id="Concepts-d1e413">
    <title>Concepts</title>
    <info>
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
	<raxm:type>concept</raxm:type> 
	<raxm:product version="v1">files</raxm:product>        
        <raxm:priority>2</raxm:priority>
      </raxm:metadata> 
    </info>
    <para>Cloud Files is not a file system in the traditional sense.
      You will not be able to map or mount virtual disk drives like
      you can with other forms of storage such as a SAN or NAS. Since
      Cloud Files is a different way of thinking when it comes to
      storage, you should take a few moments to review the key
      concepts listed below. </para>
    <section xml:id="Accounts-d1e421">
      <title>Accounts</title>
      <para>The Cloud Files system is designed to be used by many
        different customers. Your user account is your portion of the
        Cloud Files system. You must identify yourself with your
        Rackspace Cloud user name and API access key and once
        authenticated, you have full read/write access to the files
        stored under your account. Please visit <link
          xlink:href="https://cart.rackspace.com/cloud/?cp_id=cloud_files"
          >http://www.rackspacecloud.com/signup</link> to obtain a
        Cloud Files account and enable your API access key. </para>
    </section>
    <section xml:id="Authentication-d1e433">
      <title>Authentication</title>
      <para><xref linkend="Authentication-d1e639"/> describes how to
        authenticate against the Rackspace Cloud Identity service to
        receive Cloud Files connection parameters and an
        authentication token. The token must be passed in for Cloud
        Files operations during the time it is valid. </para>
      <para>See the following sections for more information:<itemizedlist>
          <listitem>
            <para><xref linkend="Service-Access-Endpoints-d1e003"/>
              shows the service access endpoints for Cloud
              Files.</para>
          </listitem>
          <listitem>
            <para><xref linkend="Service-Catalog-Endpoints-d1e001"/>
              shows service catalog information for Cloud
              Files.</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>For more information about authentication, see the
          <citetitle>Cloud Identity Client Developer Guide,
          v2.0</citetitle> at <link
          xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Overview-d1e65.html"
          > docs.rackspace.com</link>.</para>
      <note>
        <para>The language-specific APIs handle authentication, token passing, and HTTPS
          request/response communication.</para>
      </note>
    </section>
    <section xml:id="Permissions-d1e448">
      <title>Permissions </title>
      <para>In Cloud Files, you have your own storage account and has
        full access to that account. You must authenticate with your
        credentials as described in <xref
          linkend="Authentication-d1e639"/>, but once authenticated
        you can perform all Cloud Files operations within that
        account. </para>
    </section>
    <section xml:id="Containers-d1e458">
      <title>Containers</title>
      <para>A container is a storage compartment that provides a way
        for you to organize your data. You can think of a container as
        a folder in Windows® or a directory in UNIX®. The primary
        difference between a container and these other file system
        concepts is that containers cannot be nested. You can,
        however, create up to 500,000 containers within your account.
        Data must be stored in a container so you must have at least
        one container defined in your account prior to uploading data.
        If you expect to have containers with millions of objects,
        Rackspace recommends organizing the object storage across
        multiple containers.</para>
      <para>The only restrictions on container names is that they
        cannot contain a forward slash (<code>/</code>) and must be
        less than 256 bytes in length. Note that the length
        restriction applies to the name after it has been URL encoded.
        For example, a container name of <code>Course Docs</code>
        would be URL encoded as <code>Course%20Docs</code> and is 13
        bytes in length rather than the expected 11.</para>
      <para>You can create a container in any Rackspace data center.
        (See <xref linkend="Service-Access-Endpoints-d1e003"/> for a
        list.) However, in order to lower your costs, you should
        create your most served containers in the same data center as
        your server. Otherwise, you will be billed for external
        bandwidth charges. Note that this is true when computations
        are performed on objects but is not true for static content
        served to end users directly.</para>
    </section>
    <section xml:id="Objects-d1e479">
      <title>Objects</title>
      <para>Objects are the basic storage entities in Cloud Files.
        They represent the files and their optional metadata you
        upload to the system. When you upload objects to Cloud Files,
        the data is stored as-is (without compression or encryption)
        and consists of a location (container), the object's name, and
        any metadata you assign consisting of key/value pairs. For
        instance, you can choose to store a backup of your digital
        photos and organize them into albums. In this case, each
        object could be tagged with metadata such as <code>Album :
          Caribbean Cruise</code> or <code>Album : Aspen Ski
          Trip</code>. </para>
      <para>The only restriction on object names is that they must be less than 1024 bytes in length
        after URL encoding. For example, an object name of <code>C++final(v2).txt</code> should be
        URL encoded as <code>C%2B%2Bfinal%28v2%29.txt</code> and therefore be 24 bytes in length
        rather than the expected 16.</para>
      <para>Cloud Files has a limit on the size of a single uploaded
        object. By default this limit is 5 GB. However, the download
        size of a single object is virtually unlimited with the
        concept of segmentation. Segments of the larger object are
        uploaded and a special manifest file is created that, when
        downloaded, sends all the segments concatenated as a single
        object. This also offers much greater upload speed with the
        possibility of parallel uploads of the segments.</para>
      <para>For metadata, you should not exceed 90 individual key/value pairs for any one object and
        the total byte length of all key/value pairs should not exceed 4KB (4096 bytes).</para>
    </section>
    <section xml:id="Operations-d1e509">
      <title>Operations</title>
      <para linkend="Operations-d1e509">Operations are the actions you
        perform within your account, such as creating or deleting
        containers or uploading or downloading objects. The full list
        of operations is documented in the REST API sections, <xref
          linkend="API_Operations_for_Storage_Services-d1e942"/> and
          <xref linkend="API_Operations_for_Storage_Services-d1e942"
        />. Operations may be performed through the REST web service
        API or a language-specific AP. (See <link
          xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
            ><citetitle>Rackspace Cloud SDKs Software Development Kit
            Guide</citetitle></link> for information about the
        Rackspace language-specific APIs.)</para>
      <important>
        <para> All operations must include a valid authorization token. </para>
      </important>
    </section>
    <section xml:id="CDN-Enabled_Containers-d1e524">
      <title>CDN-enabled Containers</title>
      <para>CDN-enabled containers serve content through Akamai's
        content delivery network (CDN). CDN-enabled containers are
        publicly accessible for read access, so they do not require an
        authorization token for read access. However, uploading
        content into a CDN-enabled container is a secure operation and
        requires a valid authentication token.</para>
      <para>Each CDN-enabled container has a unique URL that can be
        combined with its object names and openly distributed in web
        pages, emails, or other applications.</para>
      <para>For example, a CDN-enabled container named
          <code>photos</code> might be referenced as
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.
          r10.cf1.rackcdn.com</code>. If that container houses a
        screenshot called <code>wow1.jpg</code>, that image can be
        served by a CDN with the full URL of
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.
            rackcdn.com/wow1.jpg</code>. </para>
      <para>This URL can be embedded in items like HTML pages, email
        messages, or blog posts. The first time that URL is accessed,
        a copy of that image is fetched from the Cloud Files storage
        system. The copy is cached in a CDN and served from there for
        all subsequent requests for a configurable cache time to live
        (TTL) value. Setting the TTL of a CDN-enabled container
        translates to setting the <code>Expires</code> and
          <code>Cache-Control</code> HTTP headers. Note that extremely
        long TTL values do not guarantee that an object is served from
        a CDN edge location. When the TTL expires, the CDN checks
        Cloud Files to ensure that it has the most up-to-date content.
        A purge request forces the CDN to check with Cloud Files for
        the most up-to-date version of the file. </para>
      <para>Cloud Files continues to serve content through the CDN
        until it receives a delete request. </para>
      <note>
        <para>For more information about TTL, including its default,
          minimum, and maximum values, see <xref
            linkend="CDN_Object_Services"/>.</para>
      </note>
      <para>Containers tracked in the CDN management service are
        completely separate and distinct from the containers defined
        in the storage service. It is possible for a container to be
        CDN-enabled even if it does not exist in the storage system.
        You can want the ability to pre-generate CDN URLs before
        actually uploading content and this separation gives you that
        ability.</para>
      <para>However, for the content to be served from the CDN, the container names <emphasis role="strong">MUST</emphasis> match in both the CDN management service and the storage
        service. For example, you could CDN-enable a container called <code>images</code> and be
        assigned the CDN URL, but you also need to create a container called <code>images</code> in
        the storage service.</para>
    </section>
    <section xml:id="Language-Specific_API_Bindings-d1e574">
      <title>Language-Specific APIs </title>
      <para>Language-specific APIs in several popular languages are
        available to help put Cloud Files in the hands of developers.
        These language-specific APIs provide a layer of abstraction on
        top of the base REST API, allowing programmers to work with a
        container and object model instead of working directly with
        HTTP requests and responses. The language-specific APIs are
        free to download, use, and modify. They are licensed under the
        MIT license as described in the COPYING file packaged with
        each API. If you make any improvements to an API, you are
        encouraged (but not required) to submit those changes back to
        Rackspace.</para>
      <para>Detailed information about the language-specific APIs is
        in the <link
          xlink:href="http://docs.rackspace.com/sdks/guide/content/intro.html"
          ><citetitle>Rackspace Cloud SDKs Software Development Kit
            Guide</citetitle></link>.
        If you have changes that you would like to see in the Cloud
        File language-specific APIs, email them to <link
          xlink:href="mailto:cloudfiles@rackspacecloud.com"
          >cloudfiles@rackspacecloud.com</link>. Make sure to indicate
        which language and version you modified and send a unified
        diff. </para>
      <para> Each language-specific API has its own documentation (in
        HTML, PDF, or CHM format) including code snippets and examples
        to help you get started. </para>
<!-- CYR: 11-07-2013 Removing list of specific language because this are out of date. Providing the link above to the SDKs intro will get customers to the latest information.      
      <itemizedlist>
        <listitem>
          <para><link
            xlink:href="http://docs.rackspace.com/sdks/guide/content/php.html">
            PHP</link> (requires 5.x and the modules: cURL, FileInfo, mbstring)</para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://docs.rackspace.com/sdks/guide/content/python.html">
              Python</link> (requires 2.4 or newer)</para>
        </listitem>
        <listitem>
          <para>
            <link
              xlink:href="http://docs.rackspace.com/sdks/guide/content/java.html">
              Java</link> (requires JRE v1.5 or newer)</para>
        </listitem>
-->      
 <!-- Removing these as of 2-01-13, per Ed Leafe of the Developer Relations Group. These
   are the older bindings and they are actively getting releases for Ruby and .Net.
   <listitem>
          <para>
            <link
              xlink:href="https://github.com/rackspace/csharp-cloudfiles">
              C#/.NET</link> (requires .NET Framework v3.5)</para>
        </listitem>
        <listitem>
          <para><link
            xlink:href="https://github.com/rackspace/ruby-cloudfiles">
            Ruby</link> (requires 1.8 or newer and mime-tools module)</para>
        </listitem>
        
      </itemizedlist>
-->     
      <para>You are welcome to create your own language-specific APIs.
        Rackspace will help answer any questions during development,
        host your code if you like, and give you full credit for your
        work.</para>
    </section>
  </chapter>

  <chapter xml:id="General_API_Information-d1e634">
    <title>General API Information</title>
    <info>
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
	<raxm:type>concept</raxm:type>        
	<raxm:product version="v1">files</raxm:product> 
        <raxm:priority>3</raxm:priority>
      </raxm:metadata> 
    </info>
    <para>The information in this chapter is relevant to all Cloud
      Files API operations. See later chapters for information about a
      specific API operation.</para>
    <section xml:id="Authentication-d1e639">
      <title>Authentication</title>
      <para xmlns:m="http://www.w3.org/1998/Math/MathML"> Every REST
        request against the Cloud Files service requires the inclusion
        of a specific authorization token, supplied by the
          <code>X-Auth-Token</code> HTTP header. Customers obtain this
        token by first using the Rackspace Cloud Authentication
        Service and supplying a valid user name and API access key. </para>
      <section xml:id="Geographic_Endpoints"
        xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Geographic Endpoints</title>
        <para> The Rackspace Cloud Authentication Service serves as
          the entry point to all Rackspace Cloud APIs and is itself a
          RESTful web service. </para>
        <para> To access the Authentication Service, you must know
          whether your account is US-based or UK-based: </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para> US-based accounts authenticate through <link
                xlink:href="&ENDPOINT-US-20;">&ENDPOINT-US-20;</link>.
            </para>
          </listitem>
          <listitem>
            <para> UK-based accounts authenticate through <link
                xlink:href="&ENDPOINT-UK-20;">&ENDPOINT-UK-20;</link>.
            </para>
          </listitem>
        </itemizedlist>
        <para> Your account may be based in either the US or the UK.
          This is not determined by your physical location but by the
          location of the Rackspace retail site which was used to
          create your account: </para>
        <itemizedlist spacing="compact">
          <listitem>
            <para> If your account was created via <link
                xlink:href="http://www.rackspacecloud.com"
                >http://www.rackspacecloud.com</link>, it is a
              US-based account. </para>
          </listitem>
          <listitem>
            <para> If your account was created via <link
                xlink:href="http://www.rackspace.co.uk"
                >http://www.rackspace.co.uk</link>, it is a UK-based
              account. </para>
          </listitem>
        </itemizedlist>
        <para> If you are unsure how your account was created, use the
          Rackspace contact information at either site to ask for
          help. </para>
      </section>
      <section xml:id="Retrieving_Auth_Token"
        xmlns:m="http://www.w3.org/1998/Math/MathML">
        <title>Retrieving the Authentication Token</title>
        <informaltable rules="all">
          <tbody>
            <tr>
              <td colspan="1">&POST; </td>
              <td colspan="1"> v2.0/tokens </td>
              <td colspan="4"> Authenticate to receive a token and a
                service catalog. </td>
            </tr>
          </tbody>
        </informaltable>
        <simpara> Normal Status Code(s):
            <returnvalue>200</returnvalue>,
            <returnvalue>203</returnvalue>
        </simpara>
        <simpara> Error Status Code(s): unauthorized
            (<errorcode>401</errorcode>), userDisabled
            (<errorcode>403</errorcode>), badRequest
            (<errorcode>400</errorcode>), authFault
            (<errorcode>500</errorcode>), serviceUnavailable
            (<errorcode>503</errorcode>) </simpara>
        <para> The authenticate operation provides clients with an
          authentication token and a list of regional cloud endpoints.
          The sample requests and responses in this section illustrate
          a general case. In your authentication request, use your own
          credentials rather than the sample values shown here for
            <code>username</code> and <code>apiKey</code>. When you
          authenticate successfully, the response to your
          authentication request will include a catalog of the
          services to which you have subscribed rather than the sample
          values shown here.</para>
        <example>
          <title>Auth Request: XML</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.xml.user" units="linecolumn"
                coords="13 17"/>
              <area xml:id="credentials.xml.key" units="linecolumn"
                coords="14 15"/>
            </areaspec>
            <programlisting language="xml">
<xi:include href="samples/credentials-20.xml" parse="text"/>
                    </programlisting>
          </programlistingco>
        </example>
        <example>
          <title>Auth Request: JSON</title>
          <programlistingco>
            <areaspec>
              <area xml:id="credentials.json.user" units="linecolumn"
                coords="14 22"/>
              <area xml:id="credentials.json.key" units="linecolumn"
                coords="15 20"/>
            </areaspec>
            <programlisting language="json">
<xi:include href="samples/credentials-20.json" parse="text"/>
                    </programlisting>
          </programlistingco>
        </example>
        <calloutlist>
          <callout arearefs="credentials.xml.user">
            <para>The <code>username</code> supplied here is your
              common Rackspace Cloud user name. </para>
          </callout>
          <callout arearefs="credentials.xml.key">
            <para>The key is your API access key. The key can be
              obtained from the Rackspace Cloud Control Panel in the
                <guimenu>&lt;Your Account></guimenu>/<guimenuitem>API
                Access</guimenuitem> section (login here: <link
                xlink:href="http://mycloud.rackspace.com/">Control
                Panel Login</link>). </para>
          </callout>
        </calloutlist>
        <example>
          <title>Auth Response: XML</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.xml.namespaces"
                units="linecolumn" coords="7 9"/>
              <area xml:id="response.xml.token" units="linecolumn"
                coords="15 10"/>
              <area xml:id="response.xml.dfltregion"
                units="linecolumn" coords="16 67"/>
              <area xml:id="response.xml.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.xml.catalog" units="linecolumn"
                coords="22 21"/>
              <area xml:id="response.xml.servicetype"
                units="linecolumn" coords="51 34"/>
              <area xml:id="response.xml.servicename"
                units="linecolumn" coords="51 54"/>
              <area xml:id="response.xml.region" units="linecolumn"
                coords="52 30"/>
              <area xml:id="response.xml.tenant" units="linecolumn"
                coords="53 66"/>
              <area xml:id="response.xml.url" units="linecolumn"
                coords="54 9"/>
            </areaspec>
            <programlisting language="xml"><xi:include href="samples/auth-20.xml" parse="text"/></programlisting>
          </programlistingco>
        </example>
        <example xml:id="auth-response-example-json">
          <title>Auth Response: JSON</title>
          <programlistingco>
            <areaspec>
              <area xml:id="response.json.namespaces"
                units="linecolumn" coords="200 1"/>
              <area xml:id="response.json.token" units="linecolumn"
                coords="9 8"/>
              <area xml:id="response.json.dfltregion"
                units="linecolumn" coords="16 45"/>
              <area xml:id="response.json.role" units="linecolumn"
                coords="17 12"/>
              <area xml:id="response.json.catalog" units="linecolumn"
                coords="30 8"/>
              <area xml:id="response.json.servicetype"
                units="linecolumn" coords="114 16"/>
              <area xml:id="response.json.servicename"
                units="linecolumn" coords="113 16"/>
              <area xml:id="response.json.region" units="linecolumn"
                coords="104 24"/>
              <area xml:id="response.json.tenant" units="linecolumn"
                coords="101 24"/>
              <area xml:id="response.json.url" units="linecolumn"
                coords="102 24"/>
            </areaspec>
            <programlisting language="json"><xi:include href="samples/auth-20.json" parse="text"/>
                    </programlisting>
          </programlistingco>
        </example>
        <note>
          <para>The information shown in the Auth Response examples is
            for US-based accounts. If you authenticate against the
            UK-endpoint for auth, you will see the service catalog
            information for UK-based accounts.</para>
        </note>
        <calloutlist>
          <callout arearefs="response.xml.namespaces">
            <para> In XML responses only, a list of namespaces
              identifies API extensions that add functionality to the
              core API. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.token">
            <para> This token can be presented to a service as
              evidence of authentication. Tokens are valid for a
              finite duration. A token's default lifespan is
              twenty-four hours. </para>
            <para> The token's <code>expires</code> attribute denotes
              the time after which the token will automatically become
              invalid. A token may be manually revoked before the time
              identified by the <code>expires</code> attribute. The
                <code>expires</code> attribute predicts a token's
              maximum possible lifespan but does not guarantee that it
              will reach that lifespan. Clients are encouraged to
              cache a token until it expires. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.dfltregion">
            <para>You can be assigned a default region so that, when
              there is a choice between multiple endpoints associated
              with a service in your catalog, the endpoint for your
              default region will be selected if it is available. In
              this example, the user's default region is DFW and
              several of the services in the catalog offer endpoints
              in that region and the ORD region. The user's work will
              be directed to the DFW region whenever possible. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.role">
            <para>Users can be assigned multiple roles, with each role
              providing specific privileges. In this example,
                <code>jsmith</code> is the administrative user for the
              account, holding the fully-privileged
                <code>identity:admin</code> role. Other users might
              hold other roles with different privileges. Roles need
              not be associated with actual job functions such as
              Administrator, Operator, Developer, Tester, or Trainer. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.catalog">
            <para> The service catalog lists the services you can
              access. In this example, the user can access one
              database service, one loadbalancing service, two compute
              services (Cloud Servers OpenStack and Cloud Servers),
              two object storage services (Cloud Files Content
              Distribution Network (CDN), and Cloud Files), and one
              DNS service. The catalog listing for each service
              provides at least one endpoint URL for that service.
              Other information, such as regions, versions, and
              tenants, is provided if it's relevant to this user's
              access to this service. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicetype">
            <para> The service type attribute identifies services that
              perform similar functions, whatever those services might
              be named. In this example, the services named
              cloudServers and cloudServersOpenstack are both
              identified as <code>type="compute"</code>, identifying
              them as compute services even though the word "compute"
              does not appear in their names. </para>
            <important>
              <para>Use service type as the primary value for locating
                a service. If multiple endpoints of the same service
                type exist in the same region, use service name as the
                tiebreaker.</para>
            </important>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.servicename">
            <para> The service name attribute identifies each unique
              service in the catalog. Once a service is created, its
              name does not change. However, new services of the same
              service type may be added to the catalog with new names. </para>
            <important>
              <para> If you are programmatically parsing an
                authentication response, use service type rather than
                service name as the basis for determining whether a
                user has access to a particular kind of service.
                Service type is stable across all releases. New
                service types may be developed, but existing service
                types are not renamed. In this example,
                  <code>type="compute"</code> identifies all the
                available compute services, one of which is named
                cloudServers and one of which is named
                cloudServersOpenStack. New compute service names may
                be added in future releases. Whatever the compute
                services are named, you can always recognize them by
                parsing for <code>type="compute"</code> in the
                authentication response's service catalog. </para>
            </important>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.region">
            <para> A service may expose endpoints in different
              regions. Regional endpoints allow clients to provision
              resources in a manner that provides high availability. </para>
            <para> Some services are not region-specific. These
              services supply a single non-regional endpoint and do
              not provide access to internal URLs. </para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.tenant">
            <para> Some services recognize specification of a tenant.
              If a service does recognize tenants, the format of the
              tenant specification is defined only by the service. For
              details about whether and how to specify a tenant, check
              the documentation for the service you are using.</para>
            <para> </para>
          </callout>
          <callout arearefs="response.xml.url">
            <para> An endpoint can be assigned public and internal
              URLs. A public URL is accessible from anywhere. Access
              to a public URL usually incurs traffic charges. Internal
              URLs are only accessible to services within the same
              region. Access to an internal URL is free of charge. </para>
            <para> </para>
          </callout>
        </calloutlist>
        <para>Authentication tokens are typically valid for 24 hours.
          Applications should be designed to re-authenticate after
          receiving a 401 (Unauthorized) response from a service
          endpoint. </para>
        <important>
          <para>If you are programmatically parsing an authentication
            response, please be aware that service names are stable
            for the life of the particular service and can be used as
            keys. You should also be aware that a user's service
            catalog can include multiple uniquely-named services which
            perform similar functions. For example,
            cloudServersOpenStack is the OpenStack version of compute
            whereas cloudServers is the legacy version of compute. The
            same user can have access to both services. In Auth 2.0,
            the service type attribute can be used as a key by which
            to recognize similar services. See the tip below.</para>
        </important>
        <tip>
          <para>Beginning with Auth 2.0, the service catalog includes
            a service type attribute to identify services that perform
            similar functions but have different names. For example,
              <code>type="compute"</code> identifies compute services
            such as cloudServers and cloudServersOpenStack. Some
            developers have found the service type attribute to be
            useful in parsing the service catalog. For additional
            information on Auth 2.0 (also known as the Cloud Identity
            Service), refer to the <citetitle>Cloud Identity Client
              Developer Guide</citetitle> at <link
              xlink:href="http://docs.rackspace.com"
              >http://docs.rackspace.com/</link>.</para>
        </tip>
        <para>Cloud Files service endpoints are published in the
          service catalog in the Auth response with the account
          number, which is a required element of the service
          endpoints. The examples shown here are for authentication
          for US customers. Customers with UK-based accounts will see
          different values in the service catalog. Refer to the next
          section for more information about service endpoints. </para>
      </section>

<!--
      <para>The Cloud Files API is implemented using a RESTful web
        service interface. Like other products in the Rackspace Cloud
        suite, the Cloud Files service shares a common token-based
        authentication system that allows seamless access between
        products and services.</para>
      <para>Client authentication is provided through a REST interface
        using the &GET; method, with <code>v1.0</code> supplied as the
        path. Additionally, two headers are required,
          <code>X-Auth-User</code> and <code>X-Auth-Key</code> with
        values for the username and API Access Key
        respectively.</para>
      <para> Each REST request against the Cloud Files system requires
        the inclusion of a specific authorization token HTTP x-header,
        defined as <code>X-Auth-Token</code>. Clients obtain this
        token, along with the Cloud Servers API URL, by first using
        the Rackspace Cloud Authentication Service and supplying a
        valid username and API access key. </para>
      <para> The Rackspace Cloud Authentication Service is a RESTful
        web service. It is the entry point to all Rackspace Cloud
        APIs. </para>
      <para> To access the Authentication Service, you must know whether your account is
        US-based or UK-based: 
      </para>
      <itemizedlist spacing="compact"
        xmlns:m="http://www.w3.org/1998/Math/MathML">
        <listitem>
          <para> US-based accounts authenticate through <link
              xlink:href="&ENDPOINT-US-20;">&ENDPOINT-US-20;</link>.
          </para>
        </listitem>
        <listitem>
          <para> UK-based accounts authenticate through <link
              xlink:href="&ENDPOINT-UK-20;">&ENDPOINT-UK-20;</link>.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Your account may be based in either the US or the UK; this is not determined
        by your physical location but by the location of the Rackspace site which
        was used to create your account: 
      </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para> If your account was created through <link
              xlink:href="http://www.rackspacecloud.com"
              >http://www.rackspacecloud.com</link>, it is a US-based
            account. </para>   
        </listitem>
        <listitem>
          <para> If your account was created through <link
              xlink:href="http://www.rackspace.co.uk"
              >http://www.rackspace.co.uk</link>, it is a UK-based
            account. </para>
        </listitem>
      </itemizedlist>
      <para>
        If you are unsure how your account was created, use the Rackspace contact
        information at either site to ask for help.
      </para>
      
      
     
      <simplesect>
        <title>Request</title>
        <para>
          To authenticate and get your Auth token, you must supply your username and API Key in x-headers:
        </para>
          <itemizedlist>
            <listitem>
              <para>
              <phrase>
                <remark security="writeronly">2012-09-25 - Retooled
                  the API/Auth token information below for clarity.
                  Had user complaints that they could not find it.
                  2013-10-25 Updated per Joe Savak.</remark>
              </phrase> Use your Rackspace Cloud username for the API.
              In the example below, <code>demoauthor</code> is used
              for <code>username</code>. </para>
            </listitem>
            <listitem>
              <itemizedlist>
                <para><emphasis role="bold">Get Your API Key</emphasis></para>
                <para> Log in to the Rackspace Cloud Control Panel and
                get your API key. </para>
                <listitem>
                  <para>In the Classic Control Panel, your API Key can
                  be found under Your Account | API Access. </para>
                </listitem>
                <listitem>
                  <para>In the Cloud Control Panel, your API Key can
                  be found by clicking the downward arrow next to your
                  user name and selecting <code>API Keys</code>.  </para>
                </listitem>
              </itemizedlist>  
                <para>In either Control Panel, click the <code>Show
                Key</code> button to get your key.  In the example
              below,  <code>aaaaa-bbbbb-ccccc-12345678</code> is used
              for <code>apiKey</code>.</para>
            </listitem>
          </itemizedlist>
        <para> </para>
        <example>
          <title>Authenticate (with Username and API Key Credentials)
            Request: JSON</title>
          <literallayout language="bash">{
       "auth": {
             "RAX-KSKEY:apiKeyCredentials": {
                       "username": "demoauthor",
                       "apiKey": "aaaaa-bbbbb-ccccc-12345678"
             }
      }
}</literallayout>
        </example>
        
 <remark 10-25-2013 Example for v1 of Identity. Joe Savak requested change to show v2 example. </remark>        
        <example>
          <title>Authentication Request (US-Based Account)</title>
          <literallayout class="monospaced">
  GET /v1.0 HTTP/1.1
  Host: identity.api.rackspacecloud.com
  X-Auth-User: jdoe
  X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89
                    </literallayout>
        </example>
      </simplesect>
     
</simplesect> 
<simplesect>


        <title>Response</title>     
        <para>When you successfully authenticate your session, an HTTP status 204 (No Content) 
          is returned with the
          <code>X-Storage-Url</code>, <code>X-Cdn-Management-Url</code>, and
          <code>X-Auth-Token</code> headers. The headers can be processed as is, and any 2xx response 
          is a good response. 
          <phrase>
          <remark security="writeronly">2012-02-29</remark>For example, a 202
          response means the request has been accepted.</phrase> (Additional <code>x-</code> headers
          related to other Rackspace services may be returned; they can be ignored.) 
          An HTTP status of 401 (Unauthorized) is returned upon authentication failure. 
          Use the URL returned for <code>X-Storage-Url</code> to perform the operations
          in the Developer's Guide.
        </para>
          <para>For most operations, you will need to use your Auth
          token (<code>X-Auth-Token</code>). For security, it expires
          every 24 hours. </para>
        <example>
          <title>Authentication Response</title>
          <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Mon, 12 Nov 2007 15:32:21 GMT
  X-Storage-Url: https://storage.clouddrive.com/v1/CF_xer7_34
  X-CDN-Management-Url: https://cdn.clouddrive.com/v1/CF_xer7_34
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
              </literallayout>
        </example>
        <para>You use the <code>X-Storage-Url</code> and <code>X-Cdn-Management-Url</code>
          headers when you perform operations on your Cloud Files account. From the example response 
          above, users connecting to Cloud Files use the host header <code>storage.clouddrive.com</code>;
          the sample account name is <code>CF_xer7_34</code>. Auth tokens are valid for a 24 hours. 
          Once a token expires, you must request a new one.
        </para>
        <para>Note: To CDN-enable Containers or adjust CDN attributes,
          requests must be sent to <code>cdn.clouddrive.com</code>. </para>
        <para>For more information about authentication (v1 and v2),
          see the Identity API Dev Guides at <link
            xlink:href="docs.rackspace.com"
            >http://docs.rackspace.com</link>. You can use either v1
          or v2 for authentication. However, to access new features
          (like multi-region), you must use v2. </para>
      </simplesect>
      -->
    </section>
    <?hard-pagebreak?>
    
    <section xml:id="RBAC"
      xmlns:wadl="http://wadl.dev.java.net/2009/02"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Role Based Access Control</title>
      <para>Role Based Access Control (RBAC) restricts access to the
        capabilities of Rackspace Cloud services, including the Cloud
        Files API, to authorized users only. RBAC enables Rackspace
        Cloud customers to specify which account users of their Cloud
        account have access to which Cloud Files API service
        capabilities, based on roles defined by Rackspace (see <xref
          linkend="RBAC_product_roles_table"/>). The permissions to
        perform certain operations in the Cloud Files API – create,
        read, update, delete – are assigned to specific roles, and
        these roles can be assigned by the Cloud account admin user to
        account users of the account. </para>
      <section xml:id="assigningRoles">
        <title>Assigning Roles to Account Users</title>
        <para>The account owner (identity:user-admin) can create
          account users on the account and then assign roles to those
          users. The roles grant the account users specific
          permissions for accessing the capabilities of the Cloud
          Files service. Each account has only one account owner, and
          that role is assigned by default to any Rackspace Cloud
          account when the account is created.</para>
        <para>See the <citetitle>Cloud Identity Client Developer
            Guide</citetitle> for information about how to perform the
          following tasks:</para>
        <itemizedlist>
          <listitem>
            <para><link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_.html">
              Create account users</link></para>
          </listitem>
          <listitem>
            <para><link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html">
              Assign roles to account users</link></para>
          </listitem>
          <listitem>
            <para><link xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html">
              Delete roles from account users</link></para>
          </listitem>
        </itemizedlist>
        <note>
          <para>The account owner (identity:user-admin) role cannot
            hold any additional roles because it already has full
            access to all capabilities.</para>
        </note>
      </section>
      <section xml:id="rolesAvailable">
        <title>Roles Available for Cloud Files </title>
        <para>Two roles (admin and observer) can be used to access the
          Cloud Files API specifically. The following table describes
          these roles and their permissions. </para>
        <table rules="all" xml:id="RBAC_product_roles_table">
          <caption>Cloud Files Product Roles and Permissions</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Role Permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>object-store:admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in Cloud Files, where access is
                granted.</td>
            </tr>
            <tr>
              <td>object-store:observer</td>
              <td>This role provides Read permission in Cloud Files,
                where access is granted.</td>
            </tr>
          </tbody>
        </table>
        <para>Additionally, two multiproduct roles apply to all
          products. Users with multiproduct roles inherit access to
          future products when those products become RBAC-enabled. The
          following table describes these roles and their
          permissions.</para>
        <table rules="all" width="100%"
          xml:id="RBAC_global_roles_table_3">
          <caption> Multiproduct (Global) Roles and
            Permissions</caption>
          <thead>
            <tr>
              <td colspan="1">Role Name</td>
              <td colspan="2">Role Permissions</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="1">admin</td>
              <td colspan="2">This role provides Create, Read, Update,
                and Delete permissions in all products, where access
                is granted.</td>
            </tr>
            <tr>
              <td colspan="1">observer</td>
              <td colspan="2">This role provides Read permission in
                all products, where access is granted.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section version="5.0" xml:id="RBAC_Role_Conflict_3">
        <title>Resolving Conflicts Between RBAC Multiproduct vs.
          Custom (Product-specific) Roles</title>
        <para>The account owner can set roles for both multiproduct
          and Cloud Files scope, and it is important to understand how
          any potential conflicts among these roles are resolved. When
          two roles appear to conflict, the role that provides the
          more extensive permissions takes precedence. Therefore,
          admin roles take precedence over observer and creator roles,
          because admin roles provide more permissions. </para>
        <para>The following table shows two examples of how potential
          conflicts between user roles in the Control Panel are
          resolved: </para>
        <para>
          <informaltable rules="all">
            <thead>
              <tr align="center">
                <td>Permission Configuration</td>
                <td>View of Permission in the Control Panel </td>
                <td>Can the User Perform Product Admin Functions in
                  the Control Panel?</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">observer</emphasis> and
                  Cloud Files <emphasis role="bold"
                  >admin</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">observer</emphasis>
                  role</td>
                <td>Yes, for Cloud Files only. The user has the
                    <emphasis role="bold">observer</emphasis> role for
                  the rest of the products.</td>
              </tr>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">admin</emphasis> and Cloud
                  Files <emphasis role="bold">observer</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">admin</emphasis> role</td>
                <td>Yes, for all of the products. The Cloud Files
                    <emphasis role="bold">observer</emphasis> role is
                  ignored.</td>
              </tr>
            </tbody>
          </informaltable>
        </para>
      </section>
      <section version="5.0" xml:id="RBAC_API_XREF_3">
        <title>RBAC Permissions Cross-reference to Cloud Files API
          Operations</title>
        <para>API operations for Cloud Files may or may not be
          available to all roles. To see which operations are
          permitted to invoke which calls, please review <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
            > the Knowledge Center article</link>.</para>
      </section>    
    </section>
    
    
      
    <section xml:id="Service-Access-Endpoints-d1e003"
      xmlns:m="http://www.w3.org/1998/Math/MathML">
      <title>Service Access Endpoints</title>
      <para>Cloud Files is a regionalized service. The user of the
        service is therefore responsible for appropriate replication,
        caching, and overall maintenance of Cloud Files data across
        regional boundaries to other Cloud Files servers.  </para>
      <para>The endpoints to use for your Cloud Files API calls are
        summarized in the table below.</para>
      <para>
        <table xml:id="Endpoints-Table-d1e001" rules="all">
          <caption>Regionalized Service Endpoints</caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2" rowspan="2">Chicago (ORD)</td>
              <td colspan="5"
                ><code>https://storage101.ord1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                ><code>https://snet-storage101.ord1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                ><code>https://storage101.dfw1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                ><code>https://snet-storage101.dfw1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Hong Kong (HKG)</td>
              <td colspan="5"
                    ><code>https://storage101.hkg1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                    ><code>https://snet-storage101.hkg1.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr align="left">
              <td colspan="2" rowspan="2">London (LON)</td>
              <td colspan="5"
                    ><code>https://storage101.lon3.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                    ><code>https://snet-storage101.lon3.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Northern Virginia (IAD)</td>
              <td colspan="5"
                ><code>https://storage101.iad3.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                ><code>https://snet-storage101.iad3.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="2" rowspan="2">Sydney (SYD)</td>
              <td colspan="5"
                ><code>https://storage101.syd2.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
            <tr>
              <td colspan="5"
                    ><code>https://snet-storage101.syd2.clouddrive.com/v1/<parameter>1234</parameter>/</code></td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>Replace the sample account ID number,
        <parameter>1234</parameter>, with your actual account number
        returned as part of the authentication service response.</para>
      <para>You will find the actual account number after the final '/'
        in the <code>publicURL</code> field and the
        <code>internalURL</code>  field returned by the authentication
        response. For more information about this account number, see
        sample authentication request and response in the
        <citetitle>Cloud Identity Client Developer Guide</citetitle>. </para>
      <tip>
        <para>If you do not know which data center you are working in or
          your account ID, you can find them in your Cloud Control Panel
          at <link xlink:href="https://mycloud.rackspace.com/"
            >mycloud.rackspace.com</link>. </para>
      </tip>
      <para>If you are working with cloud servers that are in one of the
        Rackspace data centers, using the ServiceNet endpoint in the
        same data center has no network costs and provides a faster
        connection. ServiceNet endpoints are prefixed with
        <code>snet-</code> in <xref linkend="Endpoints-Table-d1e001"
        />. ServiceNet is the data center internet network. In your
        authentication response, it is listed as
        <code>internalURL</code>. </para>
      <para> If you are working with servers that are not in one of the
        Rackspace data centers, you must use a public endpoint to
        connect. In your authentication response, public endpoints are
        listed as <code>publicURL</code>. If you are working with
        servers in multiple data centers or have a mixed environment
        where you have servers in your data centers and in Rackspace
        data centers, use a public endpoint because it is accessible
        from all the servers in the different environments.</para>
        
    </section>
    <!--  
    <section xml:id="Limits-d1e942">
      <title>Limits</title>
      <remark>REVIEWER: Does Cloud Files have both rate limits and
        absolute limits? </remark>
      <para>Accounts are configured with default thresholds, or
        limits, that manage capacity and prevent abuse of the
        system.</para>
      <para>The system recognizes the following types of
        limits:</para>
      <itemizedlist>
        <listitem>
          <para>rate limits</para>
          <para>Rate limits are thresholds that are reset after a
            certain amount of time passes. Rate limits control the
            frequency at which the user can issue specific API
            requests. For more information, see <xref
              linkend="Rate_Limits-d1e942"/>. </para>
        </listitem>
        <listitem>
          <para>absolute limits</para>
          <para>Absolute limits are fixed. Absolute limits control the
            total number of specific objects that the user can possess
            simultaneously. For more information, see <xref
              linkend="Absolute_Limits-d1e942"/>.</para>
        </listitem>
      </itemizedlist>
      <note>
        <para>If the default limits are too low for your particular
          application, please contact Rackspace Cloud support to
          request an increase. All requests require reasonable
          justification.</para>
      </note>
      <section xml:id="Rate_Limits-d1e942">
        <title>Rate Limits</title>
        <remark>REVIEWER: Does Cloud Files have any rate limits to
          list here? Instead of rate limits, are most limits set by
          setting metadata?</remark>
        <para>Rate limits are reset after a certain amount of time
          passes. Rate limits control the frequency at which the user
          can issue specific API requests. </para>
        <para>Rate limits are specified in terms of both a
          human-readable wildcard URI and a machine-processable
          regular expression. The human-readable limit is intended for
          displaying in graphical user interfaces. The
          machine-processable form is intended to be used directly by
          client applications.</para>
        <para>The regular expression boundary matcher  ^  for the rate
          limit takes effect after the root URI path. For example, the
          regular expression <literal>^/container</literal> would
          match the bolded portion of the following URI: . </para>
        <programlisting>https://snet-storage101.dfw1.clouddrive.com/v1<emphasis role="bold">/container</emphasis></programlisting>
        <para>The following table specifies the default rate limits
          for different Cloud Files API operations.</para>
        <table rules="all">
          <caption>Default Rate Limits</caption>
          <col width="33%"/>
          <col width="33%"/>
          <col width="33%"/>
          <thead>
            <tr>
              <th>Verb</th>
              <th>URI</th>
              <th>Limits</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td/>
              <td/>
              <td/>
            </tr>
          </tbody>
        </table>
      </section>
      <section xml:id="Absolute_Limits-d1e942">
        <title>Absolute Limits</title>
        <para>Absolute limits are fixed. Absolute limits control the
          total number of specific objects that the user can have or
          process in Cloud Files. </para>
        <para>Refer to the following table for the absolute limits
          that are set.</para>
        <table rules="all">
          <caption>Absolute Limits</caption>
          <col width="30%"/>
          <col width="45%"/>
          <col width="25%"/>
          <thead>
            <tr>
              <th>Name</th>
              <th>Description</th>
              <th>Limit</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Containers per account</td>
              <td>Maximum number of containers per account</td>
              <td>500,000</td>
            </tr>
            <tr>
              <td>Container listing</td>
              <td>Maximum number of containers that can be listed at
                one time</td>
              <td>10,000 containers</td>
            </tr>
            <tr>
              <td>Pseudo hierarchical folders and directories</td>
              <td>Simulated hierarchical structure within a single
                container by adding forward slash characters
                  (<code>/</code>) in the object name</td>
              <td>No limit</td>
            </tr>
            <tr>
              <td>Container and object metadata limits </td>
              <td>Maximum metadata limits</td>
              <td>4096 bytes maximum overall metadata, with 90
                distinct metadata items at the most. Each may have a
                128 character name length with a 256 max value length
                each.</td>
            </tr>
            <tr>
              <td>Number of object segments per SLO</td>
              <td>Maximum number of object segments per SLO</td>
              <td>1,000</td>
            </tr>
            <tr>
              <td>TTL for a CDN-enabled container</td>
              <td>Maximum TTL for a CDN-enabled container</td>
              <td>1 year -31536000 seconds</td>
            </tr>
            <tr>
              <td>Container name length</td>
              <td>Maximum length of container name</td>
              <td>256 bytes</td>
            </tr>
            <tr>
              <td>Object name length</td>
              <td>Maximum length of object name</td>
              <td>1024 bytes</td>
            </tr>
            <tr>
              <td>File size for upload</td>
              <td>Maximum size for upload</td>
              <td>5 GB (Segment files > 5 GB into smaller files)</td>
            </tr>
            <tr>
              <td>CDN file size limit</td>
              <td>Maximum size of file that can be served from
                CDN</td>
              <td>10 GB</td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
 -->
    

    

 <!-- 
   <remark>CYR started as a beginning table of operations in prep for creating a WADL</remark>
    <section xml:id="synopsisOfOperations">
      <title>Cloud Files API Operations Synopsis</title>
      <para>The following table summarizes all of the operations that
        are available in the Cloud Files API:</para>
      <table rules="all">
        <caption>Synopsis of Cloud Files API Operations</caption>
        <col width="20%"/>
        <col width="10%"/>
        <col width="50%"/>
        <col width="20%"/>
        <thead>
          <tr>
            <th>Name</th>
            <th>Verb</th>
            <th>URI</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="4"><emphasis role="bold">Storage Account
                Services</emphasis></td>
          </tr>
          <tr>
            <td>View Account Details</td>
            <td><command>HEAD</command></td>
            <td><code>{api version}/{storage account
                  URL}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker<?sbr?>=<parameter>string</parameter>&amp;format=<parameter>json
                  or xml</parameter></code></td>
            <td>Views metadata on an account.</td>
          </tr>
          <tr>
            <td>List Containers</td>
            <td><command>GET</command></td>
            <td><literal>{api version}/{storage account
              URL}?limit=integer&amp;marker=string&amp;end_marker<?sbr?>=string&amp;format=json
                or xml</literal></td>
            <td>Views a list of containers in an account.</td>
          </tr>
          <tr>
            <td colspan="4"/>
          </tr>
          <tr>
            <td colspan="4"><emphasis role="bold">Storage Container
                Services</emphasis></td>
          </tr>
          <tr>
            <td>View Container Details (Objects and Metadata)</td>
            <td><command>HEAD</command></td>
            <td><code>{api version}/{storage account
                  URL}/{container}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker=<parameter>string</parameter>&amp;format=<parameter>json
                  or xml</parameter></code></td>
            <td>Views objects and metadata in a container. </td>
          </tr>
          <tr>
            <td>Create Container</td>
            <td><command>PUT</command></td>
            <td><code>{api version}/{storage account
                  URL}/{container}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker=<parameter>string</parameter>&amp;prefix=<parameter>string</parameter>&amp;format=<parameter>json
                  or
                  xml</parameter>&amp;delimiter=<parameter>char</parameter></code></td>
            <td>Creates containers, or storage compartments, for your
              data.</td>
          </tr>
          <tr>
            <td>Delete Container</td>
            <td><command>DELETE</command></td>
            <td><code>{api version}/{storage account
                  URL}/{container}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker=<parameter>string</parameter>&amp;prefix=<parameter>string</parameter>&amp;format=<parameter>json
                  or
                  xml</parameter>&amp;delimiter=<parameter>char</parameter></code></td>
            <td>Permanently removes a container. (The container must
              be empty before it can be removed.)</td>
          </tr>
          <tr>
            <td>Edit or Set Container Metadata</td>
            <td><command>POST</command></td>
            <td><code>{api version}/{storage account
                  URL}/{container}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker=<parameter>string</parameter>&amp;prefix=<parameter>string</parameter>&amp;format=<parameter>json
                  or
                  xml</parameter>&amp;delimiter=<parameter>char</parameter></code></td>
            <td>Writes metadata on a container.</td>
          </tr>
          <tr>
            <td>List Objects in a Container</td>
            <td><command>GET</command></td>
            <td><code>{api version}/{storage account
                  URL}/{container}?limit=<parameter>integer</parameter>&amp;marker=<parameter>string</parameter>&amp;end_marker=<parameter>string</parameter>&amp;prefix=<parameter>string</parameter>&amp;format=<parameter>json
                  or
                  xml</parameter>&amp;delimiter=<parameter>char</parameter></code></td>
            <td>Views the names and details of objects within a
              container.</td>
          </tr>
          <tr>
            <td colspan="4"/>
          </tr>
          <tr>
            <td colspan="4"><emphasis role="bold">Storage Object
                Services</emphasis></td>
          </tr>
          <tr>
            <td>Retrieve Object</td>
            <td><command>GET</command></td>
            <td><code>{api version}/{storage account
                URL}/{container}/{object}</code></td>
            <td>Retrieve the object's data.</td>
          </tr>
          <tr>
            <td>Create/Update Object</td>
            <td><command>PUT</command></td>
            <td><code>{api version}/{storage account
                URL}/{container}/{object}</code></td>
            <td>Write or overwrite an object's content and
              metadata.</td>
          </tr>
          <tr>
            <td>Copy Object</td>
            <td><command>PUT</command></td>
            <td>{api version}/{account}/container/destobject</td>
            <td>Copy an existing object to another object in Cloud
              Files. (The destination container must exist before
              attempting the copy.)</td>
          </tr>
          <tr>
            <td>Delete Object</td>
            <td><command>DELETE</command></td>
            <td>{api version}/{account}/container/object</td>
            <td>Permanently remove an object from the storage system
              (data and metadata).</td>
          </tr>
          <tr>
            <td>Retrieve Object Metadata</td>
            <td><command>HEAD</command></td>
            <td>{api version}/{account}/container/object</td>
            <td>Retrieve object metadata and other standard HTTP
              headers.</td>
          </tr>
          <tr>
            <td>Update Object Metadata</td>
            <td><command>POST</command></td>
            <td>{api version}/{account}/container/object</td>
            <td>Set your own object metadata.</td>
          </tr>
        </tbody>
      </table>
    </section> -->
  </chapter>
 
    <chapter xml:id="Overview_of_API_Operations-d1e823">
      <title>Overview of API Operations</title>
      <para>The Cloud Files API is implemented as a set of RESTful web
        services. All authentication and container/object operations
        can be performed with standard HTTP calls. See the <link
          xlink:href="http://en.wikipedia.org/wiki/Representational_State_Transfer"
          >Wikipedia article</link> on REST for more
        information.</para>
      <para>The following constraints apply to the REST API's HTTP
        requests:</para>
      <itemizedlist>
        <listitem>
          <para>Maximum number of HTTP headers per request: 90</para>
        </listitem>
        <listitem>
          <para>Maximum length of all HTTP headers: 4096 bytes</para>
        </listitem>
        <listitem>
          <para>Maximum length per HTTP request line: 8192 bytes</para>
        </listitem>
        <listitem>
          <para>Maximum length of HTTP request: 5 gigabytes</para>
        </listitem>
        <listitem>
          <para>Maximum length of container name: 256 bytes</para>
        </listitem>
        <listitem>
          <para>Maximum length of object name: 1024 bytes</para>
        </listitem>
      </itemizedlist>
      <para>Container and object names should be properly URL-encoded
      prior to interacting with the REST interface and the container
      and object names must be UTF-8 encoded. The length restrictions
      should be checked against the URL-encoded string.</para>
    <note>
      <para>The language-specific APIs handle URL encoding and
        decoding.</para>
    </note>
      <para>Each REST request against Cloud Files requires the
      inclusion of an authorization token in the HTTP header
        <code>X-Auth-Token</code>. Clients obtain this token, along
      with the Cloud Files URLs, by first using the Authentication
      service and supplying a valid user name and API access key. For
      more information, see <xref linkend="Authentication-d1e639"
      />.</para>
      <para>There are actually two different sets of REST services
      that make up the full Cloud Files product. The first REST
      service identified with <code>cloudFiles</code> in the service
      catalog (see <xref linkend="Service-Catalog-Endpoints-d1e001"/>)
      is used for managing the data stored in the system. Example
      operations are creating containers and uploading objects. The
      second REST service is for managing the CDN feature of Cloud
      Files and is identified by <code>cloudFilesCDN</code> in the
      service catalog.</para>
      <para>In the following sections, the purpose of each HTTP method
      depends upon which service the call is made against. For
      example, a &PUT; request against one of the
        <code>cloudFiles</code> endpoints can be used to create a
      container or upload an object, while a &PUT; request against the
      one of the <code>cloufFilesCDN</code> endpoints is used to
      CDN-enable a container.</para>
      <para>The language-specific APIs mask this system separation
      from the programmer. They simply create a container and mark it
        <emphasis>public</emphasis>, calling the appropriate back-end
      services by using the appropriate REST APIs.</para>
      <note>
        <para>All requests to authenticate and operate against Cloud Files are performed using SSL
          over HTTP (HTTPS) on TCP port 443.</para>
      </note>
      <para>The following diagram illustrates the various system interfaces and the ease with which
        content can be distributed over the CDN. The process is simple: authenticate, create a
        container, upload objects, mark the container as public, and begin serving that content from a
        powerful CDN.</para>
    <note>
      <para>Marking the container as public simply means enabling the
        container to be distributed over the CDN. A CDN-enabled
        container is publicly accessible. </para>
    </note>  
      <figure xml:id="CFinterfaces">
        <title>Cloud Files System Interfaces</title>
        <mediaobject>
          <imageobject>
            <imagedata scale="60" fileref="figures/CFinterfaces_New.svg"/>
          </imageobject>
        </mediaobject>
      </figure>
    </chapter>
 
    <chapter xml:id="API_Operations_for_Storage_Services-d1e942">
      <title>API Operations for Storage Services</title>
      <info>
        <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
          <raxm:type>apiref</raxm:type>
          <raxm:product version="v1">files</raxm:product> 
          <raxm:priority>1</raxm:priority>
        </raxm:metadata> 
      </info>
      <para>The following section describes the REST API for
      interacting with the Cloud Files storage component. All requests
      will be directed to the host and endpoints described in the
        <code>cloudFiles</code> obtained during successful
      authentication.</para>
      <para>The following are some requirements for the storage
      services:</para>
      <itemizedlist>
      <listitem>
        <para>Object and container names must be URL-encoded and UTF-8
          encoded.</para>
      </listitem>
        <listitem>
          <para>Container names may not exceed 256 bytes and cannot
          contain a '/' character.</para>
        </listitem>
        <listitem>
          <para>Object names may not exceed 1024 bytes, but they have
          no character restrictions.</para>
        </listitem>
      </itemizedlist>
      <para>The sections that follow describe the actions that may be
      performed within the storage system. </para>
    <itemizedlist>
      <listitem>
        <para>The first section addresses actions that can be taken on
          the account level of the storage system.</para>
      </listitem>
      <listitem>
        <para>The second section addresses actions that may be
          performed on containers.</para>
      </listitem>
      <listitem>
        <para>The third section addresses actions that may be
          performed on objects.</para>
      </listitem>
    </itemizedlist>
      <section xml:id="Storage_Account_Services-d1e1555">
      <title>Storage Account Services</title>
      <para>You perform the following operations at the account level.
        The example shows the general structure for the requests,
        ending with the Cloud Files account string.</para>
      <example>
        <title>Storage Account HTTP Request: General Structure</title>
        <programlisting>
  <replaceable>HTTP_METHOD_NAME</replaceable> /v1/&lt;<replaceable>account</replaceable>&gt; HTTP/1.1
</programlisting>
      </example>
      <para> This section shows how to view and control the display of
        your Cloud Files account details. You can use the optional
        parameters described below to help control the amount of
        information displayed. </para>
      <variablelist>
        <title>Query Parameters</title>
        <varlistentry>
          <term><code>limit</code></term>
          <listitem>
            <para>For an integer <inlineequation>
                <mathphrase><emphasis>n</emphasis></mathphrase>
              </inlineequation>, limits the number of results to <inlineequation>
                <mathphrase><emphasis>n</emphasis></mathphrase>
              </inlineequation> values.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>marker</code></term>
          <listitem>
            <para>Given a string<inlineequation>
                <mathphrase><emphasis>x</emphasis></mathphrase>
              </inlineequation>, returns container names greater than
              the specified marker. Only strings using UTF-8 encoding
              are valid.   </para>
          </listitem>
        </varlistentry>
<!--02-03-12 dsh: Note re: UTF / 8 for transparency JIRA DOC-98
-->          
        <varlistentry>
          <term><code>end_marker</code></term>
          <listitem>
            <para>Given a string<inlineequation>
                <mathphrase><emphasis>x</emphasis></mathphrase>
              </inlineequation>, returns container names less than the
              specified end marker. Only strings using UTF-8 encoding
              are valid. </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><code>format</code></term>
          <listitem>
            <para>Specify either <code>json</code> or <code>xml</code>
              for the serialized response.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>At this time, a <code>prefix</code> query parameter is not
        supported at the account level.</para>
        <section xml:id="View_Account_Details-d1e108">
        <title>View Account Details</title>
        <para> To see how many containers you have in your account
            (<code>X-Account-Container-Count</code>), how many objects
          are in your account (<code>X-Account-Object-Count</code>),
          and how many total bytes your account uses
            (<code>X-Account-Bytes-Used</code>), perform a &HEAD;
          request on your storage account URL. This displays your
          Account Information. A 204 (No Content) code returns and
          there is no information in the response body. </para>
        <para> The examples in this section use a sample auth account,
          listed in <code>X-Auth-Token</code>. When you do your own
          requests, you must use your own auth token. You can check
          how to generate this token in <xref
            linkend="Authentication-d1e639"
            xrefstyle="select:label quotedtitle nopage"/>. </para>
        <example>
          <title>View Account Information Request</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
             </programlisting>
        </example>
        <example>
          <title>View Account Information Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  Content-Type: text/html; charset=UTF-8
  X-Account-Object-Count: 12
  X-Trans-Id: txc44b00fccb6a49318626d3cac1d2cdb6
  Date: Tue, 06 Nov 2012 19:50:04 GMT
  X-Account-Bytes-Used: 10373619
  Content-Length: 0
  X-Account-Container-Count: 5            
           </programlisting>
        </example>
      </section>
        <section xml:id="List_containers-d1e121">
        <title>List Containers</title>
        <para> The container is the basic storage unit in Cloud Files.
          To view a list of the containers in your account, perform a
            <code>GET</code> request against your storage account URL.
          The list is limited to 10,000 containers at a time. See the
          below section, <xref
            linkend="Controlling_a_Large_List_of_Containers-d1e107"
            xrefstyle="select:label quotedtitle nopage"/>, for
          information on limiting and navigating the list. A 200 (OK)
          code returns if there are containers and a 204 (No Content)
          code returns if there are no containers. </para>
        <para> Container names are sorted based on a <link
            xlink:href="http://www.sqlite.org/datatype3.html#collation"
            >binary comparison</link>, a built-in collating function
          that compares string data using SQLite's memcmp() function,
          regardless of text encoding. </para>
        <example>
          <title>View Containers List Request</title>
          <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
              </programlisting>
        </example>
        <example>
          <title>View Containers List Response</title>
          <programlisting>
  HTTP/1.1 200 OK
  Date: Thu, 07 Jun 2007 18:57:07 GMT
  Content-Type: text/plain; charset=UTF-8
  Content-Length: 32
  
  images
  movies
  documents
  backups
                            </programlisting>
        </example>
          <section xml:id="Format_Container_List-d1e124">
          <title>Format Container List</title>
          <para>If you append <code>?format=xml</code> or
              <code>?format=json</code> query parameter to the storage
            account URL, the service returns container information
            serialized in the specified format. To format your
            results, you must place this query parameter before any
            other parameters. The sample responses below are formatted
            for readability.</para>
          <example>
            <title>Container Details Request: JSON</title>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?format=json HTTP/1.1
  Host: storage.clouddrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
</programlisting>
          </example>
          <example>
            <title>Container Details Response: JSON</title>
            <programlisting language="json">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:39:13 GMT
  Content-Type: application/json; charset=utf-8

  [
    {"name":"test_container_1", "count":2, "bytes":78},
    {"name":"test_container_2", "count":1, "bytes":17}
  ] 
                      </programlisting>
          </example>
          <example>
            <title>Container Details Request: XML</title>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?format=xml HTTP/1.1
  Host: storage.clouddrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
</programlisting>
          </example>
          <example>
            <title>Container Details Response: XML</title>
            <programlisting language="xml">
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:42:35 GMT
  Content-Type: application/xml; charset=utf-8

  &lt;?xml version="1.0" encoding="UTF-8"?&gt;

  &lt;account name="MichaelBarton"&gt;
    &lt;container&gt;
      &lt;name&gt;test_container_1&lt;/name&gt;
      &lt;count&gt;2&lt;/count&gt;
      &lt;bytes&gt;78&lt;/bytes&gt;
    &lt;/container&gt;
    &lt;container&gt;
      &lt;name&gt;test_container_2&lt;/name&gt;
      &lt;count&gt;1&lt;/count&gt;
      &lt;bytes&gt;17&lt;/bytes&gt;
    &lt;/container&gt;
  &lt;/account&gt;
                      </programlisting>
          </example>
        </section>
        <section xml:id="Controlling_a_Large_List_of_Containers-d1e107">
          <title>Controlling a Large List of Containers</title>
          <para> A <code>GET</code> request to the storage account URL
            returns a list of up to 10,000 container names. You can
            control and limit this list of results by using the
              <code>marker</code>, <code>end_marker</code>, and
              <code>limit</code> parameters. These parameters provide
            a mechanism to iterate through the entire list of
            containers. Keep in mind that the value for marker needs
            to be URL encoded before issuing the request.</para>
          <para>
            <code>Marker</code> tells Cloud Files where to begin your
            list of containers and <code>end_marker</code> specifies
            where to end the list. You can use them independently or
            together, separated by an &amp;. If you do not specify
            them, your list displays up to 10,000 containers. Note
            that the <code>marker</code> and <code>end_marker</code>
            values should be URL-encoded prior to sending the HTTP
            request.</para>
          <para>You can use the <code>limit</code> parameter to reduce
            the number of returned objects. </para>
          <para>If the number of returned items equals the limit used
            (or 10,000 if no limit was specified), you can assume
            there are more object names.</para>
          <example>
            <title>List Large Number of Containers</title>
            <para>For example, use a listing of five container
              names:</para>
            <programlisting>
  apples
  bananas
  kiwis
  oranges
  pears
                    </programlisting>
            <para>Use a limit of two to show how things work:</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?limit=2
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb

  apples
  bananas
                 
</programlisting>
            <para>Since the operation returned two items, assume there
              are more container names to list and make another
              request with a marker of the last item returned:</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?limit=2&amp;marker=bananas
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  
  kiwis
  oranges 
              </programlisting>
            <para>Again, two items are returned. There may be
              more.</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?limit=2&amp;marker=oranges
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    
  pears
</programlisting>
            <para>This one-item response shows less than the
                <code>limit</code> number of container names, and
              indicates that this is the end of the list.</para>
          </example>
        </section>
      </section>
    </section>
      
      
      <section xml:id="Container_Quotas-d1e1444">
        <title>Storage Container Services</title>
        <para>This following operations can be performed on
        containers. The example shows the general structure for the
        requests, which includes the Cloud Files account and the
        container name.</para>
        <example><?dbfo keep-together="always"?>
          <title>Storage Container HTTP Request: General Structure</title>
        <programlisting>
<replaceable> HTTP_METHOD_NAME</replaceable> /v1/&lt;<replaceable>account</replaceable>&gt;/&lt;container&gt; HTTP/1.1
</programlisting>
        </example>
        

          <para> This section shows how to view and control
        information for containers in your Cloud Files account. You
        can use the below optional parameters to help control the
        amount of information displayed. </para>
          <variablelist>
            <title>Query Parameters</title>
        <para>All query parameters must be send using UTF-8
          encoding.</para>
            <varlistentry>
              <term><code>limit</code></term>
              <listitem>
                <para>For an integer <inlineequation>
                <mathphrase><emphasis>n</emphasis></mathphrase>
              </inlineequation>, limits the number of results to <inlineequation>
                <mathphrase><emphasis>n</emphasis></mathphrase>
              </inlineequation> values.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>marker</code></term>
              <listitem>
                <para>Given a string <inlineequation>
                <mathphrase><emphasis>x</emphasis></mathphrase>
              </inlineequation>, returns object names greater than the
              specified marker.  </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>end_marker</code></term>
              <listitem>
                <para>Given a string <inlineequation>
                <mathphrase><emphasis>x</emphasis></mathphrase>
              </inlineequation>, returns object names less than the
              specified end marker.  </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>prefix</code></term>
              <listitem>
                <para>For a string value <inlineequation>
                  <mathphrase><emphasis>x</emphasis></mathphrase>
                </inlineequation>, causes the results to be limited to object names beginning with
                  the substring <inlineequation>
                    <mathphrase><emphasis>x</emphasis></mathphrase>
                  </inlineequation>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>format</code></term>
              <listitem>
                <para>Specify either <code>json</code> or
                <code>xml</code> for the serialized response.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><code>delimiter</code></term>
              <listitem>
                <para>For a character <inlineequation>
                <mathphrase><emphasis>c</emphasis></mathphrase>
              </inlineequation>, returns the pseudo directory
              structure, using c as the nesting character (by
              convention, most use “/” to indicate a pseudo
              directory). For more information on pseudo directories,
              view <xref
                linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"
              />. </para>
              </listitem>
            </varlistentry>
          </variablelist>

        
        <section xml:id="View-Container_Info-d1e1285">
          <title>View Container Details</title>
        <para>To see how many objects are in a container
            (<code>X-Container-Object-Count</code>) and the custom
          metadata you have set on the container
            (<code>X-Container-Meta-</code> prefix), perform a &HEAD;
          request against the container's URL. To set and edit your
          custom metadata, see <xref
            linkend="Update_Container_Metadata-d1e1900"
            xrefstyle="select:label quotedtitle nopage"/>. </para>
        <para>A 204 (No Content) code returns and there is no
          information in the response body. </para>
          <example>
            <title>View Container Details Request</title>
          <programlisting>
  HEAD /v1/MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c/MobyDick?format=json
  Accept-Encoding: gzip
  X-Auth-Token: be221903-f12a-469f-b16c-48106ff22ebe
</programlisting>
          </example>
          <example>
            <title>View Container Details Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  Connection: keep-alive
  Content-Type: text/html; charset=UTF-8
  X-Container-Object-Count: 5
  X-Trans-Id: tx30e27bcc8bf34c0ebfdf078337895478
  X-Timestamp: 1331584412.96818
  X-Container-Meta-Book: MobyDick
  Accept-Ranges: bytes
  Date: Thu, 08 Nov 2012 19:08:25 GMT
  X-Container-Meta-Subject: Whaling
  Content-Length: 0
  X-Container-Bytes-Used: 3846773
</programlisting>
          </example>
        </section>
        
        <!-- ************** -->
        <section xml:id="Create_Container-d1e1694">
          <title>Create Container</title>
          <para>&PUT; operations against a storage container are used
          to create that container. You can create up to 500,000
          containers in your Cloud Files account.</para>
          <para>Containers are storage compartments for your data. The
          URL-encoded name must be less than 256 bytes and cannot
          contain a forward slash '/' character.</para>
          <para>Containers can be assigned custom metadata by
          including additional HTTP headers on the &PUT; request. The
          custom metadata is assigned to a container through HTTP
          headers identified with the <code>X-Container-Meta-</code>
          prefix. See <xref
            linkend="Update_CDN-Enabled_Container_Metadata-d1e2787"
            xrefstyle="select:label quotedtitle nopage"/> for details
          on setting custom metadata. </para>
          <example>
            <title>Container Create Request </title>
          <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
          </example>
          <para>No content is returned. A status code of 201 (Created) indicates that the container
            was created as requested. Container &PUT; requests are idempotent and a code of 202
            (Accepted) is returned when the container already existed. If you request a &PUT; to a
            container with an <code>X-Container-Meta-</code> prefix in the header, your &GET;/&HEAD;
            request responses carry the metadata prefix from the container in subsequent
            requests.</para>
          <example>
            <title>Container Create Response</title>
          <programlisting>
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2007 18:50:19 GMT
  Content-Type: text/plain; charset=UTF-8
</programlisting>
          </example>
          <para>Using custom container metadata, you can create
          information in the header to effectively "tag" a container
          with metadata. The container metadata restrictions are the
          same as object metadata. You can have 4096 bytes maximum
          overall metadata, with 90 distinct metadata items at the
          most. Each may have a 128 character name length with a 256
          max value length each. Any valid UTF-8 http header value is
          allowed for metadata. However, Rackspace recommends that you
          URL-encode any non-ASCII values using a "%" symbol, followed
          by the two-digit hexadecimal ISO-Latin code for the
          character.</para>
          <example>
            <title>Container Create Request with Metadata </title>
          <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Container-Meta-InspectedBy: JackWolf
</programlisting>
          </example>
          <para>No content is returned. A status code of 201 (Created) indicates that the container
            was created as requested. Container &PUT; requests are idempotent and a code of 202
            (Accepted) is returned if the container existed prior to the request. If you request a &PUT; to a
            container with an <code>X-Container-Meta-</code> prefix in the header, your &GET;/&HEAD;
            request responses carry the metadata prefix from the container in subsequent
            requests.</para>
          <example>
            <title>Container Create Response</title>
          <programlisting>
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2010 18:50:19 GMT
  Content-Type: text/plain; charset=UTF-8
</programlisting>
          </example>
          <section xml:id="Multi_region-dl2200">
            <title>Multi-region Support</title>
            <para>You can create your Cloud Files containers in any
            Rackspace data center. When you connect to Cloud Files,
            you get the endpoints shown in <xref
              linkend="Service-Catalog-Endpoints-d1e001"/>. You use
            the <code>publicURL</code> for your Cloud Files
            operations. For more information about the service access
            endpoints, see <xref
              linkend="Service-Access-Endpoints-d1e003"/>.</para>
          <note>
            <para>In order to avoid external bandwidth charges, your
              containers and servers must be in the same data center.
            </para>
          </note>
            <para> You might find it useful to locate your objects in
            more than one data center to keep track of your data and
            backups. Specifically, if you serve an audience in a
            particular region, you might find it helpful to locate
            your Cloud Files objects as close to that region as
            possible. </para>
          <note>
            <para>If your audience is world wide, you might consider
              using the Akamai Content Delivery Network (CDN). The CDN
              speeds your content delivery because it is cached at
              edge locations around the globe, rather than being
              served from a single origin server. You can learn more
              about CDN-enabling your containers in <xref
                linkend="CDN-Enable_a_Container-d1e2665"
                xrefstyle="select:label quotedtitle nopage"/>. </para>
          </note>
            <example xml:id="Service-Catalog-Endpoints-d1e001">
              <title>Multi-region Data Center Endpoints from the
              Service Catalog</title>
            <programlisting>
{"name":"cloudFilesCDN",
"endpoints":[
   {
     "region":"DFW",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://cdn1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"SYD",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://cdn4.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
      "region":"ORD",
      "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
      "publicURL":"https://cdn2.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"IAD",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://cdn5.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"HKG",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://cdn6.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   }
],
"type":"rax:object-cdn"},
{"name":"cloudFiles",
"endpoints":[
   {
     "region":"DFW",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "internalURL":"https://snet-storage101.dfw1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"ORD",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://storage101.ord1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "internalURL":"https://snet-storage101.ord1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"SYD",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://storage101.syd2.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "internalURL":"https://snet-storage101.syd2.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"IAD",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://storage101.iad3.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "internalURL":"https://snet-storage101.iad3.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   },
   {
     "region":"HKG",
     "tenantId":"MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "publicURL":"https://storage101.hkg1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321",
     "internalURL":"https://snet-storage101.hkg1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
   }
],
"type":"object-store"}
</programlisting>
            </example>
          </section>
          <section
          xml:id="Pseudo-Hierarchical_Folders_Directories-d1e1580">
          <title>Pseudo Hierarchical Folders and Directories</title>
          <remark>02-16-12 dsh   reworked this section / as path and
            its elements / are not supported</remark>
          <para>Although you cannot nest directories in Cloud Files,
            you can simulate a hierarchical structure within a single
            container by adding forward slash characters
              (<code>/</code>) in the object name. To navigate the
            pseudo directory structure, you can use the
              <code>delimiter</code> query parameter. See the below
            examples for an illustration.</para>
          <note>
            <para>In the example below, the objects reside in a
              container called <code>backups</code>. Within that
              container, the objects are organized in a pseudo
              directory called <code>photos</code>. Keep in mind that
              the container name is not displayed in the example, but
              that it is a part of the object URLs. For instance, the
              URL of the picture <code>me.jpg</code> is
                <uri>https://storage.clouddrive.com/v1/CF_xer7_343/backups/photos/me.jpg</uri>. </para>
          </note>
          <example>
            <title>Pseudo Hierarchical Folders and Directories</title>
            <para> To display a list of all the objects in the storage
              container, use &GET; without a <code>delimiter</code> or
                <code>prefix</code>. </para>
            <programlisting>
  GET /v1/AccountString/backups
</programlisting>
            <para> The system returns status code 200 OK and the
              requested list of the objects. </para>
            <programlisting>
  photos/animals/cats/persian.jpg
  photos/animals/cats/siamese.jpg
  photos/animals/dogs/corgi.jpg
  photos/animals/dogs/poodle.jpg
  photos/animals/dogs/terrier.jpg
  photos/me.jpg
  photos/plants/fern.jpg
  photos/plants/rose.jpg
</programlisting>
            <para>
              <!--02-03-12 dsh  The JIRA ticket / doc-97 subsumed / to this location-->Use
              the delimiter parameter to limit the displayed results.
              Any character may be used as a delimiter. However, to
              use <code>delimiter</code> with pseudo directories, use
              the parameter slash (<code>/</code>). </para>
            <programlisting>
  GET /v1/AccountString/backups?delimiter=/
</programlisting>
            <para> The system returns status code 200 (OK) and the
              requested matching objects. Because the request used the
              slash, only the pseudo directory <code>photos/</code>
              displays. Keep in mind that the returned values from a
              slash <code>delimiter</code> query are not real objects.
              They have a content-type of application/directory and
              are in a subdir section of JSON and XML results. </para>
          </example>
          <programlisting>
  photos/
</programlisting>
          <para> Use the <code>prefix</code> parameter with the
              <code>delimiter</code> parameter to view the objects
            inside a pseudo directory, including further nested pseudo
            directories. </para>
          <programlisting>
  GET /v1/AccountString/backups?prefix=photos/&#38;delimiter=/
</programlisting>
          <para> The system returns status code 200 (OK) and the
            objects and pseudo directories within the top level pseudo
            directory. </para>
          <programlisting>
  photos/animals/
  photos/me.jpg
  photos/plants/
</programlisting>
          <para> There is no limit to the amount of nested pseudo
            directories you can create. In order to navigate through
            them, use a longer <code>prefix</code> parameter coupled
            with the <code>delimiter</code> parameter. In the sample
            output below, there is a pseudo directory called
              <code>dogs</code> within the pseudo directory
              <code>animals</code>. In order to navigate directly to
            the files contained within <code>dogs</code>, enter the
            below command. </para>
          <programlisting>
  GET /v1/AccountString/backups?prefix=photos/animals/dogs/&#38;delimiter=/
</programlisting>
          <para> The system returns status code 200 (OK) and the
            objects and pseudo directories within the nested pseudo
            directory. </para>
          <programlisting>
  photos/animals/dogs/corgi.jpg
  photos/animals/dogs/poodle.jpg
  photos/animals/dogs/terrier.jpg
</programlisting>
        </section>          
          
        </section>
        
        
        
        
        
        <section xml:id="Delete_Container-d1e1765">
          <title>Delete Container</title>
          <remark security="writeronly">2012-03-09 dsh: Edited first
          two paragraphs for clarity </remark>
          <para>&DELETE; operations against a storage container permanently
            remove it. The container must be empty before it can be deleted.</para>
        <remark security="writeronly">2013-09-09 cyr: Changed HEAD to
          GET here based on Disqus comment and confirmation by Rick
          Hawkins</remark>
          <para>A &GET; request against the container will list any
          objects it contains.</para>
          <example>
            <title>Container Delete Request</title>
          <programlisting>
  DELETE /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
          </example>
          <para>No content is returned. A status code of 204 (No
          Content) indicates success. A status code of  404 (Not
          Found) is returned if the requested container was not found.
          A status code of 409 (Conflict) is returned if the container
          is not empty. No response body is generated.</para>
          <example><?dbfo keep-together="always"?>
            <title>Container Delete Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  Date: Thu, 07 Jun 2007 18:57:07 GMT
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
</programlisting>
          </example>
        <para/>
        </section>
        
        <section xml:id="Update_Container_Metadata-d1e1900">
          <title>Set or Edit Container Metadata</title>
          <para> You can set custom metadata headers for a container.
          They must, however, take the format
            <code>X-Container-Meta-XXXX</code>, where
            <code>XXXX</code> is the name of your custom metadata. </para>
          <para> To set or edit container metadata, perform  a &POST;
          request to the container URL. Subsequent &POST;s to the
          header using the same metadata name overwrite the previous
          value. </para>
          <para> To view your metadata changes, perform a &HEAD;
          request on the container URL. Do not try to send the
          metadata in your &HEAD; request. </para>
          <para> To remove previously-set container metadata, perform
          a &POST; request to the container with
            <code>X-Remove-Container-Meta-XXXX: foo</code>, where
            <code>XXXX</code> is the name of your custom header.
            <code>Foo</code> can be any term, and it will not be used.
          However, you must send a value with the request, or
          otherwise, it will be ignored. </para>
          <example>
            <title>Update Container Metadata Request</title>
          <programlisting>
  POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Container-Meta-Book: MobyDick
  X-Container-Meta-Subject: Whaling
</programlisting>
          </example>
          <para>No response body is returned. A status code of 204 (No
          Content) indicates success. Status code 404 (Not Found) is
          returned when the requested container does not exist. </para>
          <example>
            <title>Update Container Metadata Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  Date: Thu, 07 Mar 2012 20:42:51 GMT
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
</programlisting>
          </example>
 
          <example>
            <title>View Container Metadata Request</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
          </example>
          <example>
            <title>View Container Metadata Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Container-Object-Count: 0
  X-Trans-Id: tx028b40d228534c759f4d5fa69f8cf7fd
  X-Container-Meta-Book: MobyDick
  X-Container-Meta-Subject: Whaling
  Accept-Ranges: bytes
  Date: Mon, 12 Mar 2012 16:40:20 GMT
  Content-Length: 0
  X-Container-Bytes-Used: 0
</programlisting>
          </example>          
        </section>
        
        
 <section xml:id="List_Objects-d1e1284">
          <title>List Objects in a Container</title>
   <para>To view the names and details of objects within a container,
          perform a &GET; request against the container URL. The
          information returned is size (in bytes), hash, object name,
          date and time modified (in GMT), and content type. The list
          is limited to 10,000 objects at a time. For information on
          limiting and controlling the list, see <xref
            linkend="List_Large_Number_of_Objects-d1e1521"
            xrefstyle="select:label quotedtitle nopage"/>. A 200 (OK)
          code returns if there are objects and a 204 (No Content)
          code returns if there are no objects. If the container does
          not exist, or an incorrect account is given, a 404 (Not
          Found) code returns. </para>
        <para>The query parameters that you can use where
            [<code>?parm=value]</code> is shown in the example below
          are:</para>
        <table rules="all">
          <caption>List Objects Query Parameters</caption>
          <col width="30%"/>
          <col width="70%"/>
          <thead>
            <tr>
              <th>Parameter</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><code>limit</code></td>
              <td>For an integer <replaceable>n</replaceable>, limits
                the number of results to at most
                  <replaceable>n</replaceable> values.</td>
            </tr>
            <tr>
              <td><code>marker</code></td>
              <td>Given a string <replaceable>x</replaceable>, returns
                object names greater than the specified marker.</td>
            </tr>
            <tr>
              <td><code>end_marker</code></td>
              <td>Given a string <replaceable>x</replaceable>, returns
                object names less than the specified marker.</td>
            </tr>
            <tr>
              <td><code>prefix</code></td>
              <td>For a string <replaceable>x</replaceable>, causes
                the results to be limited to object names beginning
                with the substring <replaceable>x</replaceable> .</td>
            </tr>
            <tr>
              <td><code>format</code></td>
              <td>Specify either <code>json</code> or <code>xml</code>
                to return the respective serialized response.</td>
            </tr>
            <tr>
              <td><code>delimiter</code></td>
              <td>For a character <replaceable>c</replaceable>,
                returns all the object names nested in the container
                (without the need for the directory marker
                objects).</td>
            </tr>
            <tr>
              <td><code>path</code></td>
              <td>For a string <replaceable>x</replaceable>, returns
                the object names nested in the pseudo path. Equivalent
                to setting delimiter to '/' and prefix to the path
                with a '/' on the end.</td>
            </tr>
          </tbody>
        </table>
          <example>
            <title>Objects List Request</title>
          <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;[?parm=value] HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
          </example>
        <para>A list of objects is returned in the response body, one
          object name per line. The response will have a 2xx HTTP
          status code (between 200 and 299 inclusive). If the
          container does not exist, or if an incorrect account is
          specified, then a response with a 404 (Not Found) status
          code will be returned.</para>
          <example>
          <title>Objects List Response</title>
          <programlisting>
  HTTP/1.1 200 OK
  Date: Thu, 07 Jun 2010 18:50:19 GMT
  Content-Type: text/plain; charset=UTF-8
  Content-Length: 171

  kate_beckinsale.jpg
  How To Win Friends And Influence People.pdf
  moms_birthday.jpg
  poodle_strut.mov
  Disturbed - Down With The Sickness.mp3
  army_of_darkness.avi
  the_mad.avi
</programlisting>
        </example>
        <para>For information on filtering the results of a container
          list, see <xref
            linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"
          />. </para>
          <section xml:id="Serialized_List_Output-d1e1460">
            <title>Format Object List</title>
            <para>If you append <code>?format=xml</code> or
              <code>?format=json</code> query parameter to the storage
            account URL, the service returns additional object
            information in the specified format. The status codes are
            the same when using <code>?format=xml</code> or
              <code>?format=json</code>. However,
              <code>Content-Type</code> matches the specified format.
            The sample responses below are formatted for
            readability.</para>
            <example>
              <title>Object Details Request: JSON </title>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;?format=json HTTP/1.1
  Host: storage.clouddrive.com
  Content-Length: 0
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
</programlisting>
            </example>
            <example>
              <title>Object Details Response: JSON </title>
            <programlisting>
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:39:13 GMT
  Content-Length: 387
  Content-Type: application/json; charset=utf-8

 [
   {"name":"test_obj_1",
    "hash":"4281c348eaf83e70ddce0e07221c3d28",
    "bytes":14,
    "content_type":"application\/octet-stream",
    "last_modified":"2009-02-03T05:26:32.612278"},
   {"name":"test_obj_2",
    "hash":"b039efe731ad111bc1b0ef221c3849d0",
    "bytes":64,
    "content_type":"application\/octet-stream",
    "last_modified":"2009-02-03T05:26:32.612278"}
 ]
</programlisting>
            </example>
            <example>
              <title>Object Details Request: XML</title>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;?format=xml HTTP/1.1
  Host: storage.clouddrive.com
  X-Storage-Token: 182f9c0af0e828cfe3281767d29d19f4
</programlisting>
            </example>
            <example>
              <title>Object Details Response: XML </title>
            <programlisting>
  HTTP/1.1 200 OK
  Date: Tue, 25 Nov 2008 19:42:35 GMT
  Content-Length: 643
  Content-Type: application/xml; charset=utf-8

  &lt;?xml version="1.0" encoding="UTF-8"?&gt;

  &lt;container name="test_container_1"&gt;
    &lt;object&gt;
      &lt;name&gt;test_object_1&lt;/name&gt;
      &lt;hash&gt;4281c348eaf83e70ddce0e07221c3d28&lt;/hash&gt;
      &lt;bytes&gt;14&lt;/bytes&gt;
      &lt;content_type&gt;application/octet-stream&lt;/content_type&gt;
      &lt;last_modified&gt;2009-02-03T05:26:32.612278&lt;/last_modified&gt;
    &lt;/object&gt;
    &lt;object&gt;
      &lt;name&gt;test_object_2&lt;/name&gt;
      &lt;hash&gt;b039efe731ad111bc1b0ef221c3849d0&lt;/hash&gt;
      &lt;bytes&gt;64&lt;/bytes&gt;
      &lt;content_type&gt;application/octet-stream&lt;/content_type&gt;
      &lt;last_modified&gt;2009-02-03T05:26:32.612278&lt;/last_modified&gt;
    &lt;/object&gt;
  &lt;/container&gt;
                    </programlisting>
            </example>
          </section>
          <section xml:id="List_Large_Number_of_Objects-d1e1521">
            <title>Controlling a Large List of Objects</title>
            <remark security="writeronly">2012-03-09 dsh: Changed
            title for clarity</remark>
            <para>A &GET; request against the container account URL
            returns a list of up to 10,000 objects. You can limit and
            control this list of results by using the
              <code>marker</code>, <code>end_marker</code>, and
              <code>limit</code> parameters. </para>
            <para><code>Marker</code> tells Cloud Files where to begin
            your list of objects and <code>end_marker</code> tells
            where to end the list. You can use them either
            independently or together, separated by an &amp;. If you
            do not specify them, your list displays up to 10,000
            objects. Note that the <code>marker</code> and
              <code>end_marker</code> values should be URL-encoded
            prior to sending the HTTP request. </para>
            <para>You can use the <code>limit</code> parameter to
            reduce the number of returned objects. </para>
            <para>If the number of returned items equals the limit
            used (or 10,000 if no limit was given), you can assume
            there are more object names.</para>
            <example>
              <title>List Large Number of Objects</title>
            <para>For example, use a listing of five object
              names.</para>
            <programlisting>
  gala
  grannysmith
  honeycrisp
  jonagold
  reddelicious
</programlisting>
              <para>Use a limit of two to show how things work.</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;?limit=2
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb

  gala
  grannysmith
</programlisting>
              <para>Since the request returned two items, assume there
              are more object names to list and make another request
              with a marker of the last item returned.</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;?limit=2&amp;marker=grannysmith
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb

  honeycrisp
  jonagold
</programlisting>
              <para>Again, two items returned are returned, but there
              may be more.</para>
            <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;?limit=2&amp;marker=jonagold
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb

  reddelicious
</programlisting>
              <para>Now the request returned less than the limit
              number of container names, which indicates that the end
              of the list was reached. </para>
            </example>
          </section>
   

   
   
   
        </section>
        <section xml:id="Container_Quotas-d1e2222" >
        <title>Container Quotas</title>
        <para>The container_quotas middleware implements simple quotas
          that can be imposed on Cloud Files containers by a user
          (most likely the account administrator) with the access to
          set container metadata. Setting container quotas can be
          useful for limiting containers for non-admin users, formpost
          uploads, or just as a self-imposed sanity check.</para>
        <para>Any object PUT operations that exceed the quotas return
          a 413 response (request entity too large) with a descriptive
          body.</para>
        <para>Because the storage system is a true distributed system
          and because it accepts simultaneous requests, the quotas may
          not be enforced exactly. For example, if the quota is 5 GB
          and two users try to store a 5 GB file at the exact same
          time, both would be allowed to store the file since at the
          time of both requests the container had sufficient remaining
          quota. </para>
        <para>Also, for chunked file uploads, the storage system
          cannot reject transfers that will eventually exceed the
          quota because the storage system does not know whether the
          end of the file will exceed the quota. </para>
        <para>Quotas are set by adding metadata to the container. The
          available metadata values are described in the following
          table.</para>
        <para>
          <table rules="all">
            <caption>Metadata Values for Setting Container
              Quotas</caption>
            <col width="50%"/>
            <col width="50%"/>
            <thead>
              <tr>
                <th>Metadata</th>
                <th>Use</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>X-Container-Meta-Quota-Bytes</code></td>
                <td>Maximum size of the container, in bytes.</td>
              </tr>
              <tr>
                <td><code>X-Container-Meta-Quota-Count</code></td>
                <td>Maximum object count of the container.</td>
              </tr>
            </tbody>
          </table>
        </para>
      </section>
        
        <section xml:id="Acess_Log_Delivery-d1e2200">
          <title>Access Log Delivery</title>
          <para>You can use Access Log Delivery to analyze the number
          of requests for each object, the client IP address, and
          time-based usage patterns (such as monthly or seasonal
          usage). </para>
          <para> Access Log Delivery is set on the container, and
          every object in the container is tracked. To enable access
          logs for a container, set the metadata flag
            <code>X-Container-Meta-Access-Log-Delivery</code> flag to
            <code>TRUE</code>. If you have multiple containers that
          you want to track, you must set the metadata header to
            <code>TRUE</code> for each container. When your first log
          is delivered, the container .ACCESS_LOGS is created. This
          container holds the access logs for every container for
          which you turn on logging. Log files exist until you delete
          them. To turn off logging, set
            <code>X-Container-Meta-Access-Log-Delivery</code> flag to
            <code>FALSE</code>. </para>
          <para> Log files are named according to this pattern:
          container name, log date, log hour, and MD5_hash such as
            <code>Media/2012/10/01/16/096e6c4473f235db081deb51f42a8d98.log.gz
          </code>. In this example, <code>Media</code> is the name of
          the container, October 1, 2012 is the date, and 16 is the
          hour the logs are from. There may be multiple files for a
          given hour because the storage system splits log files based
          on both time and log file size. All times in the access logs
          are UTC time. </para>
          <para> Within the gzipped logs, the format of the entries is
          similar to National Center for Supercomputing Applications
          (NCSA) combined log format, but without cookies. The pattern
          is below. The dashes (<parameter>"-"</parameter>) note
          fields which the NCSA combined log format dictates be
          present but which Cloud Files does not capture. The format
          is: </para>
        <para><code>client_ip - - [day/month/year:hour:minute:second
            timezone “method request HTTP_version” return_code
            bytes_sent “referrer” “user_agent”</code></para>
        <para>Example entries are below. </para>
          <example>
            <title>Example Access Log Entries</title>
          <programlisting>
   50.56.228.64 - - [27/08/2012:16:50:22 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 401 0 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"
   50.56.228.64 - - [27/08/2012:16:53:49 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521
        /object_%2521 HTTP/1.0" 201 118 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"  
   50.56.228.64 - - [27/08/2012:16:53:47 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 202 58 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"       
   50.56.228.64 - - [27/08/2012:16:50:36 +0000] "PUT /v1/
        MossoCloudFS_bb88c7b9-ea5b-49af-82fc-376ff241963c/CharacterTest_%2521 
        HTTP/1.0" 401 0 "-" "python-requests/0.13.8 
        CPython/2.7.3 Linux/3.2.0-29-generic"
</programlisting>
          </example>
        </section>
<!--         
        <section xml:id="Retrieve_Container_Metadata-d1e1809">
          <title>Retrieve Container Metadata</title>
          <para>&HEAD; operations against a storage container 
            are used to determine the number of objects, and
          the total bytes of all objects stored in the
          container. Since the storage system is designed to store
          large amounts of data, care should be taken when
          representing the total bytes response as an integer; when
          possible, convert it to a 64-bit unsigned integer if your
          platform supports that primitive type.</para>
          <example>
            <title>Container Metadata Request</title>
            <literallayout class="monospaced">
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                    </literallayout>
          </example>
          <para>The HTTP return code will be 204 (No Content) if the container exists, and 404 (Not
            Found) if it does not. The object count and utilization are returned in the
              <code>X-Container-Object-Count</code> and <code>X-Container-Bytes-Used</code> headers
            respectively.</para>
          <example>
            <title>Container Metadata Response</title>
            <literallayout class="monospaced">
  HTTP/1.1 204 No Content
  Date: Wed, 16 Mar 2010 19:37:41 GMT
  Content-type: text/html
  X-Container-Object-Count: 7
  X-Container-Bytes-Used: 413
  X-Container-Meta-InspectedBy: JackWolf
                    </literallayout>
          </example>
        </section>        
      </section>
      <section xml:id="Storage_Object_Services-d1e1848">
        <title>Storage Object Services</title>
        <para>An object represents the data and any metadata for the files stored in the
          system. Through the REST interface, metadata for an object can be included by adding
          custom HTTP headers to the request and the data payload as the request body. Objects
          cannot exceed 5 GB and must have names that do not exceed 1024 bytes after URL
          encoding. If you try to upload an object larger than 5 GB, a 413 (Request Entity Too Large)
          code will be returned.
         
          However, objects larger than 5 GB may be segmented and concatenated 
          together so that you can upload 5 GB segments and download a single concatenated object. 
          You can work with the segments and manifests directly with HTTP requests.  -->
      </section>
      <section xml:id="Storage_Objects-d1e4300">
      <title>Storage Object Services</title>
      <para>This section documents services for storage
        objects.</para>
        <section xml:id="Retrieve_Object-d1e4301">
        <title>Retrieve Object</title>
        <para>&GET; operations against an object are used to retrieve
          the object's data.</para>
        <para>Note that you can perform conditional &GET; requests by
          using certain HTTP headers as documented in RFC 2616 found
          at <link xlink:href="http://www.ietf.org/rfc/rfc2616.txt"
            >http://www.ietf.org/rfc/rfc2616.txt</link>. </para>
        <para>Cloud Files supports the following request header
          fields:</para>
        <itemizedlist>
          <listitem>
            <para>If-Match</para>
          </listitem>
          <listitem>
            <para>If-None-Match</para>
          </listitem>
          <listitem>
            <para>If-Modified-Since</para>
          </listitem>
          <listitem>
            <para>If-Unmodified-Since</para>
          </listitem>
        </itemizedlist>
        <para>You can fetch a portion of data using the HTTP
            <code>Range</code> header. At this time, Cloud Files does
          not support the full specification for <code>Range</code>,
          but basic support is provided. Cloud Files  allows only a
          single range that includes OFFSET and/or LENGTH. Cloud Files
          supports a sub-set of <code>Range</code> and do not adhere
          to the full RFC-2616 specification. Cloud Files supports
          specifying OFFSET-LENGTH where either OFFSET or LENGTH can
          be optional (not both at the same time). The following are
          supported forms of the header:</para>
        <table rules="all" >
          <caption>Cloud Files Supported Range Formats</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Format</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Range: bytes=0-9  </td>
              <td>Returns byte offsets 0-9, the first 10 bytes.
                (Offset 0 is the first byte.)  </td>
            </tr>
            <tr>
              <td>Range: bytes=-5</td>
              <td>Returns the last 5 bytes</td>
            </tr>
            <tr>
              <td>Range: bytes=32-</td>
              <td>Returns the final bytes, starting at offset 32 </td>
            </tr>
          </tbody>
        </table>
        <example>
          <title>Retrieve Object Request</title>
          <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
        </example>
        <para>The object's data is returned in the response body.
          Object metadata is returned as HTTP headers. A status of 200
          (OK) indicates success. Status code 404 (Not Found) is
          returned if no such object exists.</para>
        <example>
          <title>Retrieve Object Response</title>
          <programlisting>
  HTTP/1.1 200 OK
  Date: Wed, 11 Jul 2007 19:37:41 GMT
  Last-Modified: Fri, 12 Jun 2007 13:40:18 GMT
  ETag: b0dffe8254d152d8fd28f3c5e0404a10
  Content-type: text/html
  Content-Length: 512000

  [ ... ]</programlisting>
        </example>
      </section>
      <section xml:id="Create_Update_Object-d1e1965">
        <title>Create or Update Object</title>
        <para>&PUT; operations are used to write, or overwrite, an
          object's content and metadata.</para>
        <para>You can ensure end-to-end data integrity by including an
          MD5 checksum of your object's data in the ETag header. You
          are not required to include the ETag header, but it is
          recommended to ensure that the storage system successfully
          stores your object's content.</para>
        <para>You can cause an object to expire after a certain date
          and time by using the <code>X-Delete-At</code> or
            <code>X-Delete-After</code> headers during an object &PUT;
          operation. The <code>X-Delete-At</code> header requires a
          Unix Epoch timestamp, in integer form. For example,
          1348691905 represents Wed, 26 Sep 2012 20:38:25 GMT. By
          setting the header to a specific Epoch time, you indicate
          when you want the object to expire, not be served, and be
          deleted completely from the storage system. When Cloud Files
          detects one of these headers, the system automatically stops
          serving that object at the specified date and time, and
          shortly after the expiration date, it removes the object
          from the storage system.</para>
        <para>The HTTP response will include the MD5 checksum of the
          data written to the storage system. If you do not send the
          ETag in the request, you should compare the value returned
          with your content's MD5 locally to perform the end-to-end
          data validation on the client side. For segmented objects,
          the ETag is the MD5 sum of the concatenated string of ETags
          for each segment in the manifest, which offers change
          detection but not direct comparison. </para>
        <para>Objects can be assigned custom metadata by including
          additional HTTP headers in the &PUT; request. To assign
          custom metadata, use an HTTP header with the
            <code>X-Object-Meta-</code> prefix.</para>
        <example>
          <title>Create or Update Object Request</title>
          <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 512000
  X-Object-Meta-PIN: 1234

  [ ... ]
</programlisting>
        </example>
        <!-- 02-12-12 dsh: changed the status code / below to 411 / (wikipedia) -->
        <para>No response body is returned. A status code of 201
          (Created) indicates a successful write. Any status code in
          the 400 range denotes failure. The 401 status code
          (Unauthorized) is returned upon authentication failure. The
          411 status code (Length Required) denotes a missing
            <code>Content-Length</code> or <code>Content-Type</code>
          header in the request. If the MD5 checksum calculated by the
          storage system does NOT match the optionally supplied ETag
          value, a 422 status code (Unprocessable Entity) is
          returned.</para>
        <example>
          <title>Create or Update Object Response</title>
          <programlisting>
  HTTP/1.1 201 Created
  Date: Thu, 07 Jun 2010 18:57:07 GMT
  ETag: d9f5eb4bba4e2f2f046e54611bc8196b
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
</programlisting>
        </example>
        <section xml:id="Chunked-Transfer-Encoding-d10e">
          <title>Chunked Transfer Encoding</title>
          <para>You can upload data without needing to know in advance
            the amount of data to be uploaded. You can do this by
            specifying an HTTP header of <code>Transfer-Encoding:
              chunked</code> and not using a
              <code>Content-Length</code> header. A good use of this
            feature would be performing a DB dump, piping the output
            to gzip, and then piping the gzip file directly to Cloud
            Files without having to write the data to disk to compute
            the file size. If you attempt to upload more than 5 GB,
            the server will close the connection and remove the
            previously sent data from the system. You must ensure that
            the data that you transfer will be less than 5 GB or split
            it into 5 GB chunks, each in its own storage object. </para>
          <para>If you have files that are larger than 5 GB and want
            to use Cloud Files, you can segment them prior to upload,
            upload them to the same container, and then use a manifest
            file to allow downloading of a concatenated object
            containing all the segmented objects. For more
            information, see <xref
              linkend="Large_Object_Creation-d1e2019"/>.</para>
          <example>
            <title>Upload Unspecified Quantity of Content
              Request</title>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Transfer-Encoding: chunked
  X-Object-Meta-PIN: 1234

</programlisting>
          </example>
          <example>
            <title>Upload Unspecified Quantity of Content
              Response</title>
            <programlisting>
  19
  A bunch of data broken up
  D
  into chunks.
  0
                 </programlisting>
          </example>
        </section> 
      </section>
       
        <section xml:id="Create-Large-Objects-d10e">
          <title>Create Large Objects</title>
          <para>The content of an object cannot be larger than 5GB (by
            default). However, you can store larger content using two
            types of objects:</para>
          <itemizedlist>
            <listitem>
              <para>Divide your content into pieces and upload each
                piece into its own object. These objects are known as
                segment objects.</para>
            </listitem>
            <listitem>
              <para>Create a manifest object. A manifest object
                "points to" the segment objects.</para>
            </listitem>
          </itemizedlist>
          <para>Segment objects do not have any special features and
            can be created, updated, downloaded and deleted as
            described elsewhere in this document. However, a manifest
            object is special -- when you download, the system
            concatenates the contents of the segment objects and
            returns this in the response body of the request. This
            behavior extends to the response headers returned by GET
            and HEAD operations. The <code>Content-Length</code> is
            the total size of all segment objects and the
              <code>ETag</code> is calculated by taking the
              <code>ETag</code> value of each segment, concatenating
            them together and then returning the MD5 checksum of the
            result.</para>
          <note>
            <para>If you use the <command>COPY</command> operation
              using a manifest object as the source, the new object is
              a "normal" object (not segmented). If the total size of
              the source segment objects exceeds 5GB, the
                <command>COPY</command> operation will fail. However,
              as explained later, you can make a duplicate of the
              manifest object. This new object may be larger than
              5GB.</para>
          </note>
          <para>There are two types of manifest object as
            follows:</para>
          <itemizedlist>
            <listitem>
              <para>Static Large Objects: The manifest object content
                is an ordered list of the names of the segment objects
                in JSON format.</para>
            </listitem>
            <listitem>
              <para>Dynamic Large Objects: The manifest object has no
              content. However, it has <code>X-Object-Manifest</code>
              metadata. The value of this is
                <code>&lt;container>/&lt;prefix></code> , where
                <code>&lt;container></code> is the name of the
              container where the segment objects are stored and
                <code>&lt;prefix></code> is a string that all the
              segment objects have in common. </para>
            </listitem>
          </itemizedlist>
          <para>While both types of manifest objects have similar
            behavior, there are differences as explained in the
            following table.</para>
          <?hard-pagebreak?>     
        <table rules="all">
          <caption>Comparison of Static and Dynamic Large
            Objects</caption>
          <col width="33%"/>
          <col width="34%"/>
          <col width="33%"/>
          <thead>
            <tr>
              <th>Feature</th>
              <th>Static Large Object</th>
              <th>Dynamic Large Object</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>End-to-end integrity</td>
              <td>Assured. The list of segments includes the MD5
                checksum (ETag) of each segment. You cannot upload the
                manifest object if the ETag in the list differs from
                the segment object already uploaded. If a segment is
                somehow lost, an attempt to download the manifest
                object will result in an error.</td>
              <td>Not guaranteed. The eventual consistency model means
                that although you may have uploaded a segment object,
                it may not appear in the container listing until
                later. If you download the manifest before it appears
                in the container, it will not form part of the content
                returned in response to a <command>GET</command>
                request.</td>
            </tr>
            <tr>
              <td>Upload order</td>
              <td>The segment objects must be uploaded before the
                manifest object.</td>
              <td>You can upload manifest and segment objects in any
                order. You are recommended to upload the manifest
                object after the segments in case a premature download
                of the manifest occurs. However, this is not
                enforced.</td>
            </tr>
            <tr>
              <td>Removal or addition of segment objects</td>
              <td>You cannot add or remove segment objects from the
                manifest. However, you can create a completely new
                manifest object of the same name with a different
                manifest list.</td>
              <td>You can upload new segment objects or remove
                existing segments --- the names must simply match the
                  <code>&lt;prefix></code> supplied in
                  <code>X-Object-Manifest</code>.</td>
            </tr>
            <tr>
              <td>Segment object size and number</td>
              <td>Segment objects must be at least 1MB in size (by
                default). The final segment object can be any size. At
                most 1000 segments are supported (by default)</td>
              <td>Segment objects can be of any size.</td>
            </tr>
            <tr>
              <td>Segment object container name</td>
              <td>The manifest list includes the container name of
                each object, i.e., segment objects may be in different
                containers.</td>
              <td>All segment objects must be in the same
                container.</td>
            </tr>
            <tr>
              <td>Manifest object metadata</td>
              <td>The object has <code>X-Static-Large-Object</code>
                set to <code>True</code>. You do not set this metadata
                directly. Instead the system sets it when you
                  <command>PUT</command> a static manifest
                object.</td>
              <td>The <code>X-Object-Manifest</code> value is the
                  <code>&lt;container>/&lt;prefix></code> indicating
                where the segment objects are located. You supply this
                request header in the <command>PUT</command>
                operation</td>
            </tr>
            <tr>
              <td>Making a copy of the manifest object</td>
              <td>To make a copy of the manifest object, include the
                  <code>?multipart- manifest=get</code> query string
                with the <command>COPY</command> operation. The new
                object contains the same manifest as the original. The
                segment objects are not copied. Instead, both the
                original and new manifest objects share the same set
                of segment objects.</td>
              <td>The <command>COPY</command> operation does not
                create a manifest object. To duplicate a manifest
                object, use the <command>GET</command> operation to
                read the value of <code>X-Object-Manifest</code> and
                use this value in the <code>X-Object-Manifest</code>
                request header in a <command>PUT</command> operation.
                This creates a new manifest object that shares the
                same set of segment objects as the original manifest
                object.</td>
            </tr>
          </tbody>
        </table>
       
        <section xml:id="Large_Object_Creation-d1e2019">
          <title>Dynamic Large Object Creation</title>
          <para>Objects that are larger than 5 GB must be segmented,
            prior to upload. You then upload the segments as you would
            any other object.  You create a manifest object telling
            Cloud Files how to find the segments of the large object.
            The segments remain individually addressable, but
            retrieving the manifest object streams all the segments
            concatenated. There is no limit to the number of segments
            that can be a part of a single large object.</para>
          <para>To ensure that the download works correctly, you must
            upload all the object segments to the same container and
            that ensure each object name is prefixed in such a way
            that their names sort in the order in which they should be
            concatenated. You also create and upload a manifest file.
            The manifest file is simply a zero-byte file with the
            extra <code>X-Object-Manifest:
              &lt;container&gt;/&lt;prefix&gt;</code> header, where
              <code>&lt;container&gt;</code> is the container that the
            object segments are in and <code>&lt;prefix&gt;</code> is
            the common prefix for all the segments. The container and
            common prefix must be UTF-8 encoded and URL-encoded in the
              <code>X-Object-Manifest</code> header.</para>
          <para>It is best to upload all the segments first and then
            create or update the manifest. With this method, the full
            object will not be available for downloading until the
            upload is complete. Also, you can upload a new set of
            segments to a second location and then update the manifest
            to point to this new location. During the upload of the
            new segments, the original manifest will still be
            available to download the first set of segments.</para>
          <example>
            <title>Upload Segment of a Large Object Request</title>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 1
</programlisting>
          </example>
          <example>
            <title>Upload Segment of a Large Object Response</title>
            <programlisting>
  s
                </programlisting>
          </example>
          <para>No response body is returned. A status code of 201
            (Created) indicates a successful write. Status code 411
            (Length Required) indicates that the Content-Length header
            is missing. If the MD5 checksum calculated by the storage
            system does NOT match the optionally supplied ETag value,
            a 422 (Unprocessable Entity) status code is
            returned.</para>
          <para>You can continue uploading segments as this example
            shows, prior to uploading the manifest.</para>
          <example>
            <title>Upload Next Segment of the Large Object
              Request</title>
            <programlisting>
 PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 1
 </programlisting>
          </example>
          <example>
            <title>Upload Next Segment of the Large Object
              Response</title>
            <programlisting>
  w
                    </programlisting>
          </example>
          <para>Next, upload the manifest that you created that
            indicates the container in which the object segments
            reside. Note that uploading additional segments after the
            manifest is created will cause the concatenated object to
            be that much larger but you do not need to recreate the
            manifest file for subsequent additional segments.</para>
          <example>
            <title>Upload Manifest Request</title>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Length: 0
  X-Object-Manifest: container/prefix/object/segments
</programlisting>
          </example>
          <example>
            <title>Upload Manifest Response</title>
            <programlisting>
  [...]
</programlisting>
          </example>
          <para>The response's <code>Content-Type</code> for a &GET;
            or &HEAD; request on the manifest will be the same as the
              <code>Content-Type</code> set during the &PUT; request
            that created the manifest. You can easily change the
              <code>Content-Type</code> by reissuing the &PUT;
            request.</para>
        </section>
        <section xml:id="Static_Large_Object-d1e2226">
          <title>Static Large Object Creation</title>
          <para>Static Large Object (SLO) support is similar to
            Dynamic Large Object (DLO) support because it allows you
            to upload many objects concurrently and afterwards
            downloads them as a single object. However, unlike Dynamic
            Large Object support, Static Large Object support does not
            rely on eventual consistency model for the container
            listings. Instead, Static Large Object support uses a
            user-defined manifest of the object segments.</para>
          <note>
            <para>The eventual consistency model means that although
              you may have uploaded a segment object, it may not
              appear in the container listing until later. If you
              download the manifest before it appears in the
              container, it will not form part of the content returned
              in response to a &GET; request.</para>
          </note>
          <para>The benefits of using Static Large Objects are:<itemizedlist>
              <listitem>
                <para>Uploads and downloads of Static Large Objects
                  can be in different containers, which can improve
                  performance.</para>
              </listitem>
              <listitem>
                <para>There is an explicit list of segments, instead
                  of an implied list as with DLOs.</para>
              </listitem>
            </itemizedlist></para>
          <para>A Static Large Object is created in two steps: </para>
          <orderedlist>
            <listitem>
              <para>Divide your content into pieces and create
                (upload) a segment object to contain each piece. You
                must record the <code>ETag</code> response header
                returned by the <command>PUT</command> operation.
                Alternatively, you can calculate the MD5 checksum of
                the segment prior to uploading and include this in the
                  <code>ETag</code> request header -- this ensures
                that the upload cannot corrupt your data.</para>
              <para> The maximum number of object segments per Static
                Large Object is 1,000. Each segment, except for the
                final one, must be at least one megabyte.</para>
            </listitem>
            <listitem>
              <para>List the name of each segment object along with
                its size and MD5 checksum in order. Create a manifest
                object. You indicate that this is a manifest object by
                including the ?<code>multipart-manifest=put</code>
                query string at the end of the manifest object
                name.</para>
            </listitem>
          </orderedlist>
          <section xml:id="Uploading_the_Segments-d1e2228">
            <title>Uploading the Segments</title>
            <para>The first thing to do is to upload your segment
              objects. All the segments, except the last one, need to
              be larger than 1 megabyte (1048576 bytes). It may help
              organizationally to keep them in the same container, but
              it is not required. You will need the following
              information about each segment for the next step,
              uploading the manifest object: </para>
            <itemizedlist>
              <listitem>
                <para><code>path</code> -- the container and object
                  name in the following format:
                    <code>&lt;container_name>/&lt;object_name></code></para>
              </listitem>
              <listitem>
                <para><code>etag</code> -- the <code>ETag</code>
                  header from the successful 201 response of the PUT
                  when you uploaded the segment. This is the MD5
                  checksum of the segment object's data. </para>
              </listitem>
              <listitem>
                <para><code>size_bytes</code> -- the segment object's
                  size in bytes. This should match the
                    <code>Content-Length</code> of that object.</para>
              </listitem>
            </itemizedlist>
          </section>
          <section xml:id="Uploading_the_Manifext-d1e2227">
            <title>Uploading the Manifest</title>
            <para>After you have uploaded the objects to be
              concatenated, you upload a manifest object. The request
              must be a <command>PUT</command> with the following
              query parameter at the end of the manifest object
              name:</para>
            <programlisting>
?multipart-manifest=put
</programlisting>
            <para>The body of the <command>PUT</command> operation is
              an ordered list of files in JSON data format. The data
              to be supplied for each segment is:</para>
            <itemizedlist>
              <listitem>
                <para><code>path</code> -- the container and object
                  name in the following format:
                    <code>&lt;container_name>/&lt;object_name></code></para>
              </listitem>
              <listitem>
                <para><code>etag</code> -- the <code>ETag</code>
                  header from the successful 201 response of the PUT
                  when you uploaded the segment. This is the MD5
                  checksum of the segment object's data. </para>
              </listitem>
              <listitem>
                <para><code>size_bytes</code> -- the segment object's
                  size in bytes. This should match the
                    <code>Content-Length</code> of that object.</para>
              </listitem>
            </itemizedlist>
            <para>Following is an example containing three segment
              objects. This example illustrates that in contrast to
              dynamic large objects, you can use a number of
              containers and the object names do not have to conform
              to a specific pattern.</para>
            <example>
              <title>Static Large Object Manifest List</title>
              <programlisting>
 json:[
        {
          "path": "/mycontainer/objseg1",
          "etag": "0228c7926b8b642dfb29554cd1f00963",
          "size_bytes": 1468006
        },
        {
          "path": "/mycontainer/pseudodir/seg-obj2",
          "etag": "5bfc9ea51a00b790717eeb934fb77b9b",
          "size_bytes": 1572864
        },
        {
          "path": "/other-container/seg-final",
          "etag": "b9c3da507d2557c1ddc51f27c54bae51",
          "size_bytes": 256
        }
      ]
</programlisting>
            </example>
            <para>The <code>Content-Length</code> request header must
              contain the length of the JSON content -- not the length
              of the segment objects. However, after the
                <command>PUT</command> operation completes, the
                <code>Content-Length</code> metadata is set to the
              total length of all the object segments. A similar
              situation applies to the <code>ETag</code> . If used in
              the <command>PUT</command> operation, it must contain
              the MD5 checksum of the JSON content. The
                <code>ETag</code> metadata value is then set to be the
              MD5 checksum of the concatenated <code>ETag</code>
              values of the object segments. You may also set the
                <code>Content-Type</code> request header and custom
              object metadata. </para>
            <para>When the <command>PUT</command> operation sees the
                <code>?multipart-manifest=put</code> query string, it
              reads the request body and verifies that each segment
              object exists and that the sizes and ETags match. If
              there is a mismatch, the <command>PUT</command>
              operation will fail. </para>
            <para> On upload, the middleware will head every segment
              passed in and verify the size and ETag of each. If any
              of the objects do not match (not found, size/ETag
              mismatch, below minimum size), Cloud Files issues a 4xx
              status code. If everything does match, Cloud Files
              issues a 2xx status code.</para>
            <para>If everything matches, the manifest object is
              created. The <code>X-Static-Large-Object</code> metadata
              is set to true indicating that this is a static object
              manifest. </para>
            <para>When the manifest object is uploaded, you are more
              or less guaranteed that every segment in the manifest
              exists and that it matches the specifications. However,
              nothing prevents a user from breaking the Static Large
              Object download by deleting or replacing a segment
              referenced in the manifest. Users should use caution
              when handling the segments.</para>
            <para>The order of the segments listed in the manifest
              determine the order in which the segments will be
              concatenated on download. The manifest  can reference
              objects in separate containers, which improves
              concurrent upload speed. Objects can be referenced by
              multiple manifests.</para>
          </section>
          <section xml:id="Retrieving_a_Large_Object-d1e2227">
            <title>Retrieving a Large Object</title>
            <para>A <command>GET</command> request to the manifest
              object returns the concatenated content of the segment
              objects listed in the manifest. If any of the segments
              from the manifest are not found or their
                <code>ETag</code> or <code>Content-Length</code> no
              longer match, the <command>GET</command> operation will
              fail. As a result, a 409 (Conflict) status code is
              logged in the proxy logs.</para>
            <para>The headers from the <command>GET</command> or
                <code>HEAD</code> request return metadata for the
              manifest object as shown below:</para>
            <itemizedlist>
              <listitem>
                <para><code>Content-Length</code>: The total size of
                  the Static Large Object (the sum of the sizes of the
                  segments in the manifest)</para>
              </listitem>
              <listitem>
                <para><code>X-Static-Large-Object: True</code></para>
              </listitem>
              <listitem>
                <para><code>ETag</code>: The ETag of the Static Large
                  Object (generated the same way as Dynamic Large
                  Object)</para>
              </listitem>
            </itemizedlist>
            <para>The GET request with the following query parameter
              returns the actual manifest file contents:</para>
            <programlisting>
?multipart-manifest=get  
</programlisting>
            <para>The response body contains generated JSON. The
              resulting list will not be identically formatted as the
              manifest you originally used in the
                <command>PUT</command> operation
                (<code>multipart-manifest=put</code>). </para>
            <para>The call’s main purpose is for debugging.</para>
          </section>
          <section xml:id="Deleting_a_Large_Object-d1e2228">
            <title>Deleting a Large Object </title>
            <para>A <command>DELETE</command> operation on a manifest
              object deletes the manifest object itself. The segment
              objects are not affected. </para>
            <para>A <command>DELETE</command> operation with the
              following query parameter deletes all segment objects in
              the manifest, and then, if all are successfully deleted,
              the manifest object itself. A failure response will be
              similar to those for the bulk delete operation.</para>
            <programlisting>
?multipart-manifest=delete
</programlisting>
          </section>
          <section xml:id="Modifying_a_Large_Object-d1e2229">
            <title>Modifying a Large Object </title>
            <para><command>PUT</command> and <command>POST</command>
              operations work as expected. </para>
            <para>A <command>PUT</command> overwrites the manifest
              object (and leaves the segments alone). </para>
            <para>A<command>POST</command> changes the manifest file's
              metadata and contents, as with any other object.</para>
          </section>
          <section xml:id="Listings_of_Containers-d1e2230">
            <title>Listings of Containers with SLOs </title>
            <para>In a container listing, the size listed for a Static
              Large Object manifest object is the total size of the
              concatenated segments in the manifest, not the size of
              the manifest file itself. Overall,
                <code>X-Container-Bytes-Used</code> for the container
              (and for the account) reflects the size of the manifest
              itself, which is the stored JSON data. This allows you
              to see the total size of the Static Large Object in a
              container listing call, but does not inflate the bytes
              used for the container or the account.</para>
          </section>
        </section>
        </section>
        <section xml:id="Bulk_Import-d1e2094">
          <title>Bulk Importing Data</title>
          <remark security="writeronly">added 06-11-2012</remark>
          <para> Bulk importing of data is available if you have a
            very large amount of data to import into Cloud Files. With
            bulk importing, you send a physical device containing your
            data to Rackspace and Rackspace loads it directly into
            Cloud Files. This helps you avoid the time and cost of
            uploading large amounts of data over the Internet. After
            the transfer is complete, Rackspace will either ship your
            device back to you, or destroy it after degaussing,
            whichever you prefer. </para>
          <para> Rackspace accept USB, SATA, and eSATA devices. Your
            file system may be NTFS, ext2, ext3, ext4, or FAT32.
            Because Cloud Files does not use hierarchical directory
            structures, nested sub-directories in your data are
            converted to object names. Your top-level folders become
            containers, and nested directory names become part of the
            object names. For instance,
              <code>Chapter28/Ahab/ivoryleg</code> results in a
            container named <code>Chapter28</code> with an object
            named <code>Ahab/ivoryleg</code> inside it. For more
            information on simulating directory structures in Cloud
            Files, see <xref
              linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"
            />. </para>
          <para> To begin the Bulk Import process, contact Rackspace
            support technicians. You will be assigned a Migration
            Specialist who can answer any questions you might have
            along the way. You will be notified when Rackspace
            receives your device, begins the data import, completes
            data import, and ships back or destroys the device. </para>
        </section>
        <section
          xml:id="Enabling_File_Compression_with_the_Content-Encoding_Header-d1e2198">
          <title>Enabling File Compression with the Content-Encoding
            Header</title>
          <para>The <code>Content-Encoding</code> header allows a file
            to be compressed while still preserving the identity of
            the underlying media type of the file, for example, a
            video.</para>
          <para>The object must be compressed before it is uploaded.
            Cloud Files does not do any automatic compression. The
            content-encoding header is there to allow the client to
            set the metadata appropriately.</para>
          <example>
            <title>Content-Encoding Header Example</title>
            <para>In the example, the content-encoding header is
              assigned with an attachment type that indicates how the
              file should be downloaded:</para>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: video/mp4
  Content-Encoding: gzip
</programlisting>
          </example>
        </section>
        <section
          xml:id="Enabling_Browser_Bypass_with_the_Content-Disposition_Header-d1e2219">
          <title>Enabling Browser Bypass with the Content-Disposition
            Header</title>
          <para>When an object is assigned the Content-Disposition
            header you can override a browser's default behavior for a
            file so that the browser prompts to save the file rather
            than displaying it using default browser settings.</para>
          <example>
            <title>Content-Disposition Header Example</title>
            <para>In the example, the content-encoding header is
              assigned with an attachment type that indicates how the
              file should be downloaded.</para>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/tiff
  Content-Disposition: attachment; filename=platmap.tif
                    </programlisting>
          </example>
        </section>
        <section xml:id="Expiring_Objects-e1e3228">
          <title>Expiring Objects with the <code>X-Delete-After</code>
            and <code>X-Delete-At</code> Headers</title>
          <para>When an object is assigned either an
              <code>X-Delete-After</code> or <code>X-Delete-At</code>
            header when doing a &PUT; or &POST; on the object, it is
            scheduled for deletion. This feature is helpful for
            objects you do not want to permanently store, such as log
            files, recurring full backups of a dataset, or documents
            or images you know will be outdated at a future
            time.</para>
          <para>Objects with the <code>X-Delete-At</code> or
              <code>X-Delete-After</code> header assigned are deleted
            within one day of the expiration time and the object is
            not served immediately after the expiration time. Refer to
              <link linkend="Expiring_Objects-e1e3228">Expiring
              Objects</link> for more details.</para>
          <para>The <code>X-Delete-At</code> header requires a Unix
            Epoch timestamp, in integer form. For example, 1348691905
            represents Wed, 26 Sep 2012 20:38:25 GMT.
            <!--  02-06-12 dsh: Exchanged POSIX in / favor of Epoch for the / sake of clarity dsh. -->
            By setting the header to a specific Epoch time, you
            indicate when you want the object to expire, not be
            served, and be deleted completely from the storage system. </para>
          <para>The <code>X-Delete-After</code> header takes an
            integer number of seconds that represents the amount of
            time from now that you want the object to be deleted. The
            proxy server that receives the request converts this
            header into an <code>X-Delete-At</code> header and
            calculates the deletion time using its current time plus
            the value given in seconds.</para>
          <para>For existing objects that you want to assign
            expiration headers to, use the &POST; operation.</para>
          <example>
            <title>Delete-At Request</title>
            <para>In the example, the <code>X-Delete-At</code> header
              is assigned with a Unix Epoch timestamp in integer form
              for Mon, 11 Jun 2012 15:38:25 GMT. Use <link
                xlink:href="http://www.epochconverter.com/"
                >http://www.epochconverter.com/</link> for example
              timestamps and a batch converter.</para>
            <programlisting>
 PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/jpeg
  X-Delete-At: 1339429105
                 </programlisting>
          </example>
          <example>
            <title>Delete-After Request</title>
            <para>  In this example, the <code>X-Delete-After</code>
              header is assigned a value in seconds, equivalent to 10
              days. After this time, the object expires. </para>
            <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Content-Type: image/jpeg
  X-Delete-After: 864000
</programlisting>
          </example>
        </section>
        <section xml:id="Object_Versioning-e1e3230">
          <title>Object Versioning</title>
          <para> Object Versioning allows you to store multiple
            versions of your content to recover from unintended
            overwrites and deletions. It provides an easy method to
            implement version control which can be used on any type of
            content. It is strongly recommended that you put
            non-current objects in a separate container from where the
            current versions exist. Once you enable Object Versioning,
            new data written to an object causes the last-current
            version to be written to the separate container. Each of
            the non-current versions has a timestamp appended to it,
            so you know when it was originally created. </para>
          <para> To enable Object Versioning, create a container where
            your non-current versions will be written. Next, set the
            metadata <code>X-Versions-Location</code> header on the
            container that holds the current versions of your objects.
            Set the metadata header to point to the new non-current
            version container you created. This is where your
            non-current versions will be stored. Once this is done,
            each object in your current-version container will have
            Object Versioning enabled. Changes to the objects
            automatically create non-current versions in the separate
            container. </para>
          <para> Nothing is written to the non-current version
            container when you initially &PUT; an object into the
            current-version container. Only when you make edits to the
            objects through &PUT; will you create non-current
            versions. These non-current versions are labeled according
            to the schema below. </para>
          <para>
            <emphasis>Naming Schema:</emphasis> Non-current versions
            are assigned the name
            &lt;length&gt;&lt;object_name&gt;/&lt;timestamp&gt;, where
            length is the 3-character zero-padded hexadecimal
            character length of the &lt;object_name&gt; and
            &lt;timestamp&gt; from when it was originally created as a
            current version. </para>
          <para> Any return status in the 2xx range, such as 202
            (Accepted), denotes success. Status codes in the 4xx or
            5xx range denote failure. You should retry your request if
            you receive an error. Please note, however, that if you
            have specified a container that does not exist as your
            non-current version container, a status of 412
            (Precondition Failed) returns when you edit the versioned
            object. If you receive this error, check to see if the
            container exists. </para>
          <para> A &GET; to a versioned object returns the current
            version of the object without having to do any request
            redirects or metadata lookups. </para>
          <para> A &POST; to a versioned object only updates the
            object's metadata. It does not create a new version of the
            object. In other words, new versions are only created when
            the content of the object changes. </para>
          <para> A &DELETE; to a versioned object removes the current
            version of the object and replaces it with the next-most
            current version, moving it from the non-current container
            to the current container. This next-most current version
            carries with it any metadata last set on it. If want to
            completely remove an object and you have five total
            versions of it, you must &DELETE; it five times. </para>
          <note>
            <para>A large-object manifest file cannot be versioned,
              but it may point to versioned segments. </para>
          </note>
          <para> To turn off Object Versioning on your current version
            container, remove its <code>X-Versions-Location</code>
            metadata by sending an empty key value. </para>
          <example>
            <title>Object Versioning with cURL</title>
            <para>Make sure a version-storing container exists by
              creating it if necessary. This example names it
                <code>versions</code>. Then create a container with
              the <code>X-Versions-Location</code> header. In this
              example, this container is named <code>current</code>.
              You can also add the <code>X-Versions-Location</code>
              header to an existing container. In this example, the
              name of the container is <code>versions</code>. The
              location for the current version is the container
                <code>current</code>.</para>
            <orderedlist>
              <listitem>
                <para>Create a container named
                  <code>versions</code>.</para>
                <programlisting>
  curl -i -XPUT -H "X-Auth-Token: &lt;token>" http://&lt;storage_url>/versions
</programlisting>
              </listitem>
              <listitem>
                <para>Create a container named <code>current</code>
                  with the <code>X-Versions-Location</code> header
                  that references <code>versions</code>.</para>
                <programlisting>
  curl -i -XPUT -H "X-Auth-Token: &lt;token>" \
      -H "X-Versions-Location: versions" http://&lt;storage_url>/current
</programlisting>
              </listitem>
              <listitem>
                <para>Create an object (the first version).</para>
                <programlisting>
  curl -i -XPUT --data-binary 1 -H "X-Auth-Token: &lt;token>" \
      http://&lt;storage_url>/current/myobject
</programlisting>
              </listitem>
              <listitem>
                <para>Now create a new version of that object.</para>
                <programlisting>
  curl -i -XPUT --data-binary 2 -H "X-Auth-Token: &lt;token>" \
      http://&lt;storage_url>/current/myobject
</programlisting>
              </listitem>
              <listitem>
                <para>See a listing of the older versions of the
                  object. (The example includes the hex number for the
                  length of the filename.)</para>
                <programlisting>
  curl -i -H "X-Auth-Token: &lt;token>" \
      http://&lt;storage_url>/versions?prefix=008myobject/
</programlisting>
              </listitem>
              <listitem>
                <para>Now delete the current version of the object and
                  see that the older version is gone.</para>
                <programlisting>
  curl -i -XDELETE -H "X-Auth-Token: &lt;token>" \
      http://&lt;storage_url>/current/myobject
  curl -i -H "X-Auth-Token: &lt;token>" \
      http://&lt;storage_url>/versions?prefix=008myobject/
</programlisting>
              </listitem>
            </orderedlist>
          </example>
        </section>
      
      <section xml:id="Copy_Object-d1e2241">
        <title>Copy Object</title>
        <para>Suppose you upload a file with the wrong object name or
          content type, or you needed to move some objects to another
          container. Without a server-side copy feature, you would
          need to repeat uploading the same content and then delete
          the existing object. With server-side object copy, you can
          save the step of re-uploading the content and thus also save
          the associated bandwidth charges, if any were to apply. </para>
        <para>There are two ways to copy an existing object to another
          object in Cloud Files. One way is to do a &PUT; to the new
          object (the target) location, but add the
            <code>X-Copy-From</code> header to designate the source of
          the data. The header value should be the container and
          object name of the source object in the form of
            <parameter>/container/object</parameter>. Also, the
            <code>X-Copy-From</code> &PUT; requests require a
            <code>Content-Length</code> header, even if it is zero
          (0).</para>
        <programlisting>
 PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;destobject&gt; HTTP/1.1
  Host: &lt;storage URL&gt;
  X-Auth-Token: &lt;your_authentication_token&gt;
  X-Copy-From: /&lt;container&gt;/&lt;sourceobject&gt;
  Content-Length: 0                    
</programlisting>
        <para>The second way to perform an object copy is similar. Use
          the &COPY; request to the existing object, and include the
            <code>Destination</code> header to specify the target of
          the copy. The header value is the container and new object
          name in the form of <code>/container/object</code>. Unlike
          the first method, this method does not require a
            <code>Content-Length</code> header. <!-- 02-03-12 dsh Content Length header / note required by JIRA / tick DOC-100 -->
          <programlisting>
  COPY /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;sourceobject&gt; HTTP/1.1
  Host: &lt;storage URL&gt;
  X-Auth-Token: &lt;your_authentication_token&gt;
  Destination: /&lt;container&gt;/&lt;destobject&gt;
</programlisting></para>
        <para>With both of these methods, the destination container
          must exist before attempting the copy.</para>
        <para>The status code for a successful object copy is 201
          (Created). </para>
        <para>
          <!-- 02-06-12 dsh: Reworked this sentence / to remove the subjunctive / mood and make active -->
          If you want to move the object rather than copy it, you need
          to send a &DELETE; request to the source object after
          copying it. A move is simply a &COPY; + &DELETE;. All
          metadata is preserved during the object copy. Note that you
          can also set metadata on the request to copy the object
          (either the &PUT; or the &COPY;) and the metadata will
          overwrite any conflicting keys on the target (new) object. </para>
        <para>One interesting use case is to copy an object to itself
          and set the content type to a new value. This is the only
          way to change the content type of an existing object without
          re-uploading the content and using bandwidth.</para>
        <!-- 02-06-12 dsh: Added ServiceNet / discussion to clarify / costs of copying  -->
        <para> Your account is not charged when you copy or move your
          objects within the same data center using the internal
          network URL as the storage URL. The internal network is
          called ServiceNet. Your ServiceNet endpoint can be found the
          service catalog when you authenticate your session. (For
          information on how to authenticate your session, see <xref
            linkend="Authentication-d1e639"/>.) As in the example
          below, it is listed as <code>internalURL</code>. The name is
          your Cloud Files storage URL with <code>snet-</code>
          pre-pended to it. If you do not know which data center you
          are working in, you can find it in the Cloud Control
          Panel.</para>
        <example>
          <title>Data Center Endpoints</title>
          <programlisting>
  "endpoints": [
    {
      "region": "DFW",
      "internalURL": "https://snet-storage101.dfw1.clouddrive.com/v1/MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c",
      "tenantId": "MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c",
      "publicURL": "https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c"
    },
    {
      "region": "ORD",
      "internalURL": "https://snet-storage101.ord1.clouddrive.com/v1/MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c",
      "tenantId": "MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c",
      "publicURL": "https://storage101.ord1.clouddrive.com/v1/MossoCloudFS_9491081f-7e12-4f56-98d0-cdb3037c8d7c"
    }
  ]
</programlisting>
        </example>
      </section>
      <section xml:id="Delete_Object-d1e2264">
        <title>Delete Object</title>
        <para>&DELETE; operations on an object are used to permanently
          remove an object from the storage system (data and
          metadata).</para>
        <para>Deleting an object is processed immediately at the time
          of the request. Any subsequent &GET;, &HEAD;, &POST;, or
          &DELETE; operations will return a 404 (Not Found) error
          unless object versioning is on and other versions
          exist.</para>
        <para>Objects with the <code>X-Delete-At</code> or
            <code>X-Delete-After</code> header assigned are deleted
          within one day of the expiration time and the object is not
          served immediately after the expiration time. Refer to <link
            linkend="Expiring_Objects-e1e3228">Expiring Objects</link>
          for more details.</para>
        <example>
          <title>Object Delete Request</title>
          <programlisting>
  DELETE /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
</programlisting>
        </example>
        <para>No response body is returned. A status code of 204 (No
          Content) indicates success. Status code 404 (Not Found) is
          returned when the object does not exist.</para>
        <example>
          <title>Object Delete Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  Date: Thu, 07 Jun 2007 20:59:39 GMT
  Content-Type: text/plain; charset=UTF-8
              </programlisting>
        </example>
      </section>
      <section xml:id="Retrieve_Object_Metadata-d1e2301">
        <title>Retrieve Object Metadata</title>
        <para>&HEAD; operations on an object are used to retrieve
          object metadata and other standard HTTP headers.</para>
        <para>The only required header to be sent in the request is
          the authorization token.</para>
        <example>
          <title>Object Metadata Request</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
           </programlisting>
        </example>
        <para>No response body is returned. Metadata is returned as
          HTTP headers. A status code of 200 (OK) indicates success.
          Status 404 (Not Found) is returned when the object does not
          exist.</para>
        <para>
          <remark security="writeronly">JIRA ticket 1-/ 21 metadata /
            response clarity -- dsh 2012-03-07</remark> Note that the
          &HEAD; return code for an object is different than that of a
          container. &HEAD; requests do not return a message body in
          the response, so a 2xx status code denotes success. When a
          &HEAD; request is performed against the container, it
          queries the container databases, and it does not retrieve
          the content from them. Thus this returns the 204 (No
          Content) status code. However, when a &HEAD; request is
          performed against the object, it returns a 200 OK status
          code because it can view the content. </para>
        <example>
          <?dbfo keep-together="always"?>
          <title>Object Metadata Response</title>
          <programlisting>
  HTTP/1.1 200 OK
  Date: Thu, 07 Jun 2007 20:59:39 GMT
  Last-Modified: Fri, 12 Jun 2007 13:40:18 GMT
  ETag: 8a964ee2a5e88be344f36c22562a6486
  Content-Length: 512000
  Content-Type: text/plain; charset=UTF-8
  X-Object-Meta-Meat: Bacon
  X-Object-Meta-Fruit: Bacon
  X-Object-Meta-Veggie: Bacon
  X-Object-Meta-Dairy: Bacon
</programlisting>
        </example>
      </section>
      <section xml:id="Update_Object_Metadata-d1e2338">
        <title>Update Object Metadata</title>
        <para> You can set or update your custom metadata for existing
          objects by using a &POST; request to the object name.
          Metadata is set by using a header: <code>X-Object-Meta-XXXX:
            Foo</code> where <code>XXXX</code> is the custom field and
            <code>Foo</code> is the value. You can also set values for
            <code>X-Delete-At</code> and <code>X-Delete-After</code>
          to set expirations for objects. </para>
        <para> To remove previously-set object metadata, perform a
          &POST; request to the object name with
            <code>X-Remove-Object-Meta-XXXX: Foo</code> where
            <code>XXXX</code> is the name of your custom header.
            <code>Foo</code> is any term, and it will not be used. You
          must, however, send some value with the request. Otherwise,
          the metadata will not be removed. </para>
        <para>For information on working with metadata when copying
          objects, see <xref linkend="Copy_Object-d1e2241"/>.</para>
        <note>
          <title>Deleting Object Metadata</title>
          <para> All the object metadata is set at the same time. If
            you want to edit or remove one header, simply
              <command>POST</command> all other headers leaving out
            the header that you want to remove. This means that if you
            delete one entry without posting the others, the others
            will also be deleted at that time. </para>
          <para>To remove all metadata on an object, simply perform a
              <command>POST</command> request for the object with no
            metadata specified. However, to remove container metadata,
            you must send the header with an empty value.</para>
        </note>
        <example>
          <title>Update Object Metadata Request</title>
          <programlisting>  POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Object-Meta-Fruit: Apple
  X-Object-Meta-Veggie: Carrot
                     </programlisting>
        </example>
        <para>No response body is returned. A status code of 202
          (Accepted) indicates success. Status code 404 (Not Found) is
          returned if the requested object does not exist. </para>
        <example>
          <title>Update Object Metadata Response</title>
          <programlisting>
  HTTP/1.1 202 Accepted
  Date: Thu, 07 Jun 2007 20:59:39 GMT
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
                   </programlisting>
        </example>
      </section>
        <section xml:id="Bulk_Operations-d1e2338" >
        <title>Bulk Operations (Extract Archive and Bulk
          Delete)</title>
        <para>Bulk Operations involve middleware that conducts many
          operations on a single request.</para>
<!--          
          <remark>9-30-2013 cyr: The following note was originally requested by Chuck Thier, but David Goetz sent email saying not to make this doc change. He expects to make code changes at some point in the future to take care of this. </remark>
        <note>
          <para>Bulk operations can take a long time. They might cause
            client timeouts and require that you increase client
            timeout limits. </para>
        </note>
-->        
          <section xml:id="Extract_Archive-d1e2338">
          <title>Extract Archive</title>
          <para>Th Extract Archive request expands tar files into a
            Cloud Files account. The request must be a
              <command>PUT</command> with the query parameter
              <code>?extract-archive=format</code> specifying the
            format of archive file. Accepted formats are
              <code>tar</code>, <code>tar.gz</code>, and
              <code>tar.bz2</code>. </para>
          <para>For a <command>PUT</command>, use the following
            URL:</para>
          <para>
              /<code>v1/AUTH_Account/$UPLOAD_PATH?extract-archive=tar.gz
            </code></para>
          <para><code>UPLOAD_PATH</code> is the location where the
            files are expanded. An <code>UPLOAD_PATH</code> can be a
            container, a pseudo directory within a container, or an
            empty string. If the <code>UPLOAD_PATH</code> is an empty
            string, containers will be auto-created.</para>
          <para> The destination of a file in the archive is built as
            follows: </para>
          <para>
            <code>/v1/AUTH_Account/$UPLOAD_PATH/$FILE_PATH</code>
          </para>
          <para><code>FILE_PATH</code> is the file name from the
            listing in the tar file.</para>
          <para>Files in the tar that do not map to any container
            (files in the base directory) will be ignored.</para>
          <para>You can create up to 1,000 new containers per
            extraction request. Also note that only regular files will
            be uploaded. Objects such as empty directories and
            symlinks will not be uploaded.</para>
          <para>The responses from bulk operations are not like other
            Cloud Files responses because a short request body sent
            from the client could result in many operations on the
            proxy server and precautions need to be made to prevent
            the request from timing out due to a lack of activity. To
            this end, the client will always receive a 200 OK
            response, regardless of the actual success of the call.
            The body of the response, which can be delivered over a
            greater amount of time, must be parsed to determine the
            actual success of the operation. In addition the client
            may receive whitespace characters prepended to the
            response body while the proxy server is completing the
            request. </para>
          <para>The format of the response body defaults to text plain
            but can be either JSON or XML depending on the
              <code>Accept</code> header. Acceptable formats are
              <code>text/plain</code>, <code>application/json</code>,
              <code>application/xml</code>, and <code>text/xml</code>.
            The following example shows the response body, formatted
            in JSON, from a successful request. </para>
          <example>
            <title>Extract  Archive Response</title>
            <programlisting>
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json
X-Trans-Id: txa7fd1603cfe04bdb920cd-005191226d
Date: Mon, 13 May 2013 17:27:10 GMT
Transfer-Encoding: chunked

{
  "Number Files Created": 10,
  "Response Status": "201 Created",
  "Errors": [],
  "Response Body": ""
}
</programlisting>
          </example>
          <para>The example that follows shows the response with
            errors.</para>
          <example>
            <title>Extract Archive Response with Errors</title>
            <programlisting>
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json
X-Trans-Id: tx9f12e16f047049cc91147-005191245f
Date:  Mon, 13 May 2013 17:35:27 GMT
Transfer-Encoding: chunked

{
  "Number Files Created": 10,
  "Response Status": "400 Bad Request",
  "Errors": [
    [
      "/v1/AUTH_test/test_cont/big_file.wav",
      "413 Request Entity Too Large"
    ]
  ],
  "Response Body": ""
}
</programlisting>
          </example>
          <para>The list of errors is a list of tuples in the form
              <code>[object_path, error_response]</code>. The
              <code>object_path</code> given is the full path of where
            the object was to be put. The <code>error_response</code>
            is the failing HTTP status of the response for that
            individual <command>PUT</command>. After 1,000 errors,
            processing of the request will cease, and the completed
            response is returned. </para>
          <para>If all valid files were uploaded successfully, the
            response status will be a 201 Created. If any files failed
            to be created, the status code corresponds to the
            subrequest's error. Possible codes are 400, 401, and 502.
            In both cases, the response body specifies the number of
            files successfully uploaded and a list of the files that
            failed. </para>
          <note>
            <para>If you send a <code>Content-Type</code> on the
                <command>PUT</command> request, the specified
                <code>Content-Type</code> applies to every object in
              the archive. If you set <code>Content-Type</code> to a
              blank string, Cloud Files determines the
                <code>Content-Type</code> based on the individual file
              type. For example, if you have MIME type files, use a
              blank string for <code>Content-Type</code> to set the
              MIME type for files within the archive.</para>
          </note>
        </section>
          <section xml:id="Bulk_Delete-d1e2338">
          <title>Bulk Delete</title>
          <para>Bulk Delete request deletes multiple objects or
            containers from an account with a single request. A Bulk
            Delete request is a <command>DELETE</command> request with
            the query parameter <code>?bulk-delete set</code>. The
              <code>Content-Type</code> header of the request, if set,
            must be set to <code>text/plain</code>. The body of the
              <command>DELETE</command> request a newline-separated
            list of URL-encoded objects to delete. You can delete
            10,000 objects per request. The objects specified in the
              <command>DELETE</command> request body must be
            URL-encoded and in the form: </para>
          <para><code> /container_name/object_name</code>
          </para>
          <para>or for containers (which must be empty at time of
            delete)</para>
          <para>
            <code>/container_name</code>
          </para>
          <para>The response is similar to the Extract Archive
            responses in that every response will be 200 OK and the
            response body must be parsed for actual results. The
            following example shows the response body, formatted in
            JSON, from a successful request. </para>
          <example>
            <title>Bulk Delete Response</title>
            <programlisting>
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
X-Trans-Id: tx52fe4601dde24e2b8e7cb-0051912ca8
Date: Mon, 13 May 2013 18:10:48 GMT
Transfer-Encoding: chunked

{
  "Number Not Found": 1,
  "Response Status": "200 OK",
  "Errors": [],
  "Number Deleted": 10,
  "Response Body": ""
}
</programlisting>
          </example>
          <para>The example that follows shows the response with
            errors.</para>
          <example>
            <title>Bulk Delete Response with Errors</title>
            <programlisting>
HTTP/1.1 100 Continue

HTTP/1.1 200 OK
Content-Type: application/json; charset=UTF-8
X-Trans-Id: tx28552a8cd9cb441dad3ad-0051912d2d
Date: Mon, 13 May 2013 18:13:01 GMT
Transfer-Encoding: chunked

{
  "Number Not Found": 0,
  "Response Status": "400 Bad Request",
  "Errors": [
    [
      "/v1/AUTH_test/non_empty_container",
      "409 Conflict"
    ]
  ],
  "Number Deleted": 0,
  "Response Body": ""
}
</programlisting>
          </example>
          <para>If all items were successfully deleted (or did not
            exist), the status code is 200 OK. If any failed to
            delete, the status code corresponds to the subrequest's
            error. Possible codes are 400, 401, and 502. In all cases,
            the <code>Response Body</code> specifies the number of
            items successfully deleted or not found as well as a list
            of those that failed. The return body is formatted in the
            way specified in the request's <code>Accept</code> header.
            Acceptable formats are <code>text/plain</code>,
              <code>application/json</code>,
              <code>application/xml</code>, and <code>text/xml</code>. </para>
 <!-- <remark>cyr addition in response to Disqus comment - information from David Goetz </remark>          
          <note>
            <para>Although you can set the format in the request using
              either the query parameter <code>?format</code> or the
              Accept header, the Accept header is the method that
              works in all cases. The query parameter, for example
                <code>?format=json</code> was added and kept for
              backwards compatibility. However, the
                <code>?format</code> query parameter is not added to
              the bulk delete feature because it would be a
              continuation of the "2 ways to do one thing problem"
              that the query parameter caused.  </para>
          </note>
-->          
          <para>The list of errors is a list of tuples in the form
              <code>[object_path, error_response]</code>. The
              <code>object_path</code> is the full path of where the
            object (or container) was to be deleted. The
              <code>error_response</code> is the failing HTTP status
            of the response for that individual
              <command>DELETE</command>. </para>
        </section>
      </section>
    </section>
    </chapter>
    <chapter xml:id="API_Operations_for_CDN_Services-d1e2386">
    <title>API Operations for CDN Services</title>
      <info>
        <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
          <raxm:type>apiref</raxm:type>
          <raxm:product version="v1">files</raxm:product> 
          <raxm:priority>2</raxm:priority>
        </raxm:metadata> 
      </info>
    <para>This section describes the Cloud Files account and container
      API operations for the Content Delivery Network (CDN) services.
      All REST methods described below must be issued against the CDN
      management service as defined by the endpoints in the service
      catalog under <code>cloudFilesCDN</code> after successfully
      authenticating your account. For details about authentication,
      see <xref linkend="Authentication-d1e639"/>. </para>
    <para>A CDN-enabled container is a public container that is served
      by Akamai's Content Distribution Network. The files in a
      CDN-enabled container are publicly accessible and do not require
      an authentication token for read access. However, uploading
      content into a CDN-enabled container is a secure operation and
      does require a valid authentication token. (Private containers
      are not CDN-enabled and the files in a private container are not
      publicly accessible.)</para>
    <section xml:id="CDN_Account_Operations-d1e2397">
      <title>CDN Account Services</title>
      <para>
        <remark security="writeronly">Added opening line and rephrased second -- dsh -
          2012-03-09</remark> The following operations may be performed
        at the account level of the CDN account. The operations
        conform to the following format:</para>
      <example>
        <title>CDN HTTP Request: General Structure</title>
        <literallayout class="monospaced">
  <replaceable>HTTP_METHOD_NAME</replaceable> /v1/&lt;<replaceable>account</replaceable>&gt; HTTP\1.1
                </literallayout>
      </example>
      <section xml:id="List_CDN-Enabled_Containers-d1e2414">
        <title>List CDN-Enabled Containers</title>
        <para>&GET; operations against the <code>cloudFilesCDN</code>
          endpoints for an account retrieve a list of CDN-enabled
          containers. (See <xref
            linkend="cloudfileCDN-service-catalog-de100"/>.) The &GET;
          operation for the CDN management service allows the
          following query parameters to control the information that
          is displayed:</para>
        <variablelist>
          <title>Query Parameters</title>
          <varlistentry>
            <term><code>limit</code></term>
            <listitem>
              <para>For an integer <inlineequation>
                  <mathphrase><emphasis>n</emphasis></mathphrase>
                </inlineequation>, limits the number of results to <inlineequation>
                  <mathphrase><emphasis>n</emphasis></mathphrase>
                </inlineequation> values.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>marker</code></term>
            <listitem>
              <para>Given a string <inlineequation>
                  <mathphrase><emphasis>x</emphasis></mathphrase>
                </inlineequation>, returns object names greater than
                the specified marker. Only strings using UTF-8
                encoding are valid.
                <!--02-03-12 dsh:  Note re: UTF / 8 for transparency JI/RA DOC-98  --></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>end_marker</code></term>
            <listitem>
              <para>Given a string <inlineequation>
                  <mathphrase><emphasis>x</emphasis></mathphrase>
                </inlineequation>, returns container names less than
                the specified end marker. Only strings using UTF-8
                encoding are valid.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>format</code></term>
            <listitem>
              <para>Specify either <code>json</code> or
                  <code>xml</code> to return the respective serialized
                response.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><code>enabled_only</code></term>
            <listitem>
              <para>Set to <code>true</code> to return only
                CDN-enabled containers.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>Using the <code>format</code> query parameter, you can
          request the output in a serialized format in either JSON or
          XML.</para>
        <para>Using <code>limit</code> and <code>marker</code>
          provides a mechanism to iterate through the entire list of
          containers. Keep in mind that the value for marker needs to
          be URL-encoded before issuing the request.</para>
        <para>Cloud Files provides filtering support to return only
          the list of containers that are CDN-enabled. Passing the
          query parameter <code>?enabled_only=true</code> suppresses
          any private (non-CDN-enabled) containers from appearing in
          the list.</para>
        <para>The list of CDN-enabled containers is returned in the
          response body, one container name per line.</para>
        <example>
          <?dbfo keep-together="always"?>
          <title>CDN-Enabled Containers List Request</title>
          <programlisting>
  GET /&lt;api version&gt;/&lt;account&gt;?enabled_only=true HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                  </programlisting>
        </example>
        <para>A list of containers is returned in the response body,
          one container per line. A 204 (No Content) HTTP status code
          is passed back if the account has no containers.</para>
        <example>
          <title>CDN-Enabled Containers List Response</title>
          <programlisting>
  HTTP/1.1 200 OK
  Date: Thu, 08 Sep 2011 14:35:45 GMT
  Transfer-Encoding: chunked
  Content-Type: text/plain
                   
  images
  movies
                  </programlisting>
        </example>
        <section xml:id="CDN_Container_Details-d1e2566">
          <title>View CDN Container Details</title>
          <para>You can view CDN-enabled container details by
            performing a <command>HEAD</command> request on a
            container where the <code>Host</code> is one of the
              <code>cdnCloudFiles</code> service access endpoints from
            the service catalog (see <xref
              linkend="cloudfileCDN-service-catalog-de100"/>). This
            returns all the header information, including the
            following: <itemizedlist>
              <listitem>
                <para>CDN streaming URI
                    (<code>X-Cdn-Streaming-Uri</code>)</para>
              </listitem>
              <listitem>
                <para>CDN SSL URI (<code>X-Cdn-Ssl-Uri</code>)</para>
              </listitem>
              <listitem>
                <para>CDN URI (<code>X-Cdn-Uri</code>)</para>
              </listitem>
            </itemizedlist></para>
          <note><para>Remember that your <command>HEAD</command> request must be on
              the CDN host (i.e., <code>cdn.clouddrive.com</code>).
              Otherwise, you will see the metadata for your private
              container as described in <xref
                linkend="View-Container_Info-d1e1285"/>. </para> </note>
          <para> Additionally, you can format the returned information
            in either XML or JSON by appending
              <code>?format=xml</code> or <code>?format=json</code> to
            your request. </para>
          <para>A 204 (No Content) HTTP status code is returned if the
            account has no containers. Otherwise, status code of 200
            (OK) is returned.</para>
          <example>
            <title>CDN-Enabled Container Details Request: JSON </title>
            <programlisting>
  HEAD /v1/&lt;account&gt;/&lt;container_name&gt;?format=json
  Host: cdn.clouddrive.com
  X-Auth-Token: &lt;your_auth_token&gt;
                    </programlisting>
          </example>
          <example>
            <title>CDN-Enabled Container Details Response: JSON </title>
            <programlisting>
  HTTP/1.1 200 OK
  Date: Tue, 30 Oct 2012 14:41:29 GMT
  Content-Length: 127
  Content-Type: application/json; charset=utf-8
 
  [
  {"name":"test_container",
   "cdn_enabled":"true",
   "ttl":28800,
   "log_retention":"true",
   "cdn_uri":"http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com",
   "cdn_ssl_uri":"https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1.ssl.stg2.rackcdn.com",
   "cdn_streaming_uri":"http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com"}
  ]
                       </programlisting>
          </example>
          <example>
            <?dbfo keep-together="always"?>
            <title>CDN-Enabled Container Details Request: XML</title>
            <programlisting>
  HEAD /v1/&lt;account&gt;/&lt;container_name&gt;?format=xml
  Host: cdn.clouddrive.com
  X-Auth-Token: &lt;your_auth_token&gt;
                 </programlisting>
          </example>
          <example>
            <title>CDN-Enabled Container Details Response: XML</title>
            <programlisting>
  HTTP/1.1 200 OK
  Date: Tue, 30 Oct 2012 17:57:28 GMT
  Content-Length: 267
  Content-Type: application/xml; charset=utf-8
            
  &lt;?xml version="1.0" encoding="UTF-8"?&gt;
  &lt;account name="WidgetsRUs.button"&gt;
    &lt;container&gt;
        &lt;name&gt;images&lt;/name&gt;
        &lt;cdn_enabled&gt;True&lt;/cdn_enabled&gt;
        &lt;ttl&gt;86400&lt;/ttl&gt;
        &lt;log_retention&gt;True&lt;/log_retention&gt;
        &lt;cdn_url&gt;
            http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com
        &lt;/cdn_url&gt;
        &lt;cdn_ssl_url&gt;
            https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1.ssl.stg2.rackcdn.com
        &lt;/cdn_ssl_url&gt;
        &lt;cdn_streaming_url&gt;
            http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
        &lt;/cdn_streaming_url&gt;
   &lt;/container&gt;
  &lt;/account&gt;
                                  </programlisting>
          </example>
        </section>
      </section>
    </section>
    <?hard-pagebreak?>
    <section xml:id="CDN_Container_Services-d1e2632">
      <title>CDN Container Services</title>
      <para>This section documents the REST operations for the CDN
        management service that can be performed on containers. All
        operations are valid HTTP methods and resemble this
        format:</para>
      <example>
        <title>CDN-Enabled Container HTTP Request: General
          Structure</title>
        <literallayout class="monospaced">
  <replaceable>METHOD-NAME</replaceable> /v1/&lt;<replaceable>account</replaceable>&gt;/&lt;<replaceable>container</replaceable>&gt; HTTP/1.1
                </literallayout>
      </example>
      <para>
        <remark security="writeronly">2012-03-09 dsh: Reworked these
          two paragraphs to clarify connection between CDN and Storage
          URLs</remark> When you CDN-enable a container, all the
        objects within it become available on the CDN. Similarly, once
        a container is CDN-enabled, any objects added to it through
        the storage service become CDN-enabled. After you CDN-enable a
        container, its publicly-available URL can be found with the
        header <code>X-Cdn-Uri</code>, and its objects may be accessed
        at <code>X-Cdn-Uri/objectName</code>. By knowing this pattern,
        you can pre-generate the URL for an object before it is added
        to the container. </para>
      <para> When you enable a container in the CDN service, you
        automatically generate URLs for SSL and streaming usage. They
        are listed under the <code>X-Cdn-Ssl-Uri</code> and
          <code>X-Cdn-Streaming-Uri</code> headers, respectively. </para>
      
      <para> On August 13, 2012, the format of new CDN URLs changed in
        order to enhance the security of the Content Delivery Network.
        Any URLs set in the older format
          (<code>http://c25810.r10.cf1.rackcdn.com/mydog.jpg</code>)
        will continue to work. However, any newly generated CDN URLs
        will have the new format:
          <code>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.
          r10.cf1.rackcdn.com/mydog.jpg</code>. </para>
      
      <note><title>Note on CDN Charges</title>
        <para> Keep an eye on your CDN charges. When you CDN-enable a
          container, not only can anyone view it, but anyone can link
          to it. Rackspace recommends that you monitor your bandwidth
          usage and charges in the Cloud Control Panel. This way, you
          know if someone is hot linking your content. See the
          Knowledge Center article <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/protect-your-cloud-files-cdn-bill-from-unexpected-usage-0"
            > "Protect your Cloud Files CDN Bill from Unexpected
            Usage"</link> for helpful instructions for keeping
          yourself informed about your usage charges. </para>
      </note>



      <section xml:id="CDN-Enable_a_Container-d1e2665">
        <title>CDN-Enable a Container</title>
        <para>
          <remark security="writeronly">Reworked this section to
            highlight TTL -- dsh - 2012-03-12</remark>Before a
          container can be CDN-enabled, it must exist in the storage
          system. To CDN-enable the container, perform &PUT; request
          against it using the <code>publicURL</code> noted in the
          service catalog for Cloud Files during Authentication and
          set the <code>X-CDN-Enabled</code> header to TRUE. <xref
            linkend="cloudfileCDN-service-catalog-de100"/> provides an
          example of the information in the service catalog for
            <code>cloudfilesCDN</code>. (In the examples below, the
            <code>publicURL</code> used is
            <code>cdn.clouddrive.com</code>.) When a container is
          CDN-enabled, any objects stored in it are publicly
          accessible over the content delivery network by combining
          the container's CDN URL with the object name
            (<code>X-CDN-URI/objectName</code>). </para>
        <note>
          <para>The examples in this guide use
              <code>cdn.clouddrive.com</code> for an endpoint, but you
            should use whatever your authentication request provides
              (<code>cdn, cdn1, cdn2, or cdn3</code>). </para>
        </note>
        <example xml:id="cloudfileCDN-service-catalog-de100">
          <title>cloudfilesCDN Section of the Service Catalog</title>
        
        <programlisting>
  "access": {
        "serviceCatalog": [
            {
                "endpoints": [
                    {
                        "publicURL": "https://cdn1.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321", 
                        "region": "DFW", 
                        "tenantId": "MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
                    }, 
                    {
                        "publicURL": "https://cdn5.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321", 
                        "region": "IAD", 
                        "tenantId": "MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
                    }, 
                    {
                        "publicURL": "https://cdn2.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321", 
                        "region": "ORD", 
                        "tenantId": "MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
                    }, 
                    {
                        "publicURL": "https://cdn4.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321", 
                        "region": "SYD", 
                        "tenantId": "MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
                    }, 
                    {
                        "publicURL": "https://cdn6.clouddrive.com/v1/MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321", 
                        "region": "HKG", 
                        "tenantId": "MossoCloudFS_0672d7fa-9f85-4a81-a3ab-adb66a880321"
                    }
                ], 
                "name": "cloudFilesCDN", 
                "type": "rax:object-cdn"
            }
      </programlisting></example>
        <para>Any CDN-accessed objects are cached in the CDN for the
          specified amount of time called the Time To Live (TTL). The
          default TTL value is 259200 seconds, or 72 hours. Each time
          the object is accessed after the TTL expires, the CDN
          refetches and caches the object for the next TTL period. </para>
        <para>You can specify the TTL for an object by including the
          HTTP header <code>X-TTL: &lt;integer_seconds&gt;</code>.
          Setting the TTL is the same as setting the HTTP
            <code>Expires</code> and <code>Cache-Control</code>
          headers for the cached object. The minimum TTL is 15 minutes
          (900 seconds) and the maximum is 50 years for a range of 900
          to 1576800000 seconds. However, setting a TTL for a long
          time does not guarantee that the content stays populated on
          CDN edge servers for the entire period. The most popular
          objects stay cached based on the edge location's logic. </para>
        <note><title>Note</title>
        <para> On August 13, 2012, the maximum TTL was set to 31536000
            (one year). If you set new TTL values to a greater time
            frame, your object will still expire at the one-year mark.
            However, if you already had a greater TTL value set on an
            object, it will expire at the time you originally set. </para>
        </note>
        <example>
          <title>Container CDN-Enable Request</title>
          <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Ttl: 2592000
  X-Cdn-Enabled: True
            </programlisting>
        </example>
        <para>No content is returned. A status code of 201 (Created)
          indicates that the container was CDN-enabled as requested.
          The response contains an HTTP <code>X-Cdn-Uri</code> header
          to indicate the URI that you can combine with object names
          to serve objects through the CDN. If the container is
          already CDN-enabled, a 202 (Accepted) status code is
          returned and the TTL is adjusted.</para>
        <example>
          <title>Container CDN-Enable Response </title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
                     </programlisting>
        </example>
        <para>
          <remark security="writeronly">2012-03-07 dsh: JIRA doc
            ticket / 1-2-6 regards C / DN disable</remark> In order to
          remove the container from the CDN, change the
            <code>X-CDN-Enabled</code> flag to <code>False</code>, as
          in the request below. However, please note that objects
          remain on the CDN edge server and are served to the public
          until their TTL expires. </para>
        <example>
          <title>Container CDN-Disable Request</title>
        
        <programlisting>
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-TTL: 2592000
  X-CDN-Enabled: False
                   </programlisting></example>
      </section>
      <section xml:id="List_CDN-Enabled_Container_Metadata-d1e2711">
        <title>List a CDN-Enabled Container's Metadata</title>
        <para>A &HEAD; operation against a CDN-enabled container is
          used to retrieve the CDN attributes of the container.</para>
        <para>If the container is (or ever has been) CDN-enabled, the
          following headers are returned in the response as shown in
            <xref linkend="CDN-Container-Metadata-Response-d1e001"/>:<itemizedlist>
            <listitem>
              <para><code>X-Cdn-Uri</code>: can be combined with any
                object name within the container to form the publicly
                accessible URI for that object for distribution over a
                CDN system</para>
            </listitem>
            <listitem>
              <para><code>X-Ttl</code>: specifies the value is the
                number of seconds that the object is cached in the CDN
                system before being refetched</para>
            </listitem>
            <listitem>
              <para><code>X-Cdn-Enabled</code>: <code>True</code> or
                  <code>False</code> to specify whether the container
                is currently marked to allow public serving of objects
                through CDN </para>
            </listitem>
            <listitem>
              <para><code>X-Log-Retention</code>: <code>True</code> or
                  <code>False</code> to specify whether the CDN access
                logs should be collected and stored in the Cloud Files
                storage system</para>
            </listitem>
            <listitem>
              <para><code>X-Cdn-Ssl-Uri</code>: specifies SSL is
                available for the container</para>
            </listitem>
            <listitem>
              <para><code>X-Cdn-Streaming-Uri</code>: specifies the
                URI for streaming</para>
            </listitem>
          </itemizedlist></para>
        <example>
          <title>CDN-Enabled Container Metadata Request</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
             </programlisting>
        </example>
        <para>The HTTP status code is 204 (No Content) if the
          container exists, and 404 (Not Found) if it does not.  </para>
        <example  xml:id="CDN-Container-Metadata-Response-d1e001">
          <title>CDN-Enabled Container Metadata Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1.
    ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1.
    r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d
    659bfc1ac1.r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
                 </programlisting>
        </example>
      </section>
      <section
        xml:id="Purge_CDN-Enabled_Containers_or_Objects-d1e2747">
        <title>Purge CDN-Enabled Containers</title>
        <para>Rackspace can remove, or purge, a CDN-enabled container
          from the network. You can either wait for the TTL to expire,
          or you can request the purge of an entire container. Once
          you have made the request to Rackspace through a support
          ticket, the system purges the object from the CDN, and sends
          an email to the address (or multiple addresses) that you
          indicate through the ticket. The email address notification
          is optional.</para>
        <note>
          <para>In order to remove the container from the CDN, change
            the <code>X-CDN-Enabled</code> flag to <code>False</code>
            as shown in <xref linkend="CDN-Enable_a_Container-d1e2665"
            />. </para>
        </note>
      </section>
      <section xml:id="Update_CDN-Enabled_Container_Metadata-d1e2787">
        <title>Update CDN-Enabled Container Metadata</title>
        <para>You can use a &POST; request against a CDN-enabled
          container to adjust some CDN attributes.  You can change
          only the following metadata on a CDN-enabled container: <itemizedlist>
            <listitem>
              <para><code>X-Log-Retention</code>: <code>True</code> or
                  <code>False</code> to specify whether the CDN access
                logs should be collected and stored in the Cloud Files
                storage system</para>
            </listitem>
            <listitem>
              <para><code>X-CDN-enabled</code>:<code>True</code> or
                  <code>False</code>to enable or disable public
                sharing over the CDN. Keep in mind that if you have
                content currently cached in the CDN, setting your
                container back to private will NOT purge the CDN
                cache. You have to wait for the TTL to expire. </para>
            </listitem>
            <listitem>
              <para><code>X-TTL</code>: to specify a TTL value in
                seconds</para>
            </listitem>
          </itemizedlist></para>
        <example>
          <title>Update CDN-Enabled Container Metadata Request</title>
          <programlisting>
  POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-TTL: 86400
  X-CDN-Enabled: True
  X-Log-Retention: True
                  </programlisting>
        </example>
        <para>No content is returned. A status code of 204 (No
          Content) indicates success. Status code 404 (Not Found) is
          returned if the requested container was not found. </para>
        <example>
          <title>Update CDN-Enabled Container Metadata
            Response</title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
              </programlisting>
        </example>
      </section>
      <section xml:id="CDN-Enabled_Containers_Served_via_SSL-d1e2821">
        <title>CDN-Enabled Containers Served through SSL</title>
        <para>A &HEAD; operation against a CDN-enabled container can
          also return an SSL URI, <code>X-CDN-SSL-URI</code>, in
          addition to the CDN Management URI,  <code>X-CDN-URI</code>.
          The CDN streaming URI, <code>X-CDN-STREAMING-URI</code>, is
          also returned. This feature enables you to use https
          protocol in URIs used for requesting objects stored in
          CDN-enabled containers. </para>
        <example>
          <title>CDN-Enabled Container Metadata Request with
            SSL</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                     </programlisting>
        </example>
        <para>No content is returned. A status code of 204 (No
          Content) indicates success. Status code 404 (Not Found) is
          returned if the requested container was not found. </para>
        <example>
          <title>CDN-Enabled Container Metadata Response with
            SSL</title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
                 </programlisting>
        </example>
      </section>
      <section xml:id="Streaming-CDN-Enabled_Containers-d1f3721">
        <title>Streaming CDN-Enabled Containers </title>
        <para>A &HEAD; operation against a CDN-enabled container
          returns the streaming URI, <code>X-Cdn-Streaming-Uri</code>.
          Like the SSL URI, <code>X-Cdn-Ssl-Uri</code>, streaming is
          always enabled, and you use the streaming URI for links to
          content that you want to stream, such as video. </para>
        <para>For information about streaming to iOS devices, see
            <xref linkend="iOS-Streaming-d1f3725"/>.</para>
        <note>
          <para>Streaming is a method of relaying data, such as  video
            and audio material, over the network as a steady
            continuous stream, allowing playback to proceed while
            subsequent data is being received.</para>
        </note>
        <example>
          <title>CDN-Enabled Container Metadata Request with Streaming
            Enabled</title>
          <programlisting>
  HEAD /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
                </programlisting>
        </example>
        <para>No content is returned. A status code of 204 (No
          Content) indicates success. Status code 404 (Not Found) is
          returned if the requested container was not found. </para>
        <example>
          <title>CDN-Enabled Container Metadata Response with
            Streaming Enabled</title>
          <programlisting>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Ios-Uri: http://fb1ca9de5ff9525ff6f8-64e65126753c56b595824f56d25789bb.iosr.cf1.rackcdn.com
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Cdn-Ssl-Uri: https://2cb7edde3eac1dd66ea4-64e65126753c56b595824f56d25789bb.ssl.cf1.rackcdn.com
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.co
  X-Log-Retention: False
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
                   </programlisting>
        </example>
      </section>
      
      
      <!-- -->
      
      <section xml:id="iOS-Streaming-d1f3725">
        <title>iOS Streaming</title>
        <para>The Cloud Files CDN allows you to stream video to iOS
          devices without needing to convert your video. Once you
          CDN-enable your container, you have the tools necessary for
          streaming media to multiple devices. To leverage this
          ability, you must check the client's User Agent with
          JavaScript. An example of the User Agent check and how to
          use it is given below. </para>
        
        <para> First, CDN-enable your container. See <xref
            linkend="CDN-Enable_a_Container-d1e2665"
            xrefstyle="select:label quotedtitle nopage"/> for
          instructions. Two streaming URIs are created: the
          container's streaming URI (<code>X-Cdn-Streaming-Uri</code>)
          and its iOS streaming URI (<code>X-Cdn-Ios-Uri</code>).
          Perform a &HEAD; request against the CDN-enabled container
          to view these URIs. </para>
       
        <para> Second, link to your content in a HTML page using a
            <code>&lt;video></code> element. Set the SRC attribute of
          the VIDEO element to the full streaming URI for your
          container plus the name of your content. In the below
          example, the streaming video is MobyDick.mp4. </para>
        
        <example>
          <title>HTML 5 Video Element</title>
          <programlisting>
  &lt;video width=”640” height=”480” id="videotag"&gt;
	 &lt;source src=”http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1.
	 r49.stream.cf0.rackcdn.com/MobyDick.mp4” /&gt;
  &lt;/video&gt;
                      </programlisting>
        </example>
            
        <para> Third, add JavaScript to the <code>&lt;head></code>
          element of your HTML page to check if the User Agent is an
          iOS device. If it is, the JavaScript should use the
          container's iOS streaming URI (<code>x-Cdn-Ios-Uri</code>)
          instead of the regular streaming URI. The Cloud Files CDN
          delivers the properly formatted content for iOS devices only
          when the iOS streaming URI is used. Here, the JavaScript
          sets the SRC attribute of the <code>&lt;video></code>
          element <code>videotag</code> to the iOS Streaming URI.
          Remember to add your content's name to the end of the iOS
          streaming URI. </para>
            
        <example>
          <title>JavaScript for User Agent Check</title>
  
        <programlisting>
&lt;script type=”text/javascript”&gt;

    function isIOS(){
        return ((navigator.userAgent.match(/iPhone/i)) ||(navigator.userAgent.match(/iPod/i)) || (navigator.userAgent.match(/iPad/
i))) != null;
    }

    function init(){
        if (isIOS()){
           document.getElementById(“videotag”).src = “http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1.
           iosr.cf0.rackcdn.com/MobyDick.mp4”;
        }
    }

&lt;/script&gt;
               </programlisting>      </example>
        
        <para> Finally, add <code>init()</code> to the
            <code>&lt;body></code> element of your HTML page to call
          the User Agent check when the page loads. </para>
        
        <example>
          <title>Load JavaScript in HTML page</title>
          <programlisting>
  &lt;body onload=”init()”&gt;
                 </programlisting>
        </example>
        
        <para> With these pieces of code in place, the proper content
          streams will be set for iOS devices. </para>

      </section>
      
      <!-- -->
      
      
    </section>
    <section xml:id="CDN_Object_Services">
      <title>CDN Object Services</title>
      <para>This section documents the REST operations for the CDN
        management service that you can perform on objects. Any object
        stored in a CDN-enabled container is publicly accessible over
        a CDN by combining the container's CDN URI with the object
        name. Any object accessed is cached in the CDN for the Time To
        Live (TTL) value (which is specified in number of seconds).
        The default is 72 hours (259200 seconds). On the next access
        after the TTL expiration, the CDN re-fetches the object and
        caches it until the TTL expires again. The minimum TTL is 15
        minutes (900 seconds). The maximum TTL is 1 year (31536000
        seconds). If you set a maximum TTL greater than 1 year, your
        object still expires at the one-year mark.</para>
      <note>
        <title>Note</title>
        <para> Before August 13, 2012, the maximum TTL was 50 years
          (1577836800 seconds).  If you set a maximum TTL value on an
          object before August 13, 2012 that was greater than 1 year
          and equal to or less than 50 years, your object expires at
          the time you originally set. </para>
      </note>
      <section xml:id="Purge_CDN-Enabled_Objects-d1e3858">
        <title>Purge CDN-Enabled Objects</title>
        <para>When you find it necessary to remove a CDN-enabled
          object from public access before the TTL expires, you can
          perform &DELETE; operations against the object. You should
          limit object purges to situations where there could be
          serious personal, business, or security consequences if it
          remained publicly accessible on the CDN. For example,
          someone published your company's quarterly earnings too
          early. You can manually purge CDN-enabled objects without
          having to wait for the TTL to expire, and you can optionally
          be notified by email that the object has been purged.
          However, you can only &DELETE; up to 25 objects per day
          using the API. An attempt to delete more objects results in
          a 498 (Rate Limited) status code. </para>
        <para> Following are the two ways you can purge objects from
          the CDN: <itemizedlist>
            <listitem>
              <para>By using &DELETE; in the API </para>
            </listitem>
            <listitem>
              <para>By creating a support ticket to purge an entire
                container</para>
              <para>The 25-object limit does not apply when purging an
                entire container through Support.</para>
            </listitem>
          </itemizedlist></para>
        <note>
          <para>To prevent the container from going back to the CDN,
            first change the <code>X-CDN-Enabled</code> flag to
              <code>False</code> as shown in <xref
              linkend="CDN-Enable_a_Container-d1e2665"/></para>
        </note>
        <example>
          <title>Purge CDN-Enabled Object</title>
          <programlisting>
  DELETE /&lt;api version&gt;/&lt;account&gt;/&lt;object&gt; HTTP/1.1
  Host: cdn.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Purge-Email: user@domain.com, user2@domain.com
                     </programlisting>
        </example>
        <para>The system purges the object from the CDN and sends an
          email to the indicated address or addresses.  If you want to
          notify more than one person about the deletion, you can
          enter a comma-separated list of addresses. The email address
          is optional. </para>
        <para>A status code of 204 (No Content) indicates success.
          Status code 404 (Not Found) indicates that requested
          CDN-enabled object was not found. Status code 403
          (Forbidden) indicates that an authorization problem
          occurred. </para>
        <para>The CDN URI is returned in the HTTP header,
            <code>X-CDN-URI</code>. </para>
        <para>Purging objects may take a long time because there are
          so many edge servers around the globe. So please be patient
          while waiting for a response. </para>
        <example>
          <title>Purge CDN-Enabled Object Response </title>
          <programlisting>
  HTTP/1.1 204 No Content
  Date: Thu, 13 Jan 2010 18:57:07 GMT
  Content-Length: 0
  Content-Type: text/plain; charset=UTF-8
    </programlisting>
        </example>
      </section>
    </section>
    <section xml:id="StaticWeb">
      <title>Static Web Services</title>
      <para>
        <remark security="writeronly">2012-05-14 dsh: Added for
          2012-05-14 release</remark> This section shows how you can
        use your CDN-enabled containers to create static websites in
        Cloud Files. </para>
      <section xml:id="Create_Static_Website-dle4000">
        <title>Create Static Website</title>
        <para> You can use your Cloud Files account to create a static
          website. First, you must CDN-enable a storage container. Any
          HTML or static web pages in the container become available
          through a static website once you set the
            <code>X-Container-Meta-Web-Index</code> header to
            <code>index.html</code> or other index page of your
          choice. You can also create subdirectories in your website
          by creating pseudo directories, as outlined in <xref
            linkend="Pseudo-Hierarchical_Folders_Directories-d1e1580"
          />. Each pseudo directory becomes a subdirectory in the
          website. </para>
        <para> The page you set for
            <code>X-Container-Meta-Web-Index</code> becomes the index
          page for every subdirectory in your website. Each of your
          pseudo directories should contain a file with that name. So,
          if you set <code>X-Container-Meta-Web-Index</code> to
            <code>index.html</code>, you should have an index.html
          page in each pseudo directory. For example, suppose that you
          have a <code>subdir</code> pseudo directory. If you do not
          have an index.html page in <code>subdir</code>, visits to
            <code>myhost/subdir/</code> return a status code 404 (Not
          Found). </para>
        <remark security="writeronly">2013-08-23 cyr: Added based on
          email from Rick Hawkins: "Specifically these are the headers
          relating to Static Web which I did not find in our
          documentation: X-Container-Meta-Web-Listings: true
          X-Container-Meta-Web-Listings-CSS: listing.css
          X-Container-Meta-Web-Directory-Type"  </remark>
        <para>You also have the option of displaying a list of HTML
          files in your pseudo directory, instead of a web page. You
          do this by setting the
            <code>X-Container-Meta-Web-Listings</code> header to
            <code>True</code>. If listings are enabled, you can add
          styles to your file list by setting
            <code>X-Container-Meta-Web-Listings-CSS</code> to a style
          sheet. For example, setting
            <code>X-Container-Meta-Web-Listings-CSS:
            listing.css</code> makes listings link to  the listing.css
          style sheet. If you view source in your browser on a listing
          page, you will see the well defined document structure that
          can be styled.</para>
        <para>You can modify the <code>Content-Type</code> of
          directory marker objects by setting the
            <code>X-Container-Meta-Web-Directory-Type</code> header.
          If this header is not set,
            <code>application/directory</code> is used by default.
          Directory marker objects are 0-byte objects that represent
          directories to create a simulated hierarchical
          structure.</para>
        <para>
          <remark security="writeronly">2012-08-13 dsh: Added to
            clarify CNAME based on Disqus comments </remark>The
          instructions below describe using a CNAME with your DNS
          Server (or name server). This is the domain name of your
          site (such as www.rackspace.com). Your CNAME is set up with
          your individual DNS Server, for which the directions are
          outside the scope of this documentation. Once you have your
          CNAME established, set the CNAME to your Cloud Files CDN URI
          to get your site up and running on the Web. </para>
        
        
        
        
        
        <orderedlist>
          <title>Set up a Static Website </title>
          <para>
            The following list gives the step-by-step instructions for setting up a Static Website.
          </para>
          <listitem> 
            <para>Upload your pages to a container. </para>
          </listitem>
          <listitem>
            <para>Set the index (or primary page) for your website by
              performing a &POST; to the header
                <code>X-Container-Meta-Web-Index</code> on your
              website's container. See the example below, but remember
              to change the <code>X-Auth-Token</code> to your
              authentication token. You must write your storage URL
              and the container name to properly point to the
              container (&lt;storage URL&gt;&lt;container name&gt;) </para>
            <para> You get your Auth token when you authenticate your
              session as shown in <xref
                linkend="Authentication-d1e639"
                xrefstyle="select:label quotedtitle nopage"/>. </para>
          </listitem>
          <listitem>
            <para>CDN-Enable your container as shown in <xref
                linkend="CDN-Enable_a_Container-d1e2665"
                xrefstyle="select:label quotedtitle nopage"/>. </para>
          </listitem>
          <listitem>
            <para>Go to your domain host and set up a CNAME using your
              CDN URI (<code>X-Cdn-Uri</code>). The CNAME is the
              domain or branded URI you use instead of the CDN URI. If
              you need to find your CDN URI, perform a &GET; to
                <code>cdn.clouddrive.com</code> as shown in <xref
                linkend="CDN_Container_Details-d1e2566"
                xrefstyle="select:label quotedtitle nopage"/>. </para>
          </listitem>
          <listitem>
            <para> To view your website online, visit your CDN URI or
              your CNAME domain. </para>
          </listitem>
        </orderedlist>
        <example>
            <title>Set up Static Web</title>
          <programlisting language="bash">
curl -X POST -H "X-Container-Meta-Web-Index: index.html" -H "X-Auth-Token: XXX" "https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_a55df/MyLibrary/        
  </programlisting>
        </example>
               <para>After your container has an index page set and
          your domain host has your CNAME recorded, your static
          website is ready. </para>
        <example>
          <title>Container Setup for Static Website</title>
          <programlisting>
  container/index.html
  container/page2.html
  container/subdir/index.html
  container/subdir/pageX.html
            </programlisting>
        </example>
        <para> In the results below, the user's CNAME is myhost, and
          the <code>X-Container-Meta-Web-Index</code> is set to index.html.
          The results on the right of the example are the pages that
          display in the Web browser. </para>
        <example>
          <title>Static Website Enabled Container Results</title>
          <programlisting>
  http://myhost                     Displays container/index.html
  http://myhost/page2.html          Displays container/page2.html
  http://myhost/subdir              Displays container/subdir/index.html
  http://myhost/subdir/             Displays container/subdir/index.html
  http://myhost/subdir/pageX.html   Displays container/subdir/pageX.html
             </programlisting>
        </example>
      </section>
      
      <section xml:id="Set_Error_Pages_for_Static_Website-dle4005">
        <title>Set Error Pages for Static Website</title>
        <para>
          <remark security="writeronly">2012-05-14 dsh: Added for
            2012-05-14 release </remark> You can create and set custom
          error pages for visitors to your website. To do this, set
          the metadata header <code>X-Container-Meta-Web-Error</code>.
          Currently, only 401 (Unauthorized) and 404 (Not Found)
          status codes are supported. </para>
        <para> Error pages are served with the status code prepended
          to the name of the error page you set. For instance, if you
          set <code>X-Container-Meta-Web-Error</code> to
            <code>error.html</code>, 401 errors display the page
            <code>401error.html</code>. Similarly, 404 errors display
            <code>404error.html</code>. You must have both of these
          pages created in your container when you set the
            <code>X-Container-Meta-Web-Error</code> metadata, or your
          site will display generic error pages. </para>
        <para>Set the <code>X-Container-Meta-Web-Error</code> metadata
          once for your entire static website. </para>
        <example>
          <title>Set Error Pages for Static Website</title>
          <programlisting>
  POST /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Container-Meta-Web-Error: error.html            
        </programlisting>
        </example>
        <para> Any class 200 status codes indicate success. </para>
      </section>
    </section>
    </chapter>
    
    
    <chapter xml:id="Public_Access_to_Account-d1a4440">
      <title>Public Access to Your Cloud Files Account</title>
      <info>
        <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
            <raxm:type>concept</raxm:type>
            <raxm:product version="v1">files</raxm:product> 
          <raxm:priority>4</raxm:priority>
        </raxm:metadata> 
      </info>
      <para> This section describes ways that you can allow others to
      put or retrieve objects from your Cloud Files account. With the
      methods described here, users do not need your password or login
      information in order to have access to your account. </para>
      <section xml:id="TempURL-d1a4450">
        <title>TempURL </title>
        <para> The Temporary URL feature (TempURL) allows you to
        create limited-time Internet addresses that allow you to grant
        limited access to your Cloud Files account. Using TempURL, you
        can allow others to retrieve or place objects in your Cloud
        Files account for a specified amount of time. Access to the
        TempURL is independent of whether or not your account is
        CDN-enabled. And even if you do not CDN-enable a directory,
        you can still grant temporary public access through a TempURL. </para>
      <para>This feature is useful if you want to allow a limited
        audience to download a file from your Cloud Files account or
        website. You provide a TempURL and after a specified time, no
        one will be able to access that object using the TempURL. Or,
        if you want to allow others to upload objects into your Cloud
        Files account, you can give them a TempURL. After the
        specified time expires, no one will be able to upload to the
        address.</para>
        <para>
          Additionally, you need not worry about time running out when someone 
          downloads a large object. If the time expires while a file is being retrieved, 
          the download will continue until it is finished. Only the link will expire.
        </para>
        <para> When you create a TempURL, Cloud Files validates a
        GET-accessible or PUT-accessible URL, which is time-limited. </para>
      <note>
        <para>The TempURL is the same thing as TempURL Secret, and is
          set using the TempURL metadata key described in the next
          section. The TempURL is the actual URL.</para>
      </note>
        <section xml:id="Set_Account_Metadata-d1a4460">
          <title>Set Account TempURL Metadata Key</title>
          <para> To create a TemURL, you must first set the metadata
          header <code>X-Account-Meta-Temp-URL-Key</code> on your
          Cloud Files account to a key that only you know. This key
          can be any arbitrary sequence as it is for encoding your
          account. </para>
          <para> Once the key is set, you should not change it while
          you still want others to be able to access your TempURL. If
          you change it, the TempURL becomes invalid (within 60
          seconds, which is the cache time for a key) and others will
          not be allowed to access it. </para>
          <example>
            <title>Set Account Metadata Key for Public Access</title>
          <programlisting>
  POST /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: &lt;your auth key&gt;
  X-Account-Meta-Temp-Url-Key: &lt;your key&gt;
</programlisting>           
          </example>
          <para>Any class 200 status code indicates success.</para>
        </section>
        <section xml:id="Create_TempURL-d1a444">
          <title>Create the TempURL</title>        
        <para> After the metadata is set, you must create an HMAC-SHA1
          (RFC 2104) signature. When you generate the TempURL, you
          determine which method of access you will grant users, &GET;
          or &PUT;. You also determine the path to the object to which
          you are granting access. Lastly, you set the time for your
          TempURL to expire in UNIX epoch notation. </para>
        <para> In the following examples, a TempURL is generated for
          the object my_cat.jpg that will be available for 60 seconds.
          The <code>key</code> in the example below is the
            <code>X-Account-Meta-Temp-Url-Key</code>. </para>
          <example>
            <title>Create TempURL (in python)</title>
          <programlisting>
  import hmac
  from hashlib import sha1
  from sys import argv
  from time import time

  if len(argv) != 5:
    print 'Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;'
    print 'Example: GET https://storage101.dfw1.clouddrive.com/v1/' \
        'MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/' \
        'container/my_cat.jpg 60 my_shared_secret_key'
  else:
    method, url, seconds, key = argv[1:]
    method = method.upper()
    base_url, object_path = url.split('/v1/')
    object_path = '/v1/' + object_path
    seconds = int(seconds)
    expires = int(time() + seconds)
    hmac_body = '%s\n%s\n%s' % (method, expires, object_path)
    sig = hmac.new(key, hmac_body, sha1).hexdigest()
    print '%s%s?temp_url_sig=%sAMP;temp_url_expires=%s' % \
        (base_url, object_path, sig, expires)
            </programlisting>
          </example>
          <para>
            Be certain to use the full URL to the object, just as you would with a normal request.
          </para>
          <para> In this example, the signature might be
          da39a3ee5e6b4b0d3255bfef95601890afd80709 and the expire time
          might translate to 1323479485 because the signature and
          expires completely depend on the time when the code runs. On
          your website, you would provide a link to the URL below: </para>
        <programlisting>
  https://storage.clouddrive.com/v1/AUTH_account/container/my_cat.jpg?
  temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;
  temp_url_expires=1323479485
           </programlisting>
        <para> If you do not provide users with the exact TempURL,
          they get a 401 (Unauthorized) status code. &HEAD; queries
          are allowed if &GET; or &PUT; are allowed. </para>        
          <example >
            <title>Create TempURL (in PHP)</title>
          <programlisting>
  &lt;?php
  if ($argc != 5) {
      echo "Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;";
      echo "Example: GET https://storage101.dfw1.clouddrive.com/v1/" .
           "MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/" .
           "container/my_cat.jpg 60 my_shared_secret_key";
  } else {
    $method = $argv[1];
    $url = $argv[2];
    $seconds = $argv[3];
    $key = $argv[4];
    $method = strtoupper($method);
    list($base_url, $object_path) =  split("/v1/", $url);
    $object_path = "/v1/$object_path";
    $seconds = (int)$seconds;
    $expires = (int)(time() + $seconds);
    $hmac_body = "$method\n$expires\n$object_path";
    $sig = hash_hmac("sha1", $hmac_body, $key);
    echo "$base_url$object_path?" .
         "temp_url_sig=$sig&amp;temp_url_expires=$expires";
  }
  ?&gt;
           </programlisting>
          </example>    
          <example>
            <title>Create TempURL (in Ruby)</title>
          <programlisting>
  require "openssl"

  unless ARGV.length == 4
      puts "Syntax: &lt;method&gt; &lt;url&gt; &lt;seconds&gt; &lt;key&gt;"
      puts ("Example: GET https://storage101.dfw1.clouddrive.com/v1/" +
          "MossoCloudFS_12345678-9abc-def0-1234-56789abcdef0/" +
          "container/path/to/object.file 60 my_shared_secret_key")
  else
      method, url, seconds, key = ARGV
      method = method.upcase
      base_url, object_path = url.split(/\/v1\//)
      object_path = '/v1/' + object_path
      seconds = seconds.to_i
      expires = (Time.now + seconds).to_i
      hmac_body = "#{method}\n#{expires}\n#{object_path}"
      sig = OpenSSL::HMAC.hexdigest("sha1", key, hmac_body)
      puts ("#{base_url}#{object_path}?" +
          "temp_url_sig=#{sig}&amp;temp_url_expires=#{expires}")
  end
            </programlisting>
          </example>
          
        </section>
      <section xml:id="TempURL_File_Name_Overrides-d1e213">
        <title>Override TempURL File Names</title>
        <para>TempURLs support the filename query parameter to
          override the Content-Disposition header and indicate to the
          browser a file name in which to save the file. In the
          following example, you see the usual TempURL without the
          file name override.</para>
        <example>
          <title>TempURL without File Name Override</title>
        
        <programlisting>
https://cf-cluster.example.com/v1/AUTH_account/container/object?<?sbr?>temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;temp_url_expires<?sbr?>=1323479485
          </programlisting></example>
        <para>In the following example, you see
            <code>&amp;filename=bob.txt</code> appended to the TempURL
          to indicate to the browser to save the file as
            <code>bob.txt</code>:</para>
        <example>
          <title>TempURL with File Name Override</title>
       
        <programlisting>
https://cf-cluster.example.com/v1/AUTH_account/container/object?<?sbr?>temp_url_sig=da39a3ee5e6b4b0d3255bfef95601890afd80709&amp;temp_url_expires<?sbr?>=1323479485&amp;filename=bob.txt
            </programlisting> </example>
      </section>
      </section>
        <section xml:id="FormPost-d1a555">
          <title>FormPost</title>
          <para>
            FormPost lets you offer your website audience a way to upload objects to your 
            Cloud Files account through a web form. FormPost works by translating a browser 
            form request into a object PUT in Cloud Files. Once you enable FormPost on your 
            account, you need only create the form in your website using the guidelines below. 
          </para>
          <para> As with all objects in Cloud Files, the object file
        size limit is 5 GB. If your users try to upload an object
        larger than 5 GB, they will get a file size error. </para>
          <section xml:id="Set_Account_Metadata-d1a666">
            <title>Set Account Metadata Key</title>
            <para> To allow FormPost actions on your Cloud Files
          account, you must first set the metadata header
            <code>X-Account-Meta-Temp-Url-Key</code> on your Cloud
          Files account to a key that only you know. This key can be
          any arbitrary sequence as it is for encoding your account. </para>
            <para> Once the key is set, you cannot change it while you
          still want others to access your account. If you change it,
          the actions from a FormPost become invalid (within 60
          seconds, which is the cache time for a key). </para>
            <example>
              <title>Set Account Metadata Key for Public Access</title>
          <programlisting>
  POST /&lt;api version&gt;/&lt;account&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  X-Account-Meta-Temp-Url-Key:  &lt;your key&gt;
           </programlisting>
            </example>
            <para>Any class 200 status code indicates success.</para>
          </section>
          <section xml:id="Create_the_Form-d1a777">
          <title>Create the Form</title>
            <para>
              To communicate between your website and your Cloud Files account, 
              create a form using the following format in your website:
            </para>
          <example> 
            <title>Layout of Web Form</title>
          <programlisting>
  &lt;form action="&lt;CF-url&gt;" method="POST" enctype="multipart/form-data"&gt;
    &lt;input type="hidden" name="redirect" value="&lt;redirect-url&gt;" /&gt;
    &lt;input type="hidden" name="max_file_size" value="&lt;bytes&gt;" /&gt;
    &lt;input type="hidden" name="max_file_count" value="&lt;count&gt;" /&gt;
    &lt;input type="hidden" name="expires" value="&lt;unix-timestamp&gt;" /&gt;
    &lt;input type="hidden" name="signature" value="&lt;hmac&gt;" /&gt;
    &lt;input type="file" name="file1" />&lt;br /&gt;
    &lt;input type="submit" /&gt;
  &lt;/form&gt;
           </programlisting>
          </example>
            <para>
          <emphasis>Required:</emphasis>
          <code>Form action</code> is the Cloud Files URL
            (<code>CF-url</code>) to the destination where files will
          be uploaded. For instance,
            <code>https://storage.clouddrive.com/v1/CF_xer7_34/container</code>.
          The name of each uploaded object will have the
            <code>&lt;CF-url&gt;</code> appended to the front of it. </para>
        <note>
          <para>You can also include a prefix to separate uploads,
            such as assigning each user a certain prefix:
              <code>https://storage.clouddrive.com/v1/CF_xer7_34/container/user_prefix</code>.
          </para>
        </note>
              <para>
          <emphasis>Required:</emphasis> The form <code>method</code>
          must be <code>POST</code> and the <code>enctype</code> must
          be set as <code>multipart/form-data</code>. </para>
              <para>
          <emphasis>Optional:</emphasis> The <code>redirect</code>
          attribute is the URL of the page that displays on your
          website after the form processes. The URL will have status
          and message query parameters added to it, indicating the
          HTTP status code for the upload (2xx indicates success) and
          a possible message for further information if there is an
          error, such as “max_file_size exceeded”. </para>
        <note>
          <para>Although <code>redirect</code> is optional for the
            form, it must be present in the HMAC body. </para>
        </note>
              <para>
          <emphasis>Required:</emphasis> The
            <code>max_file_size</code> attribute must be included and
          specifies the maximum size in bytes of a single file.
          However, the storage system maximum file size is 5 GB, so
            <code>max_file_size</code> cannot exceed 5 GB.</para>
              <para>              
                <emphasis>Required:</emphasis> The <code>max_file_count</code> attribute indicates the maximum number of 
              files that can be uploaded with the form.
              </para>
              <para>
          <emphasis>Required:</emphasis> The <code>expires</code>
          attribute is the Unix timestamp when the form is
          invalidated. This gives your website users a limited time to
          have the form open. Time must be in Unix epoch format.  </para>
        <note>
          <para><code>expires</code> in the web form and
              <code>expires</code> in the HMAC must be the
            same.</para>
        </note>
              <para>
                <emphasis>Required:</emphasis> The <code>signature</code> attribute is the HMAC-SHA1 signature of the form. 
                Here is sample code for computing the signature in Python:
              </para>
            <example>
              <title>Generate Signature for Form Post</title>
          <programlisting>
  import hmac
  from hashlib import sha1
  from time import time
  path = '/v1/account/container/object_prefix'
  redirect = 'https://myserver.com/some-page'
  max_file_size = 104857600
  max_file_count = 10
  expires = int(time() + 600)
  key = 'mykey'
  hmac_body = '%s\n%s\n%s\n%s\n%s' % (path, redirect,
      max_file_size, max_file_count, expires)
  signature = hmac.new(key, hmac_body, sha1).hexdigest()
          </programlisting>
            <para>Be certain to use the full path in your Cloud Files
            account, from the /v1/ onward. </para>
          <para>The <code>redirect</code> value can be an empty string
            to indicate that no redirect is included on the
            form.</para>
            <para>The <code>key</code> value is the value of the
              <code>X-Account-Meta-Temp-Url-Key</code> header set for
            the account. </para>
            <para> The <code>max_file_count</code> value used to
            generate the <code>signature</code> must be the same as
            that in the web form. </para>
            </example>
            <para>  
              <emphasis>Required:</emphasis> The <code>type="file"</code> field 
              defines the form file field. 
              At least one entry is required to allow your users to select and upload
              a file, but additional fields may be added for multiple files. The number 
              of entries should not, however, exceed the <code>max_file_count</code>. 
              Each <code>type="file"</code> field must have a different name.
            </para>
        <note>
          <para>The <code>type="file"</code> field(s) must be at the
            end of the form code in order for Cloud Files to process
            the uploads properly. </para>
        </note>           
          </section>
        </section>
    <section xml:id="CORS_Container_Header-d1e1300">
      <title>CORS </title>
      <para>Cross-Origin Resource Sharing (CORS) is a mechanism to
        allow code running in a browser to make requests to a domain
        other than the one from which it originated. CORS container
        headers allow your users to upload files from one website, or
        origin, to your Cloud Files account. When you set the CORS
        headers on your container, you tell Cloud Files which sites
        may post to your account, how often your container checks its
        allowed sites list, and what headers to expose to the browser
        in the request response. </para>
      <note>
        <para>You use CORS with FormPost (<xref
            linkend="FormPost-d1a555"
            xrefstyle="select:label quotedtitle nopage"/>) to enable
          your users to post to your site and TempURL (<xref
            linkend="TempURL-d1a4450"
            xrefstyle="select:label quotedtitle nopage"/>) to limit
          how long users can use a given URL.</para>
      </note>
      <para>Cloud Files supports CORS request to containers and
        objects. CORS metadata is held on the container only. The
        values given apply to the container itself and all objects
        within it.</para>
   
      <para>The following table lists the supported headers. </para>
      <para>
        <table rules="all" width="500">
          <caption>Supported CORS Container Headers</caption>
          <tbody>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Allow-Origin</code></td>
              <td>Origins allowed to make Cross Origin requests,
                separated by a space when there are multiples. </td>
            </tr>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Max-Age</code></td>
              <td>Maximum age for the Origin to hold the preflight
                results, in seconds (for example, 5, 10, or 1000). </td>
            </tr>
            <tr>
              <td><code>X-Container-Meta-Access-Control-Expose-Headers</code></td>
              <td>Headers exposed to the browser in the actual request
                response, separated by a space when there are
                multiples. </td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>Before a browser issues an actual request, it might issue
        a preflight request. The preflight request is an HTTP
          <command>OPTIONS</command> call to verify that the origin is
        allowed to make the request. The sequence of events is:</para>
      <orderedlist>
        <listitem>
          <para>The browser makes an <command>OPTIONS</command>
            request to Cloud Files.</para>
        </listitem>
        <listitem>
          <para>Cloud Files returns 200 or 401 to the browser based on
            the allowed origins.</para>
        </listitem>
        <listitem>
          <para>If Cloud Files returns 200, the browser makes the
            actual request (<command>DELETE</command>,
              <command>GET</command>, <command>HEAD</command>,
              <command>POST</command>, <command>PUT</command>) to
            Cloud Files. </para>
        </listitem>
      </orderedlist>
      <para>When a browser receives a response to an actual request,
        it only exposes those headers listed in the
          <code>X-Container-Meta-Access-Control-Expose-Headers</code>
        header. By default, Cloud Files returns the following values
        for this header:</para>
      <itemizedlist>
        <listitem>
          <para>the simple response headers as listed at <link
              xlink:href="http://www.w3.org/TR/cors/#simple-response-header/"
              >www.w3.org/TR/cors/#simple-response-header/</link></para>
        </listitem>
        <listitem>
          <para>the headers <code>etag</code>,
              <code>x-timestamp</code>, <code>x-trans-id</code></para>
        </listitem>
        <listitem>
          <para>all metadata headers (<code>X-Container-Meta-*</code>
            for containers and <code>X-Object-Meta-*</code> for
            objects)</para>
        </listitem>
        <listitem>
          <para>headers listed in
              <code>X-Container-Meta-Access-Control-Expose-Headers</code></para>
        </listitem>
      </itemizedlist>
      <para>To see some CORS Javascript in action, follow these
        steps:</para>
      <orderedlist>
        <listitem>
          <para>Download the <xref linkend="Test-CORS-Page-d1003"/>.
          </para>
        </listitem>
        <listitem>
          <para>Host the page on a web server and take note of the
            protocol and hostname (origin) you will be using to
            request the page, for example
              <code>http://localhost</code>.</para>
        </listitem>
        <listitem>
          <para>Locate a container you would like to query. (Of
            course, the Cloud Files cluster hosting this container
            should have CORS support.)</para>
        </listitem>
        <listitem>
          <para>Append the origin of the test page to the container’s
              <code>X-Container-Meta-Access-Control-Allow-Origin</code>
            header, using a request similar to the following
            example.</para>
        </listitem>
      </orderedlist>
      <example>
        <title>CORS POST Request</title>
        <programlisting>
curl -X POST -H 'X-Auth-Token: <emphasis role="bold"><replaceable>yourAuthToken</replaceable></emphasis>' \
  -H 'X-Container-Meta-Access-Control-Allow-Origin: http://localhost' \
  http://192.168.56.3:8080/v1/AUTH_test/cont1
</programlisting>
        <literallayout class="monospaced"/>
      </example>
      <para>At this point, the container is accessible to CORS clients
        hosted on <code>http://localhost</code>. Open the test CORS
        page in your browser and following these steps:</para>
      <orderedlist>
        <listitem>
          <para>Populate the Token field.</para>
        </listitem>
        <listitem>
          <para>Populate the URL filed with the URL of either a
            container or object.</para>
        </listitem>
        <listitem>
          <para>Select the request method.</para>
        </listitem>
        <listitem>
          <para>Hit Submit.</para>
        </listitem>
      </orderedlist>
      <para>If the request succeeds, you should see the response
        header and body. If the request did not succeed, the response
        status will be 0.</para>
      <example xml:id="Test-CORS-Page-d1003">
        <title>Test CORS Page</title>
        <programlisting>
&lt;!DOCTYPE html>
&lt;html>
  &lt;head>
    &lt;meta charset="utf-8">
    &lt;title>Test CORS&lt;/title>
  &lt;/head>
  &lt;body>

    Token&lt;br>&lt;input id="token" type="text" size="64">&lt;br>&lt;br>

    Method&lt;br>
    &lt;select id="method">
        &lt;option value="GET">GET&lt;/option>
        &lt;option value="HEAD">HEAD&lt;/option>
        &lt;option value="POST">POST&lt;/option>
        &lt;option value="DELETE">DELETE&lt;/option>
        &lt;option value="PUT">PUT&lt;/option>
    &lt;/select>&lt;br>&lt;br>

    URL (Container or Object)&lt;br>&lt;input id="url" size="64" type="text">&lt;br>&lt;br>

    &lt;input id="submit" type="button" value="Submit" onclick="submit(); return false;">

    &lt;pre id="response_headers">&lt;/pre>
    &lt;p>
    &lt;hr>
    &lt;pre id="response_body">&lt;/pre>

    &lt;script type="text/javascript">
      function submit() {
          var token = document.getElementById('token').value;
          var method = document.getElementById('method').value;
          var url = document.getElementById('url').value;

          document.getElementById('response_headers').textContent = null;
          document.getElementById('response_body').textContent = null;

          var request = new XMLHttpRequest();

          request.onreadystatechange = function (oEvent) {
              if (request.readyState == 4) {
                  responseHeaders = 'Status: ' + request.status;
                  responseHeaders = responseHeaders + '\nStatus Text: ' + request.statusText;
                  responseHeaders = responseHeaders + '\n\n' + request.getAllResponseHeaders();
                  document.getElementById('response_headers').textContent = responseHeaders;
                  document.getElementById('response_body').textContent = request.responseText;
              }
          }

          request.open(method, url);
          request.setRequestHeader('X-Auth-Token', token);
          request.send(null);
      }
    &lt;/script>

  &lt;/body>
&lt;/html>
</programlisting>
      </example>
      <!--
        <note>
        <para>For more information about CORS headers, see <xref
            linkend="Assigning_CORS_Headers_to_Requests-d1e2120"
          />.</para>
      </note>
      <section xml:id="Assigning_CORS_Headers_to_Requests-d1e2120">
        <title>Assigning CORS Headers to Requests</title>
        <para>Cross-Origin Resource Sharing (CORS) is a specification
          that defines how browsers and servers communicate across
          origins using HTTP headers, such as those assigned by Cloud
          Files API requests. The Cloud Files API supports the
          following headers. You can assign these headers to objects
          only.</para>
          
         <remark>9/24/2013 - This comes from Ed Leafe but I'm checking to see if it is accurate. Openstack info from David Goetz indicates CORS supports both containers and objects.</remark> 
          <remark>CORS headers only apply at the container level and can
            only be set on the container. A CORS header then governs
            how requests for objects in that container are handled. </remark>
-
        <para>
          <itemizedlist>
            <listitem>
              <para>Access-Control-Allow-Credentials</para>
            </listitem>
            <listitem>
              <para>Access-Control-Allow-Methods</para>
            </listitem>
            <listitem>
              <para>Access-Control-Allow-Origin</para>
            </listitem>
            <listitem>
              <para>Access-Control-Expose-Headers</para>
            </listitem>
            <listitem>
              <para>Access-Control-Max-Age</para>
            </listitem>
            <listitem>
              <para>Access-Control-Request-Headers</para>
            </listitem>
            <listitem>
              <para>Access-Control-Request-Method</para>
            </listitem>
            <listitem>
              <para>Origin</para>
            </listitem>
          </itemizedlist>
        </para>
        <para>You can read more about the definition of the
          Access-Control response headers and Origin response header
          at <link xlink:href="http://www.w3.org/TR/access-control/"
            >www.w3.org/TR/access-control/</link>.</para>
        <para>You can only set CORS headers through the Cloud Files
          API, and not through the Cloud Control Panel. In the
          following example, the origin header is assigned that
          indicates where the file came from. This allows you to
          provide security that requests to your Cloud Files
          repository are indeed from the correct origination:</para>
        <example>
          <title>Assign CORS Header Request</title>
          <literallayout class="monospaced">
  PUT /&lt;api version&gt;/&lt;account&gt;/&lt;container&gt;/&lt;object&gt; HTTP/1.1
  Host: storage.clouddrive.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Origin: http://storage.clouddrive.com
                     </literallayout>
        </example>
        <note>
          <para>For more information about CORS headers, see <xref
              linkend="CORS_Container_Header-d1e1300"/>.</para>
        </note>
      </section>
      -->
    </section>
    </chapter>
  <chapter xml:id="Troubleshooting-d1e2855">
    <title>Examples and Troubleshooting</title>
    <info>
      <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1">files</raxm:product> 
        <raxm:priority>5</raxm:priority>
      </raxm:metadata> 
    </info>
    <para>This section introduces the cURL command-line utility and
      demonstrates interacting with the REST interfaces through that
      utility.</para>
    <para>Remember that object and container names must be URL-encoded
      and UTF-8 encoded. Refer to <link
        linkend="API_Operations_for_Storage_Services-d1e942">a full
        list of the requirements</link> if you see problems. Object
      names must be less than 1024 bytes in length after URL encoding.
      For example, an object name of C++final(v2).txt should be
      URL-encoded as C%2B%2Bfinal%28v2%29.txt and therefore be 24
      bytes in length rather than the expected 16.</para>
    <para>Also, tokens expire after 24 hours. Be sure you request a
      new token programmatically only when the one you have is
      expired. </para>
  
    <section xml:id="Using_cURL-d1e2863">
      <title>Using cURL</title>
      <para>cURL is a command-line tool that you can use to interact
        with REST interfaces. cURL lets you to transmit and receive
        HTTP requests and responses from the command line or a shell
        script, which enables you to work with the API directly
        (without using one of the language-specific APIs). It is
        available for Linux® distributions, Mac OS X® , and Windows®.
        For more information about cURL, see <link
          xlink:href="http://curl.haxx.se/"
        >http://curl.haxx.se</link>. </para>
      <para>The following cURL command-line options will be used</para>
      <variablelist>
        <title>cURL Command-Line Options</title>
        <varlistentry>
          <term><option>-X METHOD</option></term>
          <listitem>
            <para>Specify the HTTP method to request (&GET;, &HEAD; ,
              &DELETE;, &POST;, &PUT;)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><option>-D</option></term>
          <listitem>
            <para>Dump HTTP response headers to stdout.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term><option>-H HEADER</option></term>
          <listitem>
            <para>Specify an HTTP header in the request.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    
  
    
      <section xml:id="Authentication-d1e2929">
        <title>Authentication with cURL</title>
        <para>In order to use the REST API, you will first need to
        obtain an authorization token, which will need to be passed in
        for each request using the <code>X-Auth-Token</code> header. </para>
        <para> The following examples demonstrate how to use cURL to
        obtain the authorization token and the URL of the storage
        system. Note that your account may be based in either the US
        or the UK. This is not determined by your physical location,
        but by the location of the Rackspace retail site where the
        account was created. </para>
        
 <!--       
        
      <para>This example uses the US-based URL
        https://identity.api.rackspacecloud.com/v1.0.</para>
        <example>
          <title>cURL Authenticate Request  and Response (v1.0) </title>
          <screen language="bash">
   <command>curl</command> <option>-D</option> - \
        <option>-H "X-Auth-Key: a86850deb2742ec3cb41518e26aa2d89"</option> \
        <option>-H "X-Auth-User: jdoe"</option> \
        <uri>https://identity.api.rackspacecloud.com/v1.0</uri>
                      </screen>
          <screen language="bash">
   <computeroutput>HTTP/1.1 204 No Content
   Date: Wed, 07 Sep 2011 18:19:26 GMT
   X-Storage-Url: https://storage.clouddrive.com/v1/CF_xer7_343
   X-CDN-Management-Url: https://cdn.clouddrive.com/v1/CF_xer7_343
   X-Auth-Token: fc81aaa6-98a1-9ab0-94ba-aba9a89aa9ae
   Content-Length: 0
   Connection: close
   Content-Type: application/octet-stream
                      </computeroutput></screen>
        </example>
        
-->        
        

      <para>This example uses the US-based URL
        https://identity.api.rackspacecloud.com/v2.0.</para>
      <example>
        <title>cURL Authenticate Request with Username and API Key
          Credentials and Response:JSON</title>
        <screen language="bash">
<command>curl -k -X POST https://identity.api.rackspacecloud.com/v2.0/tokens -d 
'{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"&lt;username>", "apiKey":"&lt;apikey>" } } }' -H 
"Content-type: application/json" </command>
 </screen>
        <screen language="bash">
   <computeroutput>{
    "access": {
        "serviceCatalog": [
            {
                "endpoints": [
                    {
                        "publicURL": "https://cdn1.clouddrive.com/v1/&lt;account_hash>",
                        "region": "DFW",
…
                    },
                    ...
                ],
                "name": "cloudFilesCDN",
                "type": "rax:object-cdn"
            },
            {
                "endpoints": [
                    {
                        "internalURL": "https://snet-storage101.dfw1.clouddrive.com/v1/&lt;account_hash>",
                        "publicURL": "https://storage101.dfw1.clouddrive.com/v1/&lt;account_hash>",
                        "region": "DFW",
…
                    },

                    ...
                ],
                "name": "cloudFiles",
                "type": "object-store"
            },
            ...
        ],
        "token": {
            "RAX-AUTH:authenticatedBy": [
                "APIKEY"
            ],
            "expires": "2013-10-29T05:36:28.683-05:00",
            "id": "&lt;auth_token>",
        },
        ...
    }
}



</computeroutput></screen>
      </example>
        
 <!-- <remark> 10282013 cyr this example use userid and password instead of userid and apikye </remark>       
        
      <example>
        <title>cURL Authenticate Request with Username and Password
          Credentials (v2.0) and Response:JSON</title>
        <screen language="bash">
<command>curl https://identity.api.rackspacecloud.com/v2.0/tokens -d 
'{"auth":{"passwordCredentials":{"username":"Username","password":"Password"}}}' -H 
"Content-type: application/json"</command>
 </screen>
        <screen language="bash">
   <computeroutput>{
  "access": {
    "serviceCatalog": [
      {
        "endpoints": [
          {
            "publicURL": "https://ord.servers.api.rackspacecloud.com/v2/12345",
            "region": "ORD",
            "tenantId": "12345",
            "versionId": "2",
            "versionInfo": "https://ord.servers.api.rackspacecloud.com/v2",
            "versionList": "https://ord.servers.api.rackspacecloud.com/"
          },
          {
            "publicURL": "https://dfw.servers.api.rackspacecloud.com/v2/12345",
            "region": "DFW",
            "tenantId": "12345",
            "versionId": "2",
            "versionInfo": "https://dfw.servers.api.rackspacecloud.com/v2",
            "versionList": "https://dfw.servers.api.rackspacecloud.com/"
          }
        ],
        "name": "cloudServersOpenStack",
        "type": "compute"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://ord.databases.api.rackspacecloud.com/v1.0/12345",
            "region": "ORD",
            "tenantId": "12345"
          },
          {
            "publicURL": "https://dfw.databases.api.rackspacecloud.com/v1.0/12345",
            "region": "DFW",
            "tenantId": "12345"
          }
        ],
        "name": "cloudDatabases",
        "type": "rax:database"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://ord.loadbalancers.api.rackspacecloud.com/v1.0/12345",
            "region": "ORD",
            "tenantId": "645990"
          },
          {
            "publicURL": "https://dfw.loadbalancers.api.rackspacecloud.com/v1.0/12345",
            "region": "DFW",
            "tenantId": "12345"
          }
        ],
        "name": "cloudLoadBalancers",
        "type": "rax:load-balancer"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://cdn1.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "region": "DFW",
            "tenantId": "MossoCloudFS_aaaa-bbbb-cccc "
          },
          {
            "publicURL": "https://cdn2.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "region": "ORD",
            "tenantId": "MossoCloudFS_aaaa-bbbb-cccc "
          }
        ],
        "name": "cloudFilesCDN",
        "type": "rax:object-cdn"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://dns.api.rackspacecloud.com/v1.0/12345",
            "tenantId": "12345"
          }
        ],
        "name": "cloudDNS",
        "type": "rax:dns"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://servers.api.rackspacecloud.com/v1.0/12345",
            "tenantId": "12345",
            "versionId": "1.0",
            "versionInfo": "https://servers.api.rackspacecloud.com/v1.0",
            "versionList": "https://servers.api.rackspacecloud.com/"
          }
        ],
        "name": "cloudServers",
        "type": "compute"
      },
      {
        "endpoints": [
          {
            "publicURL": "https://monitoring.api.rackspacecloud.com/v1.0/12345",
            "tenantId": "12345"
          }
        ],
        "name": "cloudMonitoring",
        "type": "rax:monitor"
      },
      {
        "endpoints": [
          {
            "internalURL": "https://snet-storage101.dfw1.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "publicURL": "https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "region": "DFW",
            "tenantId": "MossoCloudFS_aaaa-bbbb-cccc"
          },
          {
            "internalURL": "https://snet-storage101.ord1.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "publicURL": "https://storage101.ord1.clouddrive.com/v1/MossoCloudFS_aaaa-bbbb-cccc ",
            "region": "ORD",
            "tenantId": "MossoCloudFS_aaaa-bbbb-cccc"
          }
        ],
        "name": "cloudFiles",
        "type": "object-store"
      }
    ],
    "token": {
      "expires": "2012-04-13T13:15:00.000-05:00",
      "id": "aaaaa-bbbbb-ccccc-dddd"
    },
    "user": {
      "RAX-AUTH:defaultRegion": "DFW",
      "id": "161418",
      "name": "demoauthor",
      "roles": [
        {
          "description": "User Admin Role.",
          "id": "3",
          "name": "identity:user-admin"
        }
      ]
    }
  }
}
</computeroutput></screen>
      </example>
      
 -->     
      
        <para>The storage URL, CDN management URL, and authentication
        token are returned in the response. After authentication, you
        can use cURL to perform &GET;, &HEAD;, &DELETE;, &POST; and
        &PUT; requests on the storage and CDN services.</para>
        <para>While an authentication token lasts, you can continue to
        perform requests. <phrase>However, once a token expires, it
          will return an HTTP status code 401 (Unauthorized). Given
          that a token is good for 24 hours, even long-running jobs do
          not need to re-authenticate on every request. You will not
          need to request another <code>X-Auth-Token</code> again
          until the existing one expires.</phrase> At that point, you
        must obtain another authorization token. As a best practice
        example, here is some pseudo code for re-authenticating. The
        best scalable process flow would be:<orderedlist>
          <listitem>
            <para>Begin requests by going to
              identity.api.rackspace.com for an authentication token.
            </para>
          </listitem>
          <listitem>
            <para>Send requests to the Cloud Files service access
              endpoints and set the <code>X-Auth-Token</code> header
              with the authentication token obtained in Step 1.</para>
          </listitem>
          <listitem>
            <para>Repeat step 2 using the same authentication token
              retrieved in Step 1 until either the job finishes or you
              get a result code of 401 (Unauthorized). </para>
          </listitem>
        </orderedlist><itemizedlist>
          <listitem>
            <para>If the job finishes, you can allow the token to
              expire with no further action.</para>
          </listitem>
          <listitem>
            <para>If result code is 401, send a request to
              identity.api.rackspacecloud.com to get a new
              authentication token to use in the Cloud Files
                <code>X-Auth-Token</code> header in your
              request.</para>
          </listitem>
        </itemizedlist>A Python-based example of how to check for
        errors and re-authenticate upon receiving an error can be
        found in the OpenStack Swift project in client.py, which is
        freely available. </para>
      </section>
      
      
      <section xml:id="Determining_Storage_Usage-d1e2976">
        <title>Determining Storage Usage with cURL</title>
        <para>A &HEAD; request can be sent to the storage service to determine how much
          data you have stored in the system and the number of containers you are using. Use the
            <code>-X</code> switch to specify the correct HTTP method and the <code>-D</code> to
          dump the HTTP response headers to terminal output (stdout).</para>
        <example>
          <title>cURL Get Storage Space</title>
          <screen language="bash">
   <command>curl</command> <option>-X HEAD</option> <option>-D</option> - \
        <option>-H "X-Auth-Token: fc81aaa6-98a1-9ab0-94ba-aba9a89aa9ae"</option> \
        <uri>https://storage.clouddrive.com/v1/CF_xer7_343</uri>
                      </screen>
          <screen language="bash">
 <computeroutput>HTTP/1.1 204 No Content
  X-Account-Object-Count: 4943
  X-Account-Bytes-Used: 25603957646
  X-Account-Container-Count: 151
  Accept-Ranges: bytes
  Content-Length: 0
  X-Trans-Id: txl5d1b08e3c1540at8cceda42acc723e4
  Date: Wed, 07 Sep 2011 18:48:15 GMT
                      </computeroutput></screen>
        </example>
        <para>The HTTP request must include a header to specify the authentication token. The HTTP
          headers in the response indicate the number of containers in this storage account and the
          total bytes stored for the entire account.</para>
      </section>
      <section xml:id="Creating_a_Storage_Container-d1e3026">
        <title>Creating a Storage Container with cURL</title>
        <para> Before uploading any data to Cloud Files, you must
        create a storage container. You do this with a &PUT; request.
        cURL can be used for that, too.</para>
        <example>
          <title>cURL Create Storage Container</title>
          <screen language="bash">
   <command>curl</command> <option>-X PUT</option> <option>-D</option> - \
        <option>-H "X-Auth-Token: fc81aaa6-98a1-9ab0-94ba-aba9a89aa9ae"</option> \
        <uri>https://storage.clouddrive.com/v1/CF_xer7_343/images</uri>
                      </screen>
          <screen>
   <computeroutput>HTTP/1.1 201 Created
   Content-Length: 18
   Content-Type: text/html; charset=UTF-8
   X-Trans-Id: txs56dc5b74f91419480ba485348057bfd
   Date: Wed, 07 Sep 2011 18:52:30 GMT

   </computeroutput></screen>
        </example>
        <para>Returning an HTTP status code of 201 (Created) indicates that the container was
          successfully created.</para>
      </section>
      <section xml:id="Uploading_a_Storage_Object-d1e3067">
        <title>Uploading a Storage Object with cURL</title>
        <para>After creating a container, you can upload a local file.
        For this example, upload a screenshot image. The
          <code>-T</code> switch specifies the full path to the local
        file to upload. Please note that if you intend to distribute
        this object through the CDN you MUST make sure that the
        object's <code>Content-Type</code> is set correctly. This is
        the mechanism by which a user's web browser knows how to
        display the file or launch a helper application to view the
        file.</para>
        <example>
          <title>cURL Upload Storage Object</title>
          <screen>
   <command>curl</command> <option>-X PUT</option> <option>-T screenies/wow1.jpg</option> <option>-D</option> - \
     <option>-H "ETag: 805120ec285a7ed28f74024422fe3594"</option> \
     <option>-H "Content-Type: image/jpeg"</option> \
     <option>-H "X-Auth-Token: fc81aaa6-98a1-9ab0-94ba-aba9a89aa9ae"</option> \
     <option>-H "X-Object-Meta-Screenie: Mel visits Outland"</option> \
     <uri>https://storage.clouddrive.com/v1/CF_xer7_343/images/wow1.jpg</uri>
                      </screen>
          <screen>
   <computeroutput>HTTP/1.1 201 Created
   Date: Thu, 09 Aug 2012 17:03:36 GMT
   Content-Length: 0
   ETag: 805120ec285a7ed28f74024422fe3594 
   Content-Type: text/plain
   </computeroutput></screen>
        </example>
      </section>
      <section xml:id="CDN-Enabling_the_Container-d1e3123">
        <title>CDN-Enabling the Container with cURL</title>
        <para>After creating a container and storing a file in it, you
        can choose to share the file. Since the data in Cloud Files is
        all private, you can share your screenshot through the CDN. To
        CDN-enable a container, issue a &PUT; request against the CDN
        management service. The default TTL is 72 hours and supports a
        minimum of 15 minutes (900 seconds) and a maximum of 50 years
        (1577836800 seconds). Note that the target URL specifies the
        CDN system, not the authorization system.</para>
      <note>
        <title>Note</title>
        <para> On August 13, 2012, the maximum TTL was set to 31536000
          (one year). If you set new TTL values to a greater time
          frame, your object will still expire at the one-year mark.
          However, if you already had a greater TTL value set on an
          object, it will expire at the time you had originally set.
        </para>
      </note>
        <example>
          <title>cURL CDN-Enable Container</title>
          <screen language="bash">
   <command>curl</command> <option>-X PUT</option> <option>-D</option> - \
        <option>-H "X-Auth-Token: fc81aaa6-98a1-9ab0-94ba-aba9a89aa9ae"</option> \
        <option>-H "X-CDN-Enabled: True"</option> \
        <option>-H "X-TTL: 259200"</option> \
        <uri>https://cdn.clouddrive.com/v1/CF_xer7_343/images</uri>
                      </screen>
          <screen>
   <computeroutput>
  HTTP/1.1 204 No Content
  X-Cdn-Ssl-Uri: https://83c49b9a2f7ad18250b3-346eb45fd42c58ca13011d659bfc1ac1. ssl.cf0.rackcdn.com
  X-Ttl: 259200
  X-Cdn-Uri: http://081e40d3ee1cec5f77bf-346eb45fd42c58ca13011d659bfc1ac1. r49.cf0.rackcdn.com
  X-Cdn-Enabled: True
  X-Log-Retention: False
  X-Cdn-Streaming-Uri: http://084cc2790632ccee0a12-346eb45fd42c58ca13011d659bfc1ac1. r49.stream.cf0.rackcdn.com
  X-Trans-Id: tx82a6752e00424edb9c46fa2573132e2c
  Content-Length: 0
        </computeroutput></screen>
        </example>
        <para>When the container is CDN-enabled, the service returns
        its public URL in the <code>X-CDN-URI</code> header of the
        response, plus the SSL URL in the <code>X-Cdn-Ssl-Uri</code>
        header of the response. Now you can combine this URL with the
        object name to access the file through the CDN, or use the
        https:// URL in combination with the object name to access the
        file over a secure SSL connection through the CDN.</para>
        <para>You can verify the CDN's cache settings that you specified with your TTL value by
          sending a &GET; request to the object's CDN URL and viewing the response
          headers. The TTL value you specify translates to the <code>Expires</code> and
            <code>Cache-Control</code> headers of the CDN's cached Object.</para>
        <para>The cURL command below issues a &GET; request which
        downloads the entire file but writes it to
          <code>/dev/null</code>, a data sink that will not actually
        save the content to your local drive (this convention is only
        valid on UNIX-like systems).</para>
        <example>
          <title>cURL Download a File</title>
          <screen language="bash">
   <command>curl</command> <option>-s</option> <option>-D</option> - \
     <uri>http://80745c48926cd286a5a0-48261ebe0e4c795a565ece6b9cca2fe8.r10.cf1.rackcdn.com/wow1.jpg</uri> \
     <option>-O /dev/null</option>
                      </screen>
          <screen>
   <computeroutput>HTTP/1.1 200 OK
   Date: Thu, 06 Aug 2009 01:40:12 GMT
   Expires: Fri, 07 Aug 2009 01:40:12 GMT
   Last-Modified: Thu, 09 Jul 2009 17:14:46 GMT
   Cache-Control: max-age=86400, public
   ETag: b20237bff6828976d2eb348e1ca8adae
   Content-Length: 1255764
   Content-Type: image/jpeg
   Connection: keep-alive
   </computeroutput></screen>
        </example>
      </section>
      <section xml:id="Other_cURL_Commands-d1e3222">
        <title>Other cURL Commands</title>
        <para>You can issue any of the REST methods defined for Cloud
        Files with the cURL utility. For example, you can use cURL to
        send &POST; and &DELETE; requests even though no specific
        examples are provided.</para>
        <para>It should be noted that generally each time <code>curl</code> is invoked to perform an
          operation, a separate TCP/IP and SSL connection is created and thrown away. The language
          APIs, however, are designed to re-use these connections between operations and therefore
          provide much better performance. It is recommended that you use one of the
          language APIs in your production applications and limit <code>curl</code> to
          quick-and-easy testing/troubleshooting.</para>
      </section>
  </chapter>
  <glossary>
    <title>Glossary</title>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Account</glossterm>
      <glossdef>
        <para>The Cloud Files system is designed to be used by many
          different customers. Your user account is your slice of the
          Cloud Files system. You must identify yourself with a valid
          user name and your API access key. Once authenticated, your
          have full read/write access to the objects (files) stored
          under your account.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Application program interface (API)</glossterm>
      <glossdef>
        <para>A set of routines, protocols, and tools for building
          software applications. A good API makes it easier to develop
          a program by providing all the building blocks. A programmer
          then puts the blocks together. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Authentication</glossterm>
      <glossdef>
        <para>Authentication requires getting an authentication token
          by using the Rackspace Cloud Identity service. While the
          authentication token is valid (which in most cases is 24
          hours), you must pass it  to Cloud Files to perform all
          Cloud Files operations.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>CDN-enabled containers</glossterm>
      <glossdef>
        <para>To publish your data so that it can be served by
          Akamai's content delivery network (CDN), you need to
          CDN-enabled the container that houses that data. When a
          container is CDN-enabled, any files in the container are
          publicly accessible and do not require an authentication
          token for read access. However, uploading content into a
          CDN-enabled container is a secure operation and requires a
          valid authentication token. Each published container has a
          unique URL that can be combined with its object name and
          openly distributed in web pages, emails, or other
          applications. For example, a CDN-enabled container named
            <code>photos</code> can be referenced as
            <code>http://c0344252.cdn.cloudfiles.rackspacecloud.com</code>.
          If that container houses an image called
            <code>cute_kids.jpg</code>, that image can be served by
          Akamai's CDN with the full URL of
            <code>http://c0344252.cdn.cloudfiles.rackspacecloud.com/cute_kids.jpg</code>. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Container</glossterm>
      <glossdef>
        <para>A storage compartment that provides a way for you to
          organize data. A container is similar to a folder in Windows
          or a directory in UNIX. The primary difference between a
          container and these other file system concepts is that
          containers cannot be nested. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Content delivery network (CDN)</glossterm>
      <glossdef>
        <para>A content delivery network (CDN) is a system of
          distributed servers (network) that deliver webpages and
          other Web content to a user based on the geographic
          locations of the user, the origin of the webpage, and a
          content delivery server. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Language-specific API</glossterm>
      <glossdef>
        <para>Language-specific APIs in several popular languages are
          available to help put Cloud Files in the hands of
          developers. These APIs provide a layer of abstraction on top
          of the base REST API, allowing programmers to work with a
          container and object model instead of working directly with
          HTTP requests and responses. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Middleware</glossterm>
      <glossdef>
        <para> Software that connects two otherwise separate
          applications. For example, there are a number of middleware
          products that link a database system to a Web server.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Operations</glossterm>
      <glossdef>
        <para>Operations are the actions you perform against your
          account in Cloud Files, such as creating or deleting
          containers, uploading or downloading objects, etc.
          Operations are performed via the REST web service API or a
          language-specific API.</para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Permissions</glossterm>
      <glossdef>
        <para>There are no permissions or access-controls for
          containers or objects other than being split into separate
          accounts. You must authenticate with a valid API access key,
          but once authenticated you can create and delete containers
          and objects only within that account. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Private container</glossterm>
      <glossdef>
        <para>A private container is a container that is only
          accessible by the account holder. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>Public container</glossterm>
      <glossdef>
        <para>A public container is a CDN-enabled container that is
          publicly accessible. </para>
      </glossdef>
    </glossentry>
    <glossentry xmlns:m="http://www.w3.org/1998/Math/MathML">
      <glossterm>REST</glossterm>
      <glossdef>
        <para>REST, short for Representational State Transfer, is an
          architectural style for large-scale software design. </para>
      </glossdef>
    </glossentry>
  </glossary>
 </book>
